# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ViewSapBinFFArea {
  """Entity ID"""
  id: ID

  """Entity ID"""
  areaId: ID

  """Entity code"""
  areaCode: String

  """Sap bin code"""
  sapBinCode: String

  """Sap storage type code"""
  sapStorageTypeCode: String

  """Is the area empty of stock"""
  isAreaEmpty: Boolean

  """Entity ID"""
  warehouseId: ID

  """Entity ID"""
  systemConnectionId: ID
}

type SystemConnection {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Description of entity"""
  description: String

  """System connection type"""
  systemType: SystemConnectionType!

  """System connection url"""
  baseUrl: String!

  """System connection url headers to include in requests to the system."""
  urlHeaders: JSONObject

  """System connection timezone"""
  timezone: String!

  """System connection timezone"""
  stockStatusSetting: SystemStockStatusSetting!

  """Request Batch Size"""
  batchSize: Int

  """System connection active"""
  active: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum SystemConnectionType {
  SAP
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum SystemStockStatusSetting {
  stockStatus
  stockStatusAndHuStatus
}

type SapWarehouseMapping {
  warehouseId: ID!
  erpWarehouseCode: String
  plant: String!
  storageLocations: [String!]!
  shippingPoints: [String!]!
}

"""Contact Info model"""
type ContactInfo {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Phone number"""
  phone: String

  """Fax Number"""
  fax: String

  """Contact email address"""
  email: String

  """Street 1"""
  street1: String

  """Street 2"""
  street2: String

  """Town or City"""
  city: String

  """State"""
  state: String

  """Zip code"""
  zip: String

  """Country"""
  country: String
}

"""Display preference model"""
type DisplayPreference {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Preferred number format, i.e. wcfp"""
  numberFormat: NumberFormat

  """Preferred date and time format, i.e. MM/dd/yyyy HH:mm"""
  dateTimeFormat: String!

  """Preferred timezone, i.e. America/Denver"""
  timezone: String!

  """Preferred language, i.e. en"""
  language: String!

  """Preferred currency, i.e. USD"""
  currency: String!

  """Unit of measure system"""
  measurementSystem: StandardUOMSystem!
}

enum NumberFormat {
  WHOLE_COMMAS_FRACTIONAL_PERIOD
  WHOLE_PERIOD_FRACTIONAL_COMMA
  WHOLE_SPACE_FRACTIONAL_COMMA
}

enum StandardUOMSystem {
  imperial
  metric
}

"""Organization model"""
type Organization {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String

  """ApiDocs"""
  name: String!

  """Description of entity"""
  description: String

  """Number of users allowed in an organization"""
  userLimit: Int!
  contactInfo: ContactInfo
  companies: CompanyNodes
  displayPreference: DisplayPreference
  displayPreferenceId: ID
}

"""Door model"""
type Door {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String

  """Door direction.  inbound outbound or both."""
  direction: doorDirection!

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's bin ID (foreign key)"""
  binId: ID
}

enum doorDirection {
  inbound
  outbound
  both
}

"""Fulfillment Block model"""
type FulfillmentBlock {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String
}

"""Stored image model"""
type StoredImage {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Original image file uploaded"""
  original: String!

  """Web optimized version of image"""
  web: String!

  """Thumbnail version of image"""
  thumbnail: String
}

"""Disposition model"""
type Disposition {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Notes for a submitted disposition"""
  notes: String!
  images: [StoredImage!]
}

type InternalStockOrderType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: InternalStockOrderTypeCode!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String
}

enum InternalStockOrderTypeCode {
  putawayFromStorage
  pickToDock
  qualityRequest
  reworkRequest
}

type InternalStockOrder {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!
  referenceDocument: String

  """Entity ID"""
  internalStockOrderTypeId: String!
}

"""Lot model"""
type Lot {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Product number in erp"""
  productNumber: String

  """Boolean indicating if lot product is in restricted stock status"""
  warehouseStatus: Boolean

  """When data was created in ERP"""
  erpCreatedOn: DateTime

  """When data was last updated in ERP"""
  erpUpdatedOn: DateTime

  """Lot production date"""
  productionDate: DateTime

  """Lot expiration date"""
  expiration: DateTime

  """Lot supplier number"""
  supplierLotNumber: String

  """Erp sync status"""
  erpSynced: Boolean!

  """Lot Restricted"""
  restricted: Boolean!
  product: Product
}

"""Warehouse Preferred Unit Of Measure model"""
type WarehousePreferredUnitOfMeasure {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's product ID (foreign key)"""
  productId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Unit of measure ID"""
  unitOfMeasureId: ID!
  product: Product
  unitOfMeasure: UnitOfMeasureProductConversion
}

"""Unit Of Measure Product Conversion model"""
type UnitOfMeasureProductConversion {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """
  Conversion factor to convert units of measure -> Multiply against base UOM
  """
  conversionFactor: Float!

  """Gross weight of entity"""
  grossWeight: Float

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Product's length"""
  length: Float

  """Product's width"""
  width: Float

  """Product's Height"""
  height: Float

  """Unit of measure for product dimensions"""
  dimensionUOMId: String

  """Boolean for base unit of measure if true UOM is base"""
  isBaseUom: Boolean!

  """Boolean for base unit of measure if true UOM is base"""
  warehouseUnitOfMeasure: JSON

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Unit of measure glossary ID"""
  unitOfMeasureGlossaryId: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type SapStockStatusType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime
  code: String!
  label: String!

  """System connection ID"""
  systemConnectionId: ID
}

type SapHuUserStatus {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """System connection ID"""
  systemConnectionId: ID!

  """Hu User Status Priority"""
  priority: Int
}

type StockStatusMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID!

  """Entity's SAP stock status type ID (foreign key)"""
  sapStockStatusTypeId: ID!

  """Entity ID"""
  sapHuUserStatusId: ID

  """
  Stock status used when converting ERP stock status to Fulfilld stock status
  """
  default: Boolean
}

"""Stock Status Type model"""
type StockStatusType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String!

  """Determines if stock status type is in use"""
  stockStatusTypeStatus: StockStatusTypeStatus

  """
  Stock status used when converting ERP stock status to Fulfilld stock status
  """
  default: Boolean @deprecated(reason: "Deprecated - default moved to stock status mapping")
  sapStockStatusTypeMappings(warehouseId: String!): StockStatusMappingByWarehouseDto
}

enum StockStatusTypeStatus {
  active
  inactive
}

"""EquipmentModel model"""
type EquipmentModel {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Type of equipment, i.e. forklift"""
  label: String!

  """Description of entity"""
  description: String

  """Type of equipment, i.e. forklift"""
  equipmentTypeId: ID!
}

"""EquipmentType model"""
type EquipmentType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Type of equipment, i.e. forklift"""
  label: String!

  """Description of entity"""
  description: String

  """Velocity unit of measure"""
  velocityUOMId: ID

  """Velocity"""
  velocity: Float

  """Velocity"""
  verticalVelocity: Float

  """Weight UOM, i.e KG"""
  weightUOMId: ID

  """Number representing maximum weight limit for an equipment model."""
  weightMax: Float

  """Currency"""
  currency: String!

  """Cost"""
  cost: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: ID

  """Cost"""
  volumeMax: Float

  """Type of location data for an equipment model (Dynamic/Static)"""
  mobility: EquipmentMobility!

  """Number representing maximum height allowance of equipment model."""
  heightMax: Float

  """Number representing minimum height allowance of equipment model."""
  heightMin: Float

  """Imperial or metric unit of measure for height limit."""
  heightUOMId: ID
  equipmentModels: [EquipmentModel!]
  tasks: [Task!]
}

enum EquipmentMobility {
  dynamic
  static
}

"""WarehouseRoleType entity model"""
type WarehouseRoleType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Velocity unit of measure"""
  velocityUOMId: String

  """Velocity"""
  velocity: Float

  """Weight UOM, i.e KG"""
  weightUOMId: String!

  """Number representing maximum weight limit for an equipment model."""
  weightMax: Float

  """Currency"""
  currency: String!

  """Cost"""
  cost: Float
}

type Zone {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  pickingUomRestriction: UnitOfMeasureGlossary
  bins: [Bin!]
}

type SlottingRestrictions {
  fifoPicking: Boolean!
  fefoFifoPicking: Boolean!
  heaviestToLightestPicks: Boolean!
  preventMixedProductsInBins: Boolean!
  preventMixedLotsInBins: Boolean!
  preventMixedExpirationDatesInBins: Boolean!
  enforceSingleOrderPicks: Boolean!
  preventSimilarProductsInAdjacentBins: Boolean!
  restrictDistance: Boolean!
  restrictedDistance: Float
  restrictDistanceBy: DistanceRestrictionEnum
}

enum DistanceRestrictionEnum {
  aisle
  zone
  area
}

type SlottingWeights {
  pickDensity: Float!
  pickEfficiency: Float!
  putawayDensity: Float!
  putawayEfficiency: Float!
  avoidCongestion: Float!
  favorGroundLevel: Float!
}

type SlottingWorker {
  id: ID!
  quantity: Float!
}

type SlottingEquipment {
  id: ID!
  quantity: Float!
}

type AbcAnalysis {
  criteria: String!
  indicatorPercentages: [Float!]!
}

type SlottingZone {
  zoneId: String!
  groupId: String
  fixedBins: Boolean
  useMaxMovements: Boolean
  optimizeZone: Boolean!
  zoneConfiguration: ZoneConfiguration!
  maxFixedBinsPerProduct: Float!
  restrictions: SlottingRestrictions!
  weights: SlottingWeights!
  parentZoneId: String
}

enum ZoneConfiguration {
  warehouse
  group
  custom
}

type SlottingZoneGroup {
  groupId: String!
  name: String!
  fixedBins: Boolean
  useMaxMovements: Boolean
  optimizeZone: Boolean!
  zoneConfiguration: ZoneConfiguration!
  maxFixedBinsPerProduct: Float!
  restrictions: SlottingRestrictions!
  weights: SlottingWeights!
  zonesInGroup: [String!]
}

type SlottingRuleset {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """"""
  name: String!

  """Slotting config private indicator"""
  privateRuleset: Boolean

  """"""
  warehouseId: String!

  """"""
  maxMovements: Int
  workers: [SlottingWorker!]
  equipment: [SlottingEquipment!]
  abcAnalysis: AbcAnalysis

  """"""
  forecasting: Forecasting
  weights: SlottingWeights
  restrictions: SlottingRestrictions

  """"""
  runCount: Int
  zones: [SlottingZone!]
  zoneGroups: [SlottingZoneGroup!]

  """Entity ID"""
  createdByUserId: ID

  """Slotting config last run"""
  lastRun: DateTime

  """ruleset status, i.e. COMPLETE, DRAFT"""
  rulesetStatus: RulesetStatus
}

enum Forecasting {
  future
  historical
}

enum RulesetStatus {
  draft
  complete
}

type RolePermissionMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity ID"""
  roleId: ID!

  """Entity ID"""
  permissionId: ID!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

type RolePermissionMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [RolePermissionMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type Permission {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Description of entity"""
  description: String!

  """Entity code"""
  code: String!
  subject: String!
  grouping: PermissionGrouping!
}

enum PermissionGrouping {
  AGENT_CONFIGURATION
  AISLE
  AISLE_COLUMN
  AREA
  BARCODE
  BIN
  BIN_SIZE
  BIN_STATUS
  BIN_STATUS_MAPPING
  BUSINESS_PARTNER
  COMPANY
  CONTACT_INFO
  CONTRACT
  CONTRACT_RULE
  COUNT_ARTIFACT
  DELIVERY
  DELIVERY_ITEM
  DISPLAY_PREFERENCE
  DISPOSITION
  DOOR
  EFFECTIVE_CONTRACT_MAPPING
  EQUIPMENT
  EQUIPMENT_MODEL
  EQUIPMENT_TYPE
  FULFILLMENT
  FULFILLMENT_BLOCK
  FULFILLMENT_ITEM
  HISTORY
  INTEGRATION_LOG
  INTERNAL_STOCK_ORDER
  INVENTORY
  INVENTORY_RECONCILIATION
  INVOICE
  INVOICE_ITEM
  LAYOUT
  LICENSE_PLATE
  LICENSE_PLATE_STATUS
  LICENSE_PLATE_STATUS_MAPPING
  LOT
  MAP
  NON_COMPLIANT_BARCODE
  ORGANIZATION
  PAGE
  PERMISSION
  PRODUCT
  ROLE
  ROLE_PERMISSION_MAPPING
  SAP_BIN_FF_AREA
  SAP_DELIVERY_DOCUMENT_TYPE
  SAP_STOCK_STATUS
  SAP_STORAGE_LOCATION_PLANT
  SLOTTING_CONFIGURATION
  SLOTTING_RULESET
  SLOTTING_RUN
  SLOTTING_DATAFRAME
  SLOTTING_DATASET
  SLOTTING_EXCLUSION
  STOCK_STATUS_TYPE
  SYSTEM_CONNECTION
  TASK
  TASK_TYPE
  TASK_TYPE_BIN_STATUS_MAPPING
  TASK_TYPE_STOCK_STATUS_MAPPING
  TEAM
  UNIT_OF_MEASURE
  UNIT_OF_MEASURE_GLOSSARY
  USER
  USER_GROUP
  USER_TEAM_MAPPING
  WAREHOUSE
  WAREHOUSE_OP_FILE_ROW
  WAREHOUSE_ROLE_TYPE
  WAREHOUSE_PATH
  WAREHOUSE_PREFERRED_UOM
  WAREHOUSE_CONFIGURATION
  ZONE
}

type PermissionOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Permission!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PermissionDimension {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime
  field: String!
  value: String!
  subject: String!

  """Entity ID"""
  roleId: ID!

  """Entity ID"""
  permissionId: ID!
}

type Role {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """ApiDocs"""
  name: String!

  """Determines if a roles is default"""
  default: Boolean!
}

type RoleOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Role!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserGroupRoleMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity ID"""
  roleId: ID

  """Entity ID"""
  userGroupId: ID!

  """Entity ID"""
  warehouseId: ID!
}

type UserGroup {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """ApiDocs"""
  name: String!

  """Default entity"""
  default: Boolean
}

type UserGroupMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity ID"""
  userId: ID!

  """Entity ID"""
  userGroupId: ID!
}

type UserGroupMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UserGroupMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

"""Team model"""
type Team {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """ApiDocs"""
  name: String!

  """Description of entity"""
  description: String!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Is the entity a default entity that cant be deleted"""
  default: Boolean!

  """Team's status"""
  status: TeamStatus!

  """
  Team's Task Filter as an object in json format as GraphQL Query Requests expect.
  """
  taskFilter: JSON

  """Team's Task Filter as an array of filter objects"""
  taskFilterArray: JSON
  users: Users
  warehouse: Warehouse
}

enum TeamStatus {
  active
  inactive
}

type UserTeamMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's team ID (foreign key)"""
  teamId: ID!

  """Entity's team ID (foreign key)"""
  userId: ID!

  """Entity's team ID (foreign key)"""
  active: Boolean!
}

type UserWarehouseDefault {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: String!

  """Entity's user ID (foreign key)"""
  userId: String!

  """Entity's team ID (foreign key)"""
  default: Boolean!
}

"""User model"""
type User {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime
  type: UserType!

  """Person's first name"""
  firstName: String!

  """Person's last name"""
  lastName: String!

  """Email address"""
  email: String!

  """Phone number"""
  phone: String

  """User's account status"""
  status: UserStatus!

  """
  If true entire mobileDetails object will be replaced on update otherwise update fields will merge with the object
  """
  refreshMobileDetails: Boolean
  mobileDetails: JSON

  """User's firebase auth Id"""
  firebaseAuthUid: String
  displayPreference: DisplayPreference
  displayPreferenceId: ID
  primaryTeams: [Team!]
  allTeams: [Team!]
  defaultWarehouse: Warehouse
  sapAuthToken: String
}

enum UserType {
  standard
  system
}

enum UserStatus {
  active
  inactive
}

"""Product Movement model"""
type ProductMovement {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's user ID (foreign key)"""
  userId: ID!

  """Entity's user ID (foreign key)"""
  licensePlateId: ID

  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Entity's bin ID (foreign key)"""
  binId: ID!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity ID"""
  deliveryItemId: ID

  """Entity ID"""
  fulfillmentItemId: ID

  """Quantity of product moved"""
  quantity: String!
  category: InventoryCategory!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

enum InventoryCategory {
  PLANNED
  EXECUTABLE
}

type LicensePlate {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """License Plate erp code"""
  erpCode: String

  """Length of license plate"""
  length: Float

  """Height of license plate"""
  baseLength: Float

  """Width of license plate"""
  width: Float

  """Height of license plate"""
  baseWidth: Float

  """Height of license plate"""
  height: Float

  """Height of license plate"""
  baseHeight: Float

  """Unit of measure for dimensions of a license plate"""
  dimensionUOMId: ID

  """Gross weight of entity"""
  grossWeight: Float

  """Gross weight of entity"""
  baseGrossWeight: Float

  """Net weight of entity"""
  netWeight: Float
  baseNetWeight: Float

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """Status of license plate"""
  processStatus: String

  """X coordinate location for the license plate"""
  x: Float

  """Y coordinate location for the license plate"""
  y: Float

  """Material that the license plate is made of"""
  licensePlateMaterial: String

  """Material type that the license plate is made of"""
  licensePlateMaterialType: String

  """Description of entity"""
  description: String

  """Entity's SAP storage location"""
  storageLocation: String

  """License Plate Parent ID"""
  parentId: ID

  """Entity ID"""
  dispositionId: String

  """
  Status determining if the license plate and its contents are successfully synced with the ERP ledger.
  """
  ledgerSyncStatus: LedgerSyncStatus

  """Reason ledger sync status is not successful."""
  ledgerSyncStatusReason: String

  """Status of the quantity of a product within license plate"""
  partial: LicensePlatePartial

  """Unit of measure ID"""
  licensePlateContentsUoMId: ID

  """
  Timestamp representing the moment in time a license plate entered a non-refridgerated space
  """
  freshnessClock: DateTime

  """Timestamp of latest movement"""
  lpLastMovement: DateTime

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime
}

enum LedgerSyncStatus {
  unknown
  failed
  success
}

enum LicensePlatePartial {
  partial
  full
  unknown
}

"""Task Type model"""
type TaskType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's label"""
  label: String!

  """Entity code"""
  code: String!

  """Description of entity"""
  description: String

  """Task type reference category"""
  referenceCategory: TaskTypeReferenceCategory
}

enum TaskTypeReferenceCategory {
  outboundFulfillment
  inboundDelivery
  count
}

"""Task group model"""
type TaskGroup {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!
  assignedAt: DateTime

  """x coordinate location"""
  completedAtLocationX: Float

  """Y coordinate location"""
  completedAtLocationY: Float
  completedAt: DateTime
  plannedCompletionAt: DateTime
  plannedStartAt: DateTime

  """x coordinate location"""
  startedAtLocationX: Float

  """Y coordinate location"""
  startedAtLocationY: Float
  startedAt: DateTime

  """Task status, i.e Not Started"""
  status: TaskGroupTaskStatus!

  """Entity ID"""
  assignedByUserId: ID

  """Entity ID"""
  assignedTeamId: ID

  """Entity ID"""
  taskTypeId: ID

  """Entity ID"""
  startedByUserId: ID

  """Entity ID"""
  assignedUserId: ID

  """Entity ID"""
  completedByUserId: ID

  """Entity ID"""
  warehouseId: ID!
  warehouse: Warehouse!
}

enum TaskGroupTaskStatus {
  cancelled
  notStarted
  inProgress
  complete
  planned
}

"""Task model"""
type Task {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Source License Plate Id"""
  sourceLicensePlateId: ID

  """Destination license plate ID"""
  destinationLicensePlateId: ID

  """Entity's team ID (foreign key)"""
  teamId: ID @deprecated(reason: "no longer in use")

  """Entity's user ID (foreign key)"""
  userId: ID @deprecated(reason: "no longer in use")

  """Source bin ID (foreign key)"""
  sourceBinId: ID

  """Destination bin ID (foreign key)"""
  destinationBinId: ID

  """Entity's product ID (foreign key)"""
  productId: ID

  """Task type ID (foreign key)"""
  taskTypeId: ID!

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Destination lot ID (foreign key)"""
  destinationLotId: ID

  """Quantity of product"""
  quantity: String

  """Unit of measure ID"""
  createdInUnitOfMeasureId: ID

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID

  """Quantity of product"""
  baseQuantity: String

  """Task status, i.e Not Started"""
  status: TaskStatus

  """Source stock status type ID (foreign key)"""
  sourceStockStatusId: ID

  """Meta data stored on the entity in json format"""
  metaData: JSON

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Destination stock status type ID (foreign key)"""
  destinationStockStatusId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Referring doc"""
  referringDoc: String

  """Reference item"""
  referringDocItem: String

  """Date the task is or was due"""
  dueDate: DateTime

  """Date the task was completed"""
  completionDate: DateTime @deprecated(reason: "no longer in use")

  """Entity's parent task ID"""
  parentTaskId: ID

  """Task that is display only"""
  readonly: Boolean

  """Type of equipment, i.e. forklift"""
  equipmentTypeId: ID

  """Entity ID"""
  taskGroupId: ID

  """Position in order within a task group"""
  taskGroupPosition: Float

  """Count accuracy"""
  countAccuracy: Float

  """Indicates whether the count should be guided or blind"""
  countType: PhysicalInventoryCountType

  """Entity ID"""
  internalStockOrderItemId: ID
  assignedUserId: ID
  assignedTeamId: ID

  """Deleted at date"""
  assignedAt: DateTime

  """Entity ID"""
  assignedByUserId: ID

  """Entity ID"""
  startedByUserId: ID

  """Entity ID"""
  startedByTeamId: ID

  """Date and time a task is started"""
  startedAt: DateTime

  """x coordinate location"""
  startedAtLocationX: Float

  """Y coordinate location"""
  startedAtLocationY: Float
  completedByUserId: ID
  completedByTeamId: ID

  """Date and time a task is completed"""
  completedAt: DateTime

  """x coordinate location"""
  completedAtLocationX: Float

  """Y coordinate location"""
  completedAtLocationY: Float

  """"""
  linkedTaskId: ID
  inventoryCategory: PMInventoryCategory!
  team: Team @deprecated(reason: "deprecated - use assignedTeam")
  assignedTeam: Team
  taskType: TaskType
  product: Product
  destinationBin: Bin
  sourceBin: Bin
  destinationLot: Lot
  sourceLot: Lot
  destinationLicensePlate: LicensePlate
  sourceLicensePlate: LicensePlate
  destinationStockStatus: StockStatusType
  sourceStockStatus: StockStatusType
  delivery: Delivery
  deliveryItem: DeliveryItem
  fulfillmentItem: FulfillmentItem
  warehouse: Warehouse
}

enum TaskStatus {
  cancelled
  notStarted
  inProgress
  complete
  planned
}

enum PhysicalInventoryCountType {
  blindCount
  guidedCount
  detailCount
}

enum PMInventoryCategory {
  PLANNED
  EXECUTABLE
}

"""Delivery model"""
type Delivery {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Bill of Lading"""
  billOfLading: String

  """ERP delivery block"""
  blockStatus: String

  """Delivery category"""
  category: DeliveryCategory

  """Overall status for the delivery or fulfillment"""
  deliveryStatus: DeliveryCompletionStatus

  """Expected delivery date"""
  dueDate: DateTime

  """Reason blocked in ERP"""
  erpBlockingReason: String

  """Erp Delivery Code"""
  erpCode: String!

  """Date created in ERP"""
  erpCreated: DateTime

  """When data was last updated in ERP"""
  erpLastChanged: DateTime
  erpPurchaseOrder: String

  """Reference document"""
  erpSalesOrder: String

  """Export"""
  export: String

  """Goods receipt or goods issue status"""
  goodsReceiptOrIssueStatus: DeliveryCompletionStatus

  """Load/unload status"""
  loadOrUnloadStatus: DeliveryCompletionStatus

  """Picking or putaway status"""
  pickOrPutawayStatus: DeliveryCompletionStatus

  """Point of contact"""
  pointOfContact: String

  """Delivery promise date"""
  promiseDate: DateTime

  """Ship to party"""
  shipTo: String @deprecated(reason: "Please access this value through business partner relationship shipToBusinessPartnerId or via delivery view.")

  """Ship to party name"""
  shipToName: String @deprecated(reason: "Please access this value through business partner relationship soldToBusinessPartnerId or via delivery view.")

  """Date when all line items are availalbe 100%"""
  shipReadyDate: DateTime

  """Sold to party"""
  soldTo: String @deprecated(reason: "Please access this value through business partner relationship soldToBusinessPartnerId or via delivery view.")

  """Sold to party name"""
  soldToName: String @deprecated(reason: "Please access this value through business partner relationship soldToBusinessPartnerId or via delivery view.")

  """Supplier"""
  supplier: String @deprecated(reason: "Please access this value through business partner relationship supplierBusinessPartnerId or via delivery view.")

  """Supplier name"""
  supplierName: String @deprecated(reason: "Please access this value through business partner relationship supplierBusinessPartnerId or via delivery view.")

  """Total gross weight"""
  totalGrossWeight: Float

  """Total net weight"""
  totalNetWeight: Float

  """Volume"""
  totalVolume: Float

  """Type of delivery (i.e. delivery vs fulfillment)"""
  type: DeliveryType!

  """Volume unit of measure"""
  totalVolumeUOMId: ID

  """Total gross weight unit of measure"""
  totalWeightUOMId: ID

  """Entity's door ID (foreign key)"""
  doorId: ID

  """Fulfillment Block"""
  fulfillmentBlockId: ID

  """ID for a warehouse op file"""
  orderConfirmationFileId: ID

  """Ship to Business Partner unique Id"""
  shipToBusinessPartnerId: ID

  """Sold to Business Partner unique id"""
  soldToBusinessPartnerId: ID

  """Supplier Business Partner unique Id"""
  supplierBusinessPartnerId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Delivery Document Type"""
  deliveryDocumentType: String
  totalWeightUOM: UnitOfMeasureGlossary
  totalVolumeUOM: UnitOfMeasureGlossary
  soldToBusinessPartner: BusinessPartner
  shipToBusinessPartner: BusinessPartner
  supplierBusinessPartner: BusinessPartner
  door: Door
  orderConfirmationFile: WarehouseOpFile
  warehouse: Warehouse
  fulfillmentBlock: FulfillmentBlock
  deliveryItems: DeliveryItemNodes
  fulfillmentItems: FulfillmentItemNodes
  progress: Float
  progressString: DeliveryCompletionStatus
  availability: Int
  hasTasks: Boolean!
}

enum DeliveryCategory {
  return
  vendor
}

enum DeliveryCompletionStatus {
  notStarted
  inProgress
  complete
  cancelled
}

enum DeliveryType {
  delivery
  fulfillment
}

"""FulfillmentItem model"""
type FulfillmentItem {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Customer material"""
  customerProductCode: String

  """Date the material is available"""
  dateMaterialAvailable: DateTime

  """Description of entity"""
  description: String

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Reference document"""
  erpSalesOrder: String @deprecated(reason: "Update to reference sales order on the parent delivery entity")

  """Reference item"""
  erpSalesOrderItem: String

  """Delivery Document"""
  fulfillmentCode: String

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String!

  """Quantity of product"""
  fulfillmentQuantity: String!

  """Unit of measure for entity"""
  fulfillmentQuantityUom: String

  """Gross weight of entity"""
  grossWeight: Float

  """Level the license plate is in the heiarchy"""
  licensePlateLevel: String

  """Load status"""
  loadStatus: DeliveryCompletionStatus
  issueStatus: DeliveryCompletionStatus

  """Net weight of entity"""
  netWeight: Float

  """Pick status"""
  pickStatus: DeliveryCompletionStatus

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: ID

  """Weight UOM, i.e KG"""
  weightUOMId: ID

  """Delivery ID (foreign key)"""
  deliveryId: ID!

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity's product ID (foreign key)"""
  productId: ID

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Unit of measure ID"""
  unitOfMeasureId: ID!

  """Entity's SAP storage location"""
  storageLocation: String
  delivery: Delivery
  lot: Lot
  product: Product
  stockStatusType: StockStatusType
}

"""Warehouse op file row"""
type WarehouseOpFileRow {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """ID for a warehouse op file"""
  warehouseOpFileId: String!

  """Enum indicating if the row was processed successfully"""
  warehouseOpFileRowStatus: WarehouseOpFileRowStatus!

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Raw row data from the uploaded file"""
  rowData: JSONObject!

  """Which row in the processed file the row is connected with"""
  rowNumber: Int!

  """Error message from a failed row processing"""
  errors: JSONObject

  """Type of warehouse op file (OC or ASN)"""
  warehouseOpFileType: WarehouseOpCode

  """Warehouse op file row barcode"""
  barcode: String
}

enum WarehouseOpFileRowStatus {
  queued
  processed
  failed
  received
}

enum WarehouseOpCode {
  oc
  asn
  asnDelivery
  asnDeliveryItem
  soFulfillment
  soFulfillmentItem
  masterProduct
  masterUnitOfMeasure
  masterBusinessPartner
}

"""DeliveryItem model"""
type DeliveryItem {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Delivery ID (foreign key)"""
  deliveryId: ID!

  """Actual remaining quantity"""
  actualRecievedQuantity: String

  """Unit of measure"""
  uom: String

  """Unit of measure ID"""
  unitOfMeasureId: ID!

  """Entity's lot ID (foreign key)"""
  licensePlateId: ID

  """Entity's lot ID (foreign key)"""
  licensePlateLevel: ID

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Supplier lot"""
  supplierLot: String

  """ERP Created Date"""
  erpCreated: DateTime

  """Delivery Code"""
  deliveryCode: String!

  """Delivery Item Description"""
  description: String

  """Delivery Item"""
  deliveryItem: String!

  """Receipt Status"""
  receiptStatus: DeliveryCompletionStatus

  """Gross Weight"""
  grossWeight: Float

  """Net Weight"""
  netWeight: Float

  """Volume"""
  volume: Float

  """Volume unit of measure"""
  volumeUOMId: ID

  """Weight unit of measure"""
  weightUOMId: ID

  """Erp last changed date"""
  erpLastChanged: DateTime

  """Entity's product ID (foreign key)"""
  productId: ID

  """Purchase Order"""
  erpPurchaseOrder: String @deprecated(reason: "Update to reference parent delivery purchase order.")

  """Purchase Order item"""
  erpPurchaseOrderItem: String

  """Phone"""
  quantity: Int

  """Putaway Status"""
  putawayStatus: DeliveryCompletionStatus

  """Unload status"""
  unloadStatus: DeliveryCompletionStatus

  """Stock Status Type id"""
  stockStatusTypeId: String

  """ID for a warehouse op file"""
  advancedShipmentNotificationFileId: ID
  delivery: Delivery
  lot: Lot
  product: Product
  stockStatusType: StockStatusType
}

"""Warehouse op file"""
type WarehouseOpFile {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Business partner ID"""
  businessPartnerId: ID!

  """Which type operation that triggers flow, i.e. oc, asn"""
  warehouseOpCode: WarehouseOpCode!

  """Enum indicating file processing status, i.e. queued, processed"""
  warehouseOpFileStatus: WarehouseOpFileStatus!

  """Date the file finished processing"""
  processedDate: DateTime

  """Date file was uploaded"""
  uploadedDate: DateTime
}

enum WarehouseOpFileStatus {
  processing
  processed
  queued
  recieved
  failed
  partial_failure
}

type Invoice {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Entity code"""
  status: String!

  """Contract Id"""
  contractId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

type InvoiceItem {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String!

  """Invoice fee type"""
  feeType: String!

  """Cost of invoice item in USD"""
  value: Float!

  """Manual change status of invoice item"""
  manualChangeStatus: String

  """Invoice ID"""
  invoiceId: ID!
}

type ContractRuleCondition {
  """Data source(table or query) for the contract rule"""
  dataSource: String!

  """Field in the data source for the contract rule"""
  dataSourceField: String!

  """
  Operator applied to the field and value of a data source for a contract rule
  """
  operator: String!

  """
  Value of the data source field to apply the operator towards for a contract rule
  """
  dataSourceValue: String!
}

type ContractRule {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Fee type of the contract rule"""
  feeType: ContractRuleFeeType!

  """Frequency that the contract rule will be applied"""
  frequency: String!

  """Conditional data structure for a contract rule"""
  conditions: [ContractRuleCondition!]!

  """Cost of contract rule in USD"""
  value: Float!

  """Rate unit of measure for the contract rule value"""
  valueRateUom: String

  """Contract Id"""
  contractId: ID!
}

enum ContractRuleFeeType {
  handling
  accessorial
  fixed
  storage
}

type Contract {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Contract type template or contract"""
  type: ContractType!
}

enum ContractType {
  template
  contract
}

type EffectiveContractMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Contract Id"""
  contractId: ID!

  """Business partner ID"""
  businessPartnerId: ID!

  """Effective date of contract"""
  effectiveDate: DateTime!

  """Effective contract mapping status"""
  status: String!
}

"""Business Partner model"""
type BusinessPartner {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Description of entity"""
  code: String!

  """Description of entity"""
  name: String

  """"""
  type: String

  """Open text search term"""
  searchTerm1: String

  """Open text search term"""
  searchTerm2: String

  """SAP Customer Code"""
  customerCode: String

  """SAP Supplier code"""
  supplierCode: String

  """Validity start date"""
  validityStart: DateTime

  """Validity end date"""
  validityEnd: DateTime

  """Timezone"""
  addressTimezone: String

  """SAP address unique identifier"""
  addressUUID: String

  """Name of city"""
  cityName: String

  """Often used for county, prefecture, etc."""
  district: String

  """Region / State"""
  region: String

  """house number and street name"""
  streetAddress: String

  """Postal code"""
  postalCode: String

  """Country"""
  country: String

  """Language"""
  language: String

  """Phone number"""
  defaultPhoneNumber: String

  """Phone number"""
  phoneNumber: String

  """Email address"""
  email: String
}

"""Product model"""
type Product {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's company ID (foreign key)"""
  companyId: ID!

  """Entity code"""
  code: String!

  """Name of product"""
  name: String

  """Type of product"""
  type: String

  """Description of entity"""
  description: String

  """Whether the product is lot managed or not"""
  lotManaged: Boolean

  """Status of product"""
  status: ProductAvailability

  """Net weight of entity"""
  netWeight: Float

  """Entity's total weight in the unit of measure"""
  totalWeightUOMId: String

  """Gross weight of entity"""
  grossWeight: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Volume of entity"""
  volume: Float

  """When data was last updated in ERP"""
  erpUpdatedAt: DateTime

  """When data was created in ERP"""
  erpCreatedAt: DateTime

  """Product GTIN"""
  gtin: String

  """Business partner ID"""
  businessPartnerId: ID!
  active: Boolean
  company: Company
  lots: LotNodes
  unitOfMeasures: UnitOfMeasureProductConversionNodes
}

enum ProductAvailability {
  available
  blocked
}

"""Company model"""
type Company {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Organization id"""
  organizationId: ID

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String!

  """Entity's contact info ID (foreign key)"""
  contactInfoId: ID
  organization: Organization
  contactInfo: ContactInfo
  warehouses: WarehouseNodes
  products: ProductNodes
  displayPreference: DisplayPreference
  displayPreferenceId: ID
}

"""Unit Of Measure Glossary model"""
type UnitOfMeasureGlossary {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity code"""
  internalCode: String!

  """Entity's label"""
  label: String!

  """Entity code"""
  description: String
  category: StandardUOMCategory!
  isBaseUom: Boolean

  """Unit of measure system"""
  measurementSystem: StandardUOMSystem!

  """Entity's company ID (foreign key)"""
  companyId: ID
}

enum StandardUOMCategory {
  distance
  volume
  weight
  quantity
  velocity
  surfaceArea
}

type BinSize {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Weight capacity of storage"""
  weightCapacity: Float!

  """Depth(X) value of storage capacity"""
  depth: Float!

  """Width(Y) value of storage capacity"""
  width: Float!

  """Height(Z) value of storage capacity"""
  height: Float!

  """Restricts the size of products that can be placed in the bin"""
  productSizeRestriction: JSONObject

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Unit of measure glossary ID"""
  distanceUomId: ID!

  """Unit of measure glossary ID"""
  weightCapacityUomId: ID!

  """Created by user"""
  createdByUserId: String

  """Unit of measure glossary ID"""
  volumeCapacityUomId: ID

  """Product's volume"""
  volumeCapacity: Float

  """Product's length"""
  length: Float

  """Product's length"""
  productLengthLimit: Float

  """Product's Height"""
  productHeightLimit: Float

  """Product's width"""
  productWidthLimit: Float

  """Unit of measure glossary ID"""
  productLimitUomId: ID

  """Unit of measure glossary ID"""
  maximumProductUomId: ID
}

"""Planogram model"""
type Planogram {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity code"""
  x: Float!

  """Entity code"""
  radius: Float!

  """Description of entity"""
  description: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  planogramToBins: [PlanogramToBin!]
}

type PlanogramToBin {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  planogramId: ID!

  """Entity's warehouse (foreign key)"""
  binId: ID!

  """Entity's warehouse (foreign key)"""
  order: Int

  """Entity's warehouse (foreign key)"""
  x: Float
  bin: Bin
}

"""Edge model"""
type Edge {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  bidirectional: Boolean!
}

"""Vertex model"""
type Vertex {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  x: Float!
  y: Float!
  z: Float!
  type: VertexType!
}

enum VertexType {
  inbound
  outbound
  pick
  putaway
  path
}

"""Bin entity model"""
type Bin {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Bin type"""
  type: BinType

  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float

  """Level where the bin is located."""
  level: Int

  """Level where the bin is located."""
  rotation: Float

  """Timestamp of latest movement"""
  lastMovement: DateTime

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime

  """If Bin is blocked from product being putaway"""
  putawayBlock: Boolean

  """If Bin is blocked from product being removed"""
  removalBlock: Boolean

  """Verification code from a barcode scan"""
  verificationCode: String

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Aisle where the bin is located"""
  aisleId: ID

  """Column where the bin is located."""
  aisleColumnId: ID

  """Level where the bin is located."""
  pick_point: JSONObject

  """Level where the bin is located."""
  putaway_point: JSONObject

  """Size and capacity information for a bin"""
  binSizeId: ID!
  aisle: Aisle
  zones: [Zone!]
  vertices: [Vertex!]
  rearrangementRecommendations(runId: String!): [RearrangementRecommendation!]
  area: Area
  binSize: BinSize
  warehouse: Warehouse
  binInventory: [InventoryBase!]
}

enum BinType {
  default
  delivery
  fulfillment
  staging
  lostAndFound
  disposition
  planned
}

type Aisle {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's area ID (foreign key)"""
  areaId: ID!

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """"""
  rotation: Float

  """"""
  facing: String

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON
  bins: [Bin!]
}

type AisleColumn {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Aisle within the warehouse."""
  aisleId: ID!

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """"""
  rotation: Float

  """"""
  facing: String

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON
}

"""Equipment model"""
type EquipmentItem {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Status of equipment"""
  status: EquipmentStatus

  """Identifier for Redpoint Tracking Tag."""
  tagId: ID

  """Model of equipment"""
  equipmentModelId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

enum EquipmentStatus {
  active
  inactive
  planned
}

"""SlottingDataset entity model"""
type SlottingDataset {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Tag Identifier"""
  name: String!

  """Tag Identifier"""
  runCount: Int!

  """Name for SAP variant"""
  variantName: String!

  """Description for SAP variant"""
  variantDescription: String!

  """Slotting dataset process type"""
  processType: SlottingDatasetProcessType!

  """Current status when loading a slotting dataset from ERP system"""
  loadStatus: SlottingLoadStatus!

  """Current status when processing a slotting dataset"""
  analysisStatus: SlottingAnalysisStatus!

  """Date the slotting data was pulled from ERP system"""
  pullDate: DateTime!

  """Date range for data pulled from ERP system"""
  dateRangeStart: DateTime!

  """Date range for data pulled from ERP system"""
  dateRangeEnd: DateTime!

  """Lock setting for a slotting dataset"""
  locked: Boolean!

  """Entity's user ID (foreign key)"""
  createdByUserId: ID!

  """Person's full name"""
  createdByUserName: String!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  warehouse: Warehouse
}

enum SlottingDatasetProcessType {
  manual
}

enum SlottingLoadStatus {
  notStarted
  inProgress
  complete
  deleted
  failed
}

enum SlottingAnalysisStatus {
  notStarted
  inProgress
  complete
  cancelled
  failed
}

"""Warehouse model"""
type Warehouse {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Configuration Model for the Warehouse"""
  type: ModelWarehouseType

  """Entity's company ID (foreign key)"""
  companyId: ID!
  vertices: JSON
  indices: JSON
  points: JSON
  polygon: JSON

  """Entity ID"""
  contactInfoId: String

  """System connection ID"""
  systemConnectionId: String
  company: Company
  systemConnection: SystemConnection
  contactInfo: ContactInfo
  sapMappings: [SapWarehouseMapping!]
  displayPreference: DisplayPreference
  displayPreferenceId: ID
}

enum ModelWarehouseType {
  default
  aoe
  cs
  pto
  slotting
}

type SapBinFFArea {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's area ID (foreign key)"""
  areaId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: String!

  """Sap bin code"""
  sapBinCode: String!

  """Sap storage type code"""
  sapStorageTypeCode: String!

  """System connection ID"""
  systemConnectionId: ID!
}

type SapStorageLocationPlant {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """plant"""
  plant: String!

  """Storage Location"""
  storageLocation: String!
}

"""Area model"""
type Area {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Area's type, i.e. TEMP, PERM"""
  type: AreaType

  """Area's status, i.e. ACTIVE, INACTIVE"""
  status: AreaStatus

  """Area's type, i.e. TEMP, PERM"""
  storageType: AreaStorageType

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON

  """
  Entity's target temperature, null if entity is not temperature controlled
  """
  targetTemperature: Float

  """Entry point into the warehouse"""
  entryPoint: Boolean!

  """Exit point out of the warehouse"""
  exitPoint: Boolean!
  sapStorageLocationPlant: SapStorageLocationPlant
  warehouse: Warehouse
  doors: [Door!]
  aisles: [Aisle!]
  bins: [Bin!]
}

enum AreaType {
  perm
  temp
}

enum AreaStatus {
  active
  inactive
}

enum AreaStorageType {
  storage
  staging
  rework
  outboundStaging
}

type ViewArea {
  """Entity code"""
  code: String

  """Entity ID"""
  id: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Entity's SAP storage location ID (foreign key)"""
  storageLocationId: ID

  """Entity's SAP storage location"""
  storageLocation: String

  """Area's status, i.e. ACTIVE, INACTIVE"""
  status: AreaStatus

  """
  Entity's target temperature, null if entity is not temperature controlled
  """
  targetTemperature: Float

  """Is the area empty of stock"""
  isEmpty: Boolean

  """Entry point into the warehouse"""
  entryPoint: Boolean!

  """Exit point out of the warehouse"""
  exitPoint: Boolean!
}

type ViewBarcode {
  """Barcode entity ID"""
  barcodeId: ID

  """Entity code"""
  barcodeCode: String

  """Created at date"""
  barcodeCreatedAt: DateTime

  """Entity ID"""
  adminTaskId: ID

  """Task status, i.e Not Started"""
  adminTaskStatus: String

  """Person's first name"""
  userFirstName: String

  """Person's last name"""
  userLastName: String

  """Business partner name"""
  businessPartnerName: String

  """Business partner code"""
  businessPartnerCode: String

  """Entity ID"""
  businessPartnerId: ID
}

type ViewBinSize {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Weight capacity of storage"""
  weightCapacity: Float

  """Depth(X) value of storage capacity"""
  depth: Float

  """Width(Y) value of storage capacity"""
  width: Float

  """Height(Z) value of storage capacity"""
  height: Float

  """Restricts the size of products that can be placed in the bin"""
  productSizeRestriction: JSONObject

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Warehouse code"""
  warehouseCode: String

  """Unit of measure ID"""
  distanceUomId: ID

  """Unit of measure for entity"""
  distanceUomCode: String

  """Unit of measure ID"""
  weightCapacityUomId: ID

  """Unit of measure for entity"""
  weightCapacityUomCode: String

  """Created by user"""
  createdByUserFirstName: ID

  """Created by user"""
  createdByUserLastName: ID

  """The number of bins assigned to a bin size"""
  binCount: Float

  """Unit of measure ID"""
  volumeCapacityUomId: ID

  """Unit of measure for entity"""
  volumeUomCode: String

  """Volume of entity"""
  volumeCapacity: Float

  """Product's length"""
  length: Float

  """Product's length"""
  productLengthLimit: Float

  """Height(Z) value of storage capacity"""
  productHeightLimit: Float

  """Product's width"""
  productWidthLimit: Float

  """Unit of measure for entity"""
  productLimitUomCode: String

  """Unit of measure for entity"""
  maximumProductUomUomCode: String
}

type BinStatus {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's label"""
  label: String!

  """Entity code"""
  code: BinStatusCode!
}

enum BinStatusCode {
  BIN_STATUS_INACTIVE
  BIN_STATUS_SOURCE_BLOCK
  BIN_STATUS_DESTINATION_BLOCK
  BIN_STATUS_TEST_CODE
}

type ViewBin {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """Bin type"""
  type: BinType

  """Verification code from a barcode scan"""
  verificationCode: String

  """Level where the bin is located."""
  level: Float

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity code"""
  warehouseCode: String

  """Timestamp of latest movement"""
  lastMovement: DateTime

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime

  """Entity ID"""
  zoneId: String

  """Entity code"""
  zoneCode: String

  """Entity ID"""
  binSizeId: String

  """Entity code"""
  binSizeCode: String

  """Depth(X) value of storage capacity"""
  binSizeDepth: Float

  """Height(Z) value of storage capacity"""
  binSizeHeight: Float

  """Width(Y) value of storage capacity"""
  binSizeWidth: Float

  """Entity ID"""
  distanceUomId: ID

  """Entity code"""
  distanceUomCode: String

  """Weight capacity of storage"""
  binSizeWeightCapacity: Float

  """Entity ID"""
  weightCapacityUomId: ID

  """Entity code"""
  weightCapacityUomCode: String

  """Entity ID"""
  areaId: ID

  """Entity code"""
  areaCode: String

  """ApiDocs"""
  areaName: String

  """Area's type, i.e. TEMP, PERM"""
  areaStorageType: AreaStorageType

  """Entity ID"""
  aisleId: ID

  """Entity code"""
  aisleCode: String

  """Entity ID"""
  aisleColumnId: ID

  """Entity code"""
  aisleColumnCode: String

  """Source bin block flag"""
  sourceBinBlock: BinBlockState

  """Destination bin block flag"""
  destinationBinBlock: BinBlockState

  """Active/Inactive bin status flag"""
  inactive: BinActiveState
  containsProducts: Boolean
  empty: Boolean

  """hasOpenTasks"""
  hasOpenTasks: Boolean

  """Entity's task ID (foreign key)"""
  countTaskId: ID

  """Entity code"""
  countTaskCode: String

  """Bin has been assigned to a door"""
  isAssignedToDoor: Boolean
}

enum BinBlockState {
  blocked
  available
}

enum BinActiveState {
  active
  inactive
}

type ViewDeliveryItem {
  """Delivery item ID (foreign key)"""
  id: ID

  """Delivery ID (foreign key)"""
  deliveryId: ID!

  """Due date"""
  deliveryDueDate: DateTime

  """Delivery item associated with entity"""
  item: String

  """Entity code"""
  productCode: String

  """Product description"""
  productDescription: String

  """Entity code"""
  lotCode: String

  """Receipt Status"""
  receiptStatus: DeliveryCompletionStatus

  """Putaway Status"""
  putawayStatus: DeliveryCompletionStatus

  """Unload status"""
  unloadStatus: DeliveryCompletionStatus

  """Quantity of product"""
  quantity: String

  """Actual received quantity"""
  recievedQuantity: String

  """Supplier lot code"""
  supplierLotCode: String

  """Erp last changed date"""
  erpLastChanged: DateTime

  """Purchase Order"""
  erpPurchaseOrder: String

  """Purchase Order item"""
  erpPurchaseOrderItem: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Unit of measure"""
  unitOfMeasure: String

  """Volume"""
  volume: Float

  """Volume unit of measure"""
  volumeUOMId: ID

  """Volume unit of measure"""
  volumeUOMCode: String

  """Volume unit of measure"""
  volumeUOMLabel: String

  """Gross Weight"""
  grossWeight: Float

  """Weight unit of measure"""
  weightUOMId: ID

  """Weight unit of measure"""
  weightUOMCode: String

  """Weight unit of measure"""
  weightUOMLabel: String

  """Net Weight"""
  netWeight: Float

  """Delivery or fulfillment erp code"""
  deliveryCode: String

  """Product id"""
  productId: ID

  """Lot id"""
  lotId: ID

  """Stock status type entity belongs to"""
  stockStatusLabel: String

  """Entity code"""
  stockStatusCode: String

  """Entity code"""
  stockStatusId: String

  """Entity ID"""
  licensePlateId: ID

  """Entity code"""
  licensePlateCode: String

  """Description of entity"""
  licensePlateDescription: String

  """ID for a warehouse op file"""
  advancedShipmentNotificationFileId: ID

  """Entity code"""
  advancedShipmentNotificationFileCode: String

  """Update at date"""
  updatedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

type ViewDelivery {
  """Entity ID"""
  id: ID!

  """fulfillment or delivery"""
  type: DeliveryType

  """Delivery category"""
  category: DeliveryCategory

  """Delivery Document Type"""
  deliveryDocumentType: String

  """Delivery or fulfillment erp code"""
  erpCode: String

  """Entity code"""
  warehouseCode: String

  """Bill of lading"""
  billOfLading: String

  """Due date"""
  dueDate: DateTime

  """Delivery promise date"""
  promiseDate: DateTime

  """Date when all line items are availalbe 100%"""
  shipReadyDate: DateTime

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """When data was created in ERP"""
  erpCreated: DateTime

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Gross weight of entity"""
  totalGrossWeight: Float

  """Unit of measure for entity"""
  totalWeightUOMId: ID

  """Unit of measure for entity"""
  totalWeightUOMCode: String

  """Unit of measure for entity"""
  totalWeightUOMLabel: String

  """Point of contact"""
  pointOfContact: String

  """Net weight of entity"""
  totalNetWeight: Float

  """Volume of entity"""
  totalVolume: Float

  """Volume in unit of measure for entity"""
  totalVolumeUOMId: ID

  """Volume in unit of measure for entity"""
  totalVolumeUOMCode: String

  """Volume in unit of measure for entity"""
  totalVolumeUOMLabel: String

  """Delivery or fulfillment supplier"""
  supplierId: ID

  """Delivery or fulfillment supplier"""
  supplierBusinessPartnerCode: String

  """Delivery or fulfillment supplier"""
  supplierBusinessPartnerName: String

  """Delivery or fulfillment supplier"""
  supplierCode: String

  """Delivery or fulfillment supplier Name"""
  supplierName: String

  """Delivery or fulfillment ship to code"""
  shipToId: ID

  """Delivery or fulfillment ship to code"""
  shipToBusinessPartnerCode: String

  """Delivery or fulfillment ship to code"""
  shipToBusinessPartnerName: String

  """Delivery or fulfillment ship to code"""
  shipToCode: String

  """
  Delivery or Fulfillment sold to Business Partner Entity ID (foreign key)
  """
  soldToId: ID

  """Delivery or fulfillment sold to code"""
  soldToBusinessPartnerCode: String

  """Delivery or fulfillment sold to code"""
  soldToBusinessPartnerName: String

  """Delivery or fulfillment sold to code"""
  soldToCode: String

  """Erp sales order"""
  erpSalesOrder: String

  """Export"""
  export: String

  """Goods receipt or goods issue status"""
  goodsReceiptOrIssueStatus: DeliveryCompletionStatus

  """Picking or putaway status"""
  pickOrPutawayStatus: DeliveryCompletionStatus

  """Delivery load or unload status"""
  loadOrUnloadStatus: DeliveryCompletionStatus

  """Overall status for the delivery or fulfillment"""
  deliveryStatus: DeliveryCompletionStatus

  """ERP delivery block"""
  blockStatus: String

  """Reason blocked in ERP"""
  erpBlockingReason: String

  """Entity ID"""
  warehouseId: ID

  """Entity ID"""
  doorId: ID

  """Entity code"""
  doorCode: String

  """Entity ID"""
  fulfillmentBlockId: ID

  """Entity's label"""
  fulfillmentBlockLabel: String

  """Ship to party name"""
  shipToName: String

  """Sold to party name"""
  soldToName: String

  """Delivery Item count"""
  itemCount: Int

  """Progress of delivery"""
  progress: Int!

  """Progress string"""
  progressString: DeliveryCompletionStatus!

  """ID for a warehouse op file"""
  orderConfirmationFileId: ID

  """Erp purchase order"""
  erpPurchaseOrder: String

  """A deliveries overall availability"""
  availability: Int
}

type ViewDoor {
  """Entity code"""
  code: String

  """Entity ID"""
  id: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity code"""
  areaCode: String

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Door direction.  inbound outbound or both."""
  direction: doorDirection

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Entity code"""
  binCode: String
}

type ViewEquipmentModel {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Type of equipment, i.e. forklift"""
  equipmentTypeId: ID

  """Entity's label"""
  typeLabel: String
}

type EquipmentTypeQueryShape {
  """Entity ID"""
  id: ID!

  """Entity code"""
  code: String!

  """Type of equipment, i.e. forklift"""
  label: String!

  """Description of entity"""
  description: String

  """Velocity unit of measure"""
  velocityUOMId: ID

  """Velocity unit of measure"""
  velocityUOMCode: String

  """Velocity unit of measure"""
  velocityUOMLabel: String

  """Velocity"""
  velocity: Float

  """Velocity of raising and lowering a piece of equipment"""
  verticalVelocity: Float

  """Weight UOM, i.e KG"""
  weightUOMId: ID

  """Weight UOM, i.e KG"""
  weightUOMCode: String

  """Weight UOM, i.e KG"""
  weightUOMLabel: String

  """Number representing maximum weight limit for an equipment model."""
  weightMax: Float

  """Currency"""
  currency: String

  """Cost"""
  cost: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: ID

  """Volume in unit of measure for entity"""
  volumeUOMCode: String

  """Volume in unit of measure for entity"""
  volumeUOMLabel: String

  """Max Volume of entity"""
  volumeMax: Float

  """Type of location data for an equipment model (Dynamic/Static)"""
  mobility: EquipmentMobility!

  """Number representing maximum height allowance of equipment model."""
  heightMax: Float

  """Number representing minimum height allowance of equipment model."""
  heightMin: Float

  """Imperial or metric unit of measure for height limit."""
  heightUOMId: ID

  """Imperial or metric unit of measure for height limit."""
  heightUOMCode: String

  """Imperial or metric unit of measure for height limit."""
  heightUOMLabel: String
}

type ViewEquipment {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Status of equipment"""
  status: EquipmentStatus

  """Identifier for Redpoint Tracking Tag."""
  tagId: String

  """Model of equipment"""
  equipmentModelId: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity code"""
  modelCode: String

  """Entity's warehouse (foreign key)"""
  modelLabel: String

  """Description of entity"""
  modelDescription: String

  """Number representing maximum height allowance of equipment model."""
  typeHeightMax: Float

  """Number representing minimum height allowance of equipment model."""
  typeHeightMin: Float

  """Imperial or metric unit of measure for height limit."""
  typeHeightUOMId: ID

  """Imperial or metric unit of measure for height limit."""
  typeHeightUOMCode: String

  """Imperial or metric unit of measure for height limit."""
  typeHeightUOMLabel: ID

  """Number representing maximum weight limit for an equipment model."""
  typeWeightMax: Float

  """Weight UOM, i.e KG"""
  typeWeightUOMId: ID

  """Weight UOM, i.e KG"""
  typeWeightUOMCode: String

  """Weight UOM, i.e KG"""
  typeWeightUOMLabel: String

  """Max Volume of entity"""
  typeVolumeMax: Float

  """Volume in unit of measure for entity"""
  typeVolumeUOMId: ID

  """Volume in unit of measure for entity"""
  typeVolumeUOMCode: String

  """Volume in unit of measure for entity"""
  typeVolumeUOMLabel: String

  """Velocity"""
  typeVelocity: Float

  """Velocity"""
  typeVerticalVelocity: Float

  """Velocity unit of measure"""
  typeVelocityUOMId: String

  """Velocity unit of measure"""
  typeVelocityUOMCode: String

  """Velocity unit of measure"""
  typeVelocityUOMLabel: String

  """Type of location data for an equipment model (Dynamic/Static)"""
  typeMobility: EquipmentMobility

  """Type of equipment, i.e. forklift"""
  equipmentTypeId: ID

  """Entity code"""
  typeCode: String

  """Entity's label"""
  typeLabel: String

  """Description of entity"""
  typeDescription: String
}

type ViewFulfillmentItem {
  """Fulfillment item id (foreign key)"""
  id: ID

  """Fulfillment item associated with the entity"""
  item: String

  """Delivery associated with the entity"""
  fulfillmentCode: String

  """Due date"""
  fulfillmentDueDate: DateTime

  """Entity code"""
  productCode: String

  """Product description"""
  productDescription: String

  """Entity code"""
  lotCode: String

  """Availability date"""
  dateAvailable: DateTime

  """Quantity of product"""
  quantity: String

  """Pick status"""
  pickStatus: DeliveryCompletionStatus

  """Load status"""
  loadStatus: DeliveryCompletionStatus

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Reference document"""
  salesOrderCode: String

  """Reference item"""
  salesOrderItem: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Entity's SAP storage location"""
  storageLocation: String

  """Unit of measure"""
  unitOfMeasure: String

  """Volume"""
  volume: Float

  """Volume unit of measure"""
  volumeUOMId: ID

  """Volume unit of measure"""
  volumeUOMCode: String

  """Volume unit of measure"""
  volumeUOMLabel: String

  """Gross Weight"""
  grossWeight: Float

  """Weight unit of measure"""
  weightUOMId: ID

  """Weight unit of measure"""
  weightUOMCode: String

  """Weight unit of measure"""
  weightUOMLabel: String

  """Net Weight"""
  netWeight: Float

  """Stock status type entity belongs to"""
  stockStatus: String

  """Entity code"""
  stockStatusCode: String

  """Entity code"""
  stockStatusId: String

  """Deliery id"""
  deliveryId: ID

  """Product id"""
  productId: ID

  """Lot id"""
  lotId: ID

  """Entity ID"""
  licensePlateId: ID

  """Entity code"""
  licensePlateCode: String

  """Description of entity"""
  licensePlateDescription: String

  """Update at date"""
  updatedAt: DateTime

  """A delivery or fulfillment items availability"""
  availability: Int

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

type ViewHistoryFieldDiff {
  """Entity ID"""
  id: ID

  """The history field diff ID"""
  historyId: ID

  """Entity ID"""
  entityId: ID

  """New value of the history field diff"""
  new: String

  """Old value of the history field diff"""
  old: String

  """Entity version"""
  newVersion: Int

  """Entity version"""
  oldVersion: Int

  """Name of the column changing values"""
  field: String

  """Diff field type"""
  fieldType: String

  """Entity's human readable name"""
  entity: String

  """Person's first name"""
  name: String

  """Entity's user ID (foreign key)"""
  userId: String

  """Entity code"""
  code: String

  """Update at date"""
  date: DateTime

  """Which change occured, i.e. UPDATE, CREATE"""
  changeType: EntityChangeType
}

enum EntityChangeType {
  create
  insert
  update
  delete
}

type LicensePlateStatus {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's label"""
  label: String!

  """Entity code"""
  code: LicensePlateStatusCode!
}

enum LicensePlateStatusCode {
  LP_STATUS_INACTIVE
}

type InventoryBaseQueryShape {
  """Entity ID"""
  id: ID

  """Product ID"""
  productId: ID

  """Entity code"""
  productCode: String

  """Description of entity"""
  productDescription: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Unit of measure for entity"""
  unitOfMeasure: String

  """Quantity of product"""
  quantity: String!

  """Open task quantity"""
  openTaskQuantity: String

  """Available quantity"""
  availableQuantity: String

  """Number of open tasks"""
  openTaskCount: Int

  """I.e. Returns, Available, Lot Restricted etc."""
  stockStatus: String

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity code"""
  binCode: String

  """Bin type"""
  binType: String

  """Entity code"""
  areaCode: String

  """Area's type, i.e. TEMP, PERM"""
  areaStorageType: AreaStorageType

  """Entity ID"""
  aisleId: String

  """Entity code"""
  aisleCode: String

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Weight UOM, i.e KG"""
  weightUOM: String

  """Gross volume of entity"""
  grossVolume: Float

  """Volume in unit of measure for entity"""
  volumeUOM: String

  """Length of license plate"""
  length: Float

  """Width of license plate"""
  width: Float

  """Height of license plate"""
  height: Float

  """Unit of measure for dimensions of a license plate"""
  dimensionUOM: String

  """License Plate Parent ID"""
  parentId: String

  """Entity's SAP storage location"""
  licensePlateStorageLocation: String

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Active/Inactive license plate status flag"""
  licensePlateStatus: LicensePlateStatusState

  """Entity code"""
  licensePlateCode: String

  """Description of entity"""
  licensePlateDescription: String

  """
  Status determining if the license plate and its contents are successfully synced with the ERP ledger.
  """
  licensePlateLedgerSyncStatus: LedgerSyncStatus

  """Status of the quantity of a product within license plate"""
  licensePlatePartial: LicensePlatePartial

  """Entity code"""
  warehouseCode: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity code"""
  lotCode: String

  """Lot expiration date"""
  lotExpiration: DateTime

  """Lot Restricted"""
  lotRestricted: Boolean

  """Whether the product is lot managed or not"""
  lotManaged: Boolean

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Entity code"""
  deliveryCode: String

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Fulfillment item associated with the entity"""
  fulfillmentItemItem: String

  """Delivery item associated with entity"""
  deliveryItemItem: String

  """Fulfillment Id"""
  stockFulfillmentId: ID

  """Entity code"""
  stockFulfillmentCode: String

  """Delivery ID (foreign key)"""
  stockDeliveryId: ID

  """Entity code"""
  stockDeliveryCode: String

  """Delivery or fulfillment erp code"""
  erpSalesOrder: String

  """Entity ID"""
  soldToBusinessPartnerId: ID

  """Business partner name"""
  soldToBusinessPartnerName: String

  """Business partner code"""
  soldToBusinessPartnerCode: String

  """Entity code"""
  businessPartnerCode: String

  """Entity code"""
  businessPartnerName: String
}

enum LicensePlateStatusState {
  inactive
  active
}

type InternalStockOrderAssignedInventory {
  """Product ID"""
  productId: ID

  """Entity code"""
  productCode: String

  """Description of entity"""
  productDescription: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Unit of measure for entity"""
  unitOfMeasure: String

  """Quantity of product"""
  quantity: String!

  """Open task quantity"""
  openTaskQuantity: String

  """Available quantity"""
  availableQuantity: String

  """Number of open tasks"""
  openTaskCount: Int

  """I.e. Returns, Available, Lot Restricted etc."""
  stockStatus: String

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity code"""
  binCode: String

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Entity code"""
  licensePlateCode: String

  """Description of entity"""
  licensePlateDescription: String

  """Entity code"""
  warehouseCode: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity code"""
  lotCode: String

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Fulfillment item associated with the entity"""
  fulfillmentItemItem: String

  """Entity ID"""
  internalStockOrderItemId: ID

  """Has an active or completed pick task"""
  activeOrCompletedPickTask: Boolean
}

type InventoryLotQueryShape {
  """Product ID"""
  productId: ID

  """Entity code"""
  productCode: String

  """Description of entity"""
  description: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity code"""
  lotCode: String

  """Lot expiration date"""
  expirationDate: DateTime

  """Lot production date"""
  productionDate: DateTime

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Unit of measure for entity"""
  unitOfMeasure: String

  """Gross weight of entity"""
  grossWeight: Float

  """Weight UOM, i.e KG"""
  totalWeightUOM: String

  """Open task quantity"""
  openTaskQuantity: String

  """Available quantity"""
  availableQuantity: String

  """Number of open tasks"""
  openTaskCount: Int

  """Quantity of product"""
  quantity: String

  """I.e. Returns, Available, Lot Restricted etc."""
  stockStatus: String

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity code"""
  businessPartnerCode: String

  """Entity code"""
  businessPartnerName: String
}

type InventoryProductQueryShape {
  """Product ID"""
  productId: ID

  """Entity code"""
  productCode: String

  """Entity code"""
  businessPartnerCode: String

  """Entity code"""
  businessPartnerName: String

  """Description of entity"""
  description: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Unit of measure for entity"""
  unitOfMeasure: String

  """Gross weight of entity"""
  grossWeight: Float

  """Weight UOM, i.e KG"""
  totalWeightUOM: String

  """Open task quantity"""
  openTaskQuantity: String

  """Available quantity"""
  availableQuantity: String

  """Number of open tasks"""
  openTaskCount: Int

  """Quantity of product"""
  quantity: String

  """I.e. Returns, Available, Lot Restricted etc."""
  stockStatus: String

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

type ViewLostAndFound {
  """Product ID"""
  productId: ID

  """Entity code"""
  productCode: String

  """Description of entity"""
  productDescription: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Unit of measure for entity"""
  unitOfMeasureCode: String

  """Quantity of product"""
  quantity: String!

  """I.e. Returns, Available, Lot Restricted etc."""
  stockStatusLabel: String

  """Entity's stock status type ID (foreign key)"""
  stockStatusId: ID

  """Entity code"""
  binCode: String

  """Entity code"""
  areaCode: String

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Bin type"""
  binType: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Description of entity"""
  licensePlateDescription: String

  """Active/Inactive bin status flag"""
  licensePlateStatus: LicensePlateStatusState

  """Entity code"""
  licensePlateCode: String

  """Entity code"""
  warehouseCode: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity code"""
  lotCode: String

  """Whether the product is lot managed or not"""
  lotManaged: Boolean

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String

  """Delivery item associated with entity"""
  deliveryItem: String

  """Fulfillment Id"""
  stockFulfillmentId: ID

  """Entity code"""
  stockFulfillmentCode: String

  """Delivery ID (foreign key)"""
  stockDeliveryId: ID

  """Entity code"""
  stockDeliveryCode: String
}

type LicensePlateDetail {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Description of entity"""
  description: String

  """Length of license plate"""
  length: Float

  """Width of license plate"""
  width: Float

  """Height of license plate"""
  height: Float

  """Unit of measure for dimensions of a license plate"""
  dimensionUOMId: String

  """Status of license plate"""
  processStatus: String

  """Aisle where the bin is located"""
  aisleId: ID

  """Aisle where the bin is located"""
  aisleCode: String

  """Aisle where the bin is located"""
  aisle: String @deprecated(reason: "Deprecated field name use aisleCode instead.")

  """Column where the bin is located."""
  aisleColumnId: ID

  """Column where the bin is located."""
  aisleColumnCode: String

  """Column where the bin is located."""
  column: String @deprecated(reason: "Deprecated field name use aisleColumnCode instead.")

  """Level where the bin is located."""
  level: Int

  """X coordinate location for the license plate"""
  x: Float

  """Y coordinate location for the license plate"""
  y: Float

  """Material that the license plate is made of"""
  licensePlateMaterial: String

  """Material type that the license plate is made of"""
  licensePlateMaterialType: String

  """License Plate Parent ID"""
  parentId: ID

  """Entity code"""
  binCode: String

  """Gross weight of entity"""
  totalWeight: Float

  """Gross volume of entity"""
  totalVolume: Float

  """Entity code"""
  areaCode: String

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Bin type"""
  binType: String

  """Entity's SAP storage location"""
  storageLocation: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's warehouse name"""
  warehouseName: String

  """Indicator of open tasks"""
  hasOpenTasks: Boolean

  """Active/Inactive bin status flag"""
  inactive: LicensePlateStatusState

  """Entity ID"""
  dispositionId: ID

  """Number of open tasks"""
  openTaskCount: Int

  """Entity ID"""
  deliveryItemId: ID

  """Entity ID"""
  fulfillmentItemId: ID

  """Entity ID"""
  deliveryId: ID

  """Entity ID"""
  fulfillmentId: ID

  """Entity ID"""
  erpSalesOrder: String

  """Business partner name"""
  soldToBusinessPartnerId: ID

  """Business partner name"""
  soldToBusinessPartnerName: String

  """Business partner code"""
  soldToBusinessPartnerCode: String

  """Array of license plate ids that are nested inside of the license plate"""
  lpHierarchy: JSON
}

type LicensePlateDetailQueryModel {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """Reference code in ERP"""
  erpCode: String

  """Created at date"""
  createdAt: DateTime

  """Update at date"""
  updatedAt: DateTime

  """Deleted at date"""
  deletedAt: DateTime

  """Description of entity"""
  description: String

  """Status of license plate"""
  processStatus: String

  """Material that the license plate is made of"""
  licensePlateMaterial: String

  """Material type that the license plate is made of"""
  licensePlateMaterialType: String

  """X coordinate location for the license plate"""
  x: Float

  """Y coordinate location for the license plate"""
  y: Float

  """Disposition ID"""
  dispositionId: ID

  """License Plate Parent ID"""
  parentId: ID

  """Length(X) value of storage capacity"""
  length: Float

  """Width(Y) value of storage capacity"""
  width: Float

  """Height(Z) value of storage capacity"""
  height: Float

  """Height(Z) value of storage capacity"""
  volume: Float

  """Entity ID"""
  dimensionUOMId: ID

  """Unit of measure for dimensions of a license plate"""
  dimensionUOMCode: String

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Entity ID"""
  weightUOMId: ID

  """Unit of measure for weight capacity of storage"""
  weightUOMCode: String

  """Entity ID"""
  binId: ID

  """Entity code"""
  binCode: String

  """Bin type"""
  binType: BinType

  """Level where the bin is located."""
  binLevel: Int

  """Entity's SAP storage location"""
  storageLocation: String

  """Entity ID"""
  warehouseId: ID

  """ApiDocs"""
  warehouseName: String

  """Entity code"""
  warehouseCode: String

  """Active/Inactive license plate status flag"""
  licensePlateStatus: LicensePlateStatusState

  """Number of open tasks"""
  openTaskCount: Float

  """Number of open tasks"""
  hasOpenTasks: Boolean

  """
  Status determining if the license plate and its contents are successfully synced with the ERP ledger.
  """
  ledgerSyncStatus: LedgerSyncStatus

  """Reason ledger sync status is not successful."""
  ledgerSyncStatusReason: String

  """Status of the quantity of a product within license plate"""
  partial: LicensePlatePartial

  """Unit of measure ID"""
  licensePlateContentsUoMId: ID

  """Entity code"""
  licensePlateContentsUoMCode: String

  """
  Timestamp representing the moment in time a license plate entered a non-refridgerated space
  """
  freshnessClock: DateTime

  """Entity code"""
  areaCode: String

  """Erp sales order"""
  erpSalesOrder: String

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime
}

type ViewLot {
  """Lot ID"""
  id: ID!

  """Entity code"""
  code: String!

  """When data was created in ERP"""
  erpCreatedOn: DateTime

  """When data was last updated in ERP"""
  erpUpdatedOn: DateTime

  """Update at date"""
  updatedAt: DateTime

  """Lot production date"""
  productionDate: DateTime

  """Lot expiration date"""
  expiration: DateTime

  """Lot supplier number"""
  supplierLotNumber: String

  """Entity's product ID (foreign key)"""
  productId: ID

  """Product entity belongs to"""
  productCode: String

  """Lot Restricted"""
  restricted: Boolean
}

type ViewMapAisle {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity code"""
  areaCode: String

  """Area's name"""
  areaName: String

  """Description of entity"""
  description: String

  """Entity's SAP storage location ID (foreign key)"""
  storageLocationId: ID

  """Entity's SAP storage location"""
  storageLocation: String

  """Area's status, i.e. ACTIVE, INACTIVE"""
  status: AreaStatus

  """Volume capacity of storage"""
  dimensionCapacity: Int

  """Weight capacity of storage"""
  weightCapacity: Int

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

type ViewMapBin {
  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity code"""
  areaCode: String

  """Area's name"""
  areaName: String

  """Description of entity"""
  description: String

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Entity code"""
  binCode: String

  """Aisle within the warehouse."""
  aisleId: ID

  """Aisle within the warehouse."""
  aisleCode: String

  """Column where the bin is located."""
  aisleColumnId: ID

  """Entity code"""
  aisleColumnCode: String

  """Entity's SAP storage location ID (foreign key)"""
  storageLocationId: ID

  """Entity's SAP storage location"""
  storageLocation: String

  """Area's status, i.e. ACTIVE, INACTIVE"""
  status: AreaStatus

  """Weight capacity of storage"""
  productVolume: Float

  """Weight capacity of storage"""
  maxVolumeCapacity: Float

  """Volume capacity of storage"""
  dimensionCapacity: Float

  """Weight capacity of storage"""
  productWeight: Float

  """Weight capacity of storage"""
  maxWeightCapacity: Float

  """Weight capacity of storage"""
  weightCapacity: Float

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Level where the bin is located."""
  level: String

  """Source bin block flag"""
  sourceBinBlock: BinBlockState

  """Destination bin block flag"""
  destinationBinBlock: BinBlockState

  """Timestamp of latest movement"""
  lastMovement: DateTime

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime
}

type ProductQueryShape {
  """Entity's company ID (foreign key)"""
  companyId: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Entity ID"""
  id: ID!

  """Entity code"""
  code: String!

  """Entity code"""
  baseUOMId: ID

  """Entity code"""
  baseUOMCode: String

  """Name of product"""
  name: String

  """Type of product"""
  type: String

  """Description of entity"""
  description: String

  """Whether the product is lot managed or not"""
  lotManaged: Boolean

  """Status of product"""
  status: ProductAvailability

  """Net weight of entity"""
  netWeight: Float

  """Entity's total weight in the unit of measure"""
  totalWeightUOMId: String

  """Volume in unit of measure for entity"""
  totalWeightUOMCode: String

  """Volume in unit of measure for entity"""
  totalWeightUOMLabel: String

  """Gross weight of entity"""
  grossWeight: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Volume in unit of measure for entity"""
  volumeUOMCode: String

  """Volume in unit of measure for entity"""
  volumeUOMLabel: String

  """Volume of entity"""
  volume: Float

  """When data was last updated in ERP"""
  erpUpdatedAt: DateTime

  """When data was created in ERP"""
  erpCreatedAt: DateTime

  """Product GTIN"""
  gtin: String
}

type SlottingInventory {
  """"""
  binCode: String

  """"""
  rank: String

  """"""
  zone: String

  """"""
  productNumber: String

  """"""
  productName: String

  """"""
  productGroup: String

  """"""
  eaQtyPerCase: String

  """"""
  quantity: String

  """"""
  uom: String
}

type ViewSlottingRuleset {
  """Entity ID"""
  id: ID

  """ApiDocs"""
  name: String

  """Created by user"""
  createdBy: String

  """Created by user"""
  createdByUserId: String

  """Person's last name"""
  runCount: Float

  """Timestamp of latest movement"""
  lastUpdated: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Skip ABC Anlysis"""
  skipAbc: Boolean

  """ruleset status, i.e. COMPLETE, DRAFT"""
  rulesetStatus: RulesetStatus!
}

type DatasetMaterials {
  """Entity ID"""
  ff_dataset_id: ID
  storage_bin: String
  material: String
  material_description: String
  available_stock: String
  total_stock: String
  base_unit_of_measure: String
  batch_number: String
}

type PlanogramBinMaterials {
  source_zone_code: String
  destination_zone_code: String

  """Entity ID"""
  run_id: ID
  source_bin: String!
  destination_bin: String!
  material: String!
  line_items: String!
  distance: Float
}

type RearrangementRecommendation {
  id: ID!
  run_id: String!
  run_name: String
  warehouse_id: String!
  source_zone_id: String!
  destination_zone_id: String!
  source_zone_code: String
  destination_zone_code: String
  source_column: String!
  destination_column: String!
  source_bin: String!
  destination_bin: String!
  material: String!
  material_description: String!
  quantity: Float
  movement_reason: String
  task_type: String
  distance_saved: Float!
  distance_uom: String!
  time_saved: Float!
  time_uom: String!
  cost_saved: Float!
  cost_uom: String!
  process_dt: DateTime
  deployed_at: DateTime
  deployed: Boolean!
  swap_id: String
  swap_source: String
  trend_all_line_items: Float
  trend_all_quantity: Float
  trend_7_day_line_items: Float
  trend_7_day_quantity: Float
  trend_uom: String
  fitness_score: Float
  pick_efficiency_score: Float
  pick_density_score: Float
  putaway_efficiency_score: Float
  putaway_density_score: Float
  ground_level_score: Float
  avoid_congestion_score: Float
  lighter_to_staging_score: Float
  current_max_quantity: Float
  current_min_quantity: Float
  proposed_max_quantity: Float
  proposed_min_quantity: Float
  ruleset_id: String
  ruleset_name: String
  dataset_id: String
  dataset_start_date: DateTime
  dataset_end_date: DateTime
}

type SlottingAbcAnalysis {
  """Entity ID"""
  id: ID

  """Slotting run ID"""
  run_id: ID

  """Slotting Plant (ERP)"""
  plant: String

  """Material"""
  material: String!

  """Material Description"""
  material_description: String

  """Proposed ABC indicator"""
  proposed_abc_indicator: String!

  """Current ABC indicator"""
  current_abc_indicator: String!

  """Deployed state"""
  deployed: Boolean!

  """Date processed"""
  process_dt: DateTime!

  """Date processed"""
  dataset_start_date: DateTime!

  """Date processed"""
  dataset_end_date: DateTime!
  dataset_id: String
  ruleset_id: String
  ruleset_name: String
  run_name: String
  deployed_at: DateTime
}

type SlottingRun {
  """Entity ID"""
  id: ID

  """"""
  name: String!
  warehouse_id: ID!
  ruleset_id: ID!
  ruleset_name: String!
  dataset_id: ID!
  dataset_name: String!
  created_by_user_id: ID!
  created_by_user_name: String!
  deployed_by_user_id: ID
  deployed_by_user_name: String

  """Date slotting run was deployed"""
  deployed_at: DateTime
  duration: Float
  run_duration: Float

  """Date slotting run was deployed"""
  created_at: DateTime

  """Date slotting run was deployed"""
  updated_dt: DateTime

  """Date slotting run was deployed"""
  deployment_ended_at: DateTime
  variant: String!
  status: RunStatus!
  status_description: String!
  overall: Float
  efficiency: Float
  distance_saved: Float
  cost_saved: Float
  density: Float

  """slotting run"""
  input: JSONObject!

  """Start date of the dataset"""
  dataset_start: DateTime

  """End date of the dataset"""
  dataset_end: DateTime
}

enum RunStatus {
  inProgress
  complete
  failed
  deployed
}

type ViewStockStatus {
  """Entity code"""
  code: String

  """Entity ID"""
  id: ID

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Entity code"""
  sapStockStatusCode: String

  """Determines if stock status type is in use"""
  stockStatusTypeStatus: StockStatusTypeStatus

  """Entity's SAP stock status type ID (foreign key)"""
  sapStockStatusId: ID

  """I.e. Returns, Available, Lot Restricted etc."""
  sapStockStatusLabel: String

  """Entity ID"""
  sapHuUserStatusId: ID

  """Entity code"""
  sapHuUserStatusCode: String

  """Entity ID"""
  warehouseId: ID

  """Entity code"""
  warehouseCode: String

  """Entity ID"""
  systemConnectionId: ID

  """
  Stock status used when converting ERP stock status to Fulfilld stock status
  """
  default: Boolean

  """Entity ID"""
  stockStatusMappingId: String
}

type ViewTaskGroup {
  """Entity ID"""
  assignedTeamId: ID

  """Entity's team name"""
  assignedTeamName: String

  """Person's first name"""
  assignedUserFirstName: String

  """Person's last name"""
  assignedUserLastName: String

  """Entity ID"""
  assignedUserId: ID

  """Entity code"""
  code: String

  """Date and time a task is completed"""
  completedAt: DateTime

  """Person's first name"""
  completedUserserFirstName: String

  """Person's last name"""
  completedUserLastName: String

  """Entity ID"""
  completedUserId: ID

  """Date and time a task is completed"""
  plannedCompletionAt: DateTime

  """Date and time a task is completed"""
  plannedStartAt: DateTime

  """Date and time a task is completed"""
  startedAt: DateTime

  """Entity ID"""
  taskGroupId: ID

  """Entity ID"""
  warehouseId: ID

  """ApiDocs"""
  warehouseName: String

  """Entity ID"""
  workingTeamId: ID

  """Entity's team name"""
  workingTeamName: String
  progress: Int!
  areaCodes: [SourceDestinationArea!]
}

type BinStatusMappingJson {
  binStatusId: ID
  binStatusCode: String
  binStatusLabel: String
  mapped: Boolean
  editable: Boolean
}

type ViewTaskTypeBinStatusMapping {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Task type ID (foreign key)"""
  taskTypeId: ID

  """Task type label"""
  taskTypeLabel: String

  """Task type code"""
  taskTypeCode: String

  """Bin status mappings for the task type"""
  binStatusMappings: [BinStatusMappingJson!]
}

type ViewTaskTypeStockStatusMappingMappings {
  stockStatusId: ID
  stockStatusCode: String
  stockStatusLabel: String
  mapped: Boolean
  editable: Boolean
}

type ViewTaskTypeStockStatusMapping {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Task type ID (foreign key)"""
  taskTypeId: ID

  """Task type code"""
  taskTypeCode: String

  """Task type label"""
  taskTypeLabel: String

  """Stock status mappings for the task type"""
  stockStatusMappings: [ViewTaskTypeStockStatusMappingMappings!]
}

type ApproveBinCountTaskQueryModel {
  """Entity ID"""
  taskId: ID!

  """Entity code"""
  taskCode: String!

  """Task status, i.e Not Started"""
  taskStatus: TaskStatus!

  """Entity ID"""
  refCountTaskId: ID!

  """Entity code"""
  refCountTaskCode: String!

  """Indicates whether the count should be guided or blind"""
  refCountCountType: PhysicalInventoryCountType

  """Entity ID"""
  refCountTaskCompletedByUserId: ID

  """Person's first name"""
  refCountTaskCompletedByUserFirstName: String

  """Person's last name"""
  refCountTaskCompletedByUserLastName: String

  """Created at date"""
  taskCreatedAt: DateTime!

  """Update at date"""
  taskUpdatedAt: DateTime!

  """Due date"""
  dueDate: DateTime!

  """Entity ID"""
  taskTypeId: ID!

  """Entity code"""
  taskTypeCode: String!

  """Entity ID"""
  warehouseId: ID!

  """Entity ID"""
  licensePlateId: ID

  """Entity code"""
  licensePlateCode: String

  """Entity ID"""
  binId: ID!

  """Entity code"""
  binCode: String!

  """Entity ID"""
  productId: ID!

  """Entity ID"""
  productCode: ID!

  """Entity ID"""
  lotId: ID

  """Entity ID"""
  lotCode: ID

  """Entity ID"""
  stockStatusId: ID!

  """Entity code"""
  stockStatusCode: String!

  """Entity's label"""
  stockStatusLabel: String!
  baseExpectedQuantity: String!
  baseCountedQuantity: String!
  expectedQuantity: String!
  countedQuantity: String!
  quantityDifference: String!

  """Entity ID"""
  quantityUOMId: ID

  """Entity code"""
  quantityUOMCode: String
}

type MobileViewTask {
  """Entity code"""
  taskCode: String

  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Entity's parent task ID"""
  parentTaskId: ID

  """Entity's user ID (foreign key)"""
  userId: ID @deprecated(reason: "no longer in use")

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Task type"""
  taskType: String

  """Entity code"""
  taskTypeCode: String

  """Entity code"""
  productCode: String

  """Description of entity"""
  productDescription: String

  """Whether the product is lot managed or not"""
  productLotManaged: Boolean

  """Unit of measure for entity"""
  unitOfMeasure: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Entity code"""
  warehouseCode: String

  """Warehouse entity belongs to"""
  warehouseName: String

  """Created at date"""
  createdAt: DateTime

  """Due date"""
  dueDate: DateTime

  """Date the task was completed"""
  completionDate: DateTime

  """Entity's team ID (foreign key)"""
  teamId: ID @deprecated(reason: "no longer in use")

  """Entity's team name"""
  teamName: String

  """Description of entity"""
  teamDescription: String

  """Quantity of product"""
  quantity: String

  """Entity code"""
  sourceLotCode: String

  """Entity code"""
  destinationLotCode: String

  """Entity code"""
  sourceBinCode: String

  """Entity code"""
  destinationBinCode: String

  """Entity code"""
  sourceAreaCode: String

  """Stock status type entity belongs to"""
  sourceStatus: String

  """Reference document"""
  referringDoc: String

  """Reference item"""
  referringDocItem: String

  """Entity code"""
  destinationAreaCode: String

  """Stock status type entity belongs to"""
  destinationStatus: String

  """Task status, i.e Not Started"""
  taskStatus: TaskStatus

  """Entity's task ID (foreign key)"""
  taskId: String

  """Entity's product ID (foreign key)"""
  productId: String

  """Source License Plate Id"""
  sourceLicensePlateId: String

  """Description of entity"""
  sourceLicensePlateDescription: String

  """Source License Plate code"""
  sourceLicensePlateCode: String

  """Source lot ID (foreign key)"""
  sourceLotId: String

  """Entity's area ID (foreign key)"""
  sourceAreaId: String

  """Entity's bin ID (foreign key)"""
  sourceBinId: String

  """Destination license plate ID"""
  destinationLicensePlateId: String

  """Description of entity"""
  destinationLicensePlateDescription: String

  """Destination license plate code"""
  destinationLicensePlateCode: String

  """Source lot ID (foreign key)"""
  destinationLotId: String

  """Entity's area ID (foreign key)"""
  destinationAreaId: String

  """Entity's bin ID (foreign key)"""
  destinationBinId: String

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String

  """Delivery item associated with entity"""
  deliveryItem: String

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """Volume of entity"""
  volume: Float

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Task that is display only"""
  readonly: Boolean

  """Delivery or fulfillment erp code"""
  deliveryErpCode: String

  """Delivery or fulfillment erp code"""
  fulfillmentErpCode: String

  """Delivery or fulfillment erp code"""
  erpSalesOrder: String

  """Business partner name"""
  shipToName: String
  assignedUserId: ID
  assignedTeamId: ID

  """Deleted at date"""
  assignedAt: DateTime
  assignedByUserId: ID
  startedByUserId: ID

  """Date and time a task is started"""
  startedAt: DateTime

  """x coordinate location"""
  startedAtLocationX: Float

  """Y coordinate location"""
  startedAtLocationY: Float
  completedByUserId: ID

  """Date and time a task is completed"""
  completedAt: DateTime

  """x coordinate location"""
  completedAtLocationX: Float

  """Y coordinate location"""
  completedAtLocationY: Float

  """Boolean for if a record is a task group"""
  isTaskGroup: Boolean

  """Entity ID"""
  taskGroupId: ID

  """Entity code"""
  taskGroupCode: String

  """Task status, i.e Not Started"""
  taskGroupStatus: TaskStatus

  """Entity ID"""
  taskGroupPosition: Float
  taskGroupTaskData: TaskGroupTaskResource!
}

type ViewTask {
  """Entity code"""
  taskCode: String

  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Entity's parent task ID"""
  parentTaskId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Task type"""
  taskType: String

  """Entity code"""
  taskTypeCode: String

  """Task type reference category"""
  taskTypeReferenceCategory: TaskTypeReferenceCategory

  """Entity code"""
  productCode: String

  """Description of entity"""
  productDescription: String

  """Whether the product is lot managed or not"""
  productLotManaged: Boolean

  """Entity code"""
  warehouseCode: String

  """Warehouse entity belongs to"""
  warehouseName: String

  """Created at date"""
  createdAt: DateTime

  """Update at date"""
  updatedAt: DateTime

  """Date the task is or was due"""
  dueDate: DateTime

  """Date the task was completed"""
  completionDate: DateTime

  """Entity's team ID (foreign key)"""
  teamId: ID @deprecated(reason: "no longer in use")

  """Entity's team name"""
  teamName: String

  """Description of entity"""
  teamDescription: String

  """Quantity of product"""
  quantity: String

  """Unit of measure for entity"""
  unitOfMeasure: String

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Entity code"""
  sourceLotCode: String

  """Entity code"""
  destinationLotCode: String

  """Entity code"""
  sourceBinCode: String

  """Entity code"""
  destinationBinCode: String

  """Entity code"""
  sourceAreaCode: String

  """Stock status type entity belongs to"""
  sourceStatus: String

  """Source stock status type ID (foreign key)"""
  sourceStockStatusId: String

  """Reference document"""
  referringDoc: String

  """Reference item"""
  referringDocItem: String

  """Entity code"""
  destinationAreaCode: String

  """Stock status type entity belongs to"""
  destinationStatus: String

  """Destination stock status type ID (foreign key)"""
  destinationStockStatusId: ID

  """Task status, i.e Not Started"""
  taskStatus: TaskStatus

  """Entity's task ID (foreign key)"""
  taskId: String

  """Entity's product ID (foreign key)"""
  productId: String

  """Source License Plate Id"""
  sourceLicensePlateId: ID

  """Source License Plate code"""
  sourceLicensePlateCode: String

  """Source License Plate description"""
  sourceLicensePlateDescription: String

  """Source lot ID (foreign key)"""
  sourceLotId: String

  """Entity's area ID (foreign key)"""
  sourceAreaId: String

  """Entity's bin ID (foreign key)"""
  sourceBinId: String

  """Destination license plate ID"""
  destinationLicensePlateId: ID

  """Destination license plate code"""
  destinationLicensePlateCode: String

  """Destination license plate description"""
  destinationLicensePlateDescription: String

  """Source lot ID (foreign key)"""
  destinationLotId: String

  """Entity's area ID (foreign key)"""
  destinationAreaId: String

  """Entity's bin ID (foreign key)"""
  destinationBinId: String

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String

  """Fulfillment code and line item code"""
  fulfillmentAndLineItemCode: String

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Delivery item associated with entity"""
  deliveryItem: String

  """Delivery code and line item code"""
  deliveryAndLineItemCode: String

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """Volume of entity"""
  volume: Float

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Task that is display only"""
  readonly: Boolean

  """Delivery or fulfillment erp code"""
  deliveryErpCode: String

  """Delivery or fulfillment erp code"""
  fulfillmentErpCode: String

  """Entity ID"""
  assignedUserId: ID

  """Email address"""
  assignedUserEmail: String

  """Person's first name"""
  assignedUserFirstName: String

  """Person's last name"""
  assignedUserLastName: String

  """Entity ID"""
  assignedTeamId: ID

  """ApiDocs"""
  assignedTeamName: String

  """Entity ID"""
  startedByTeamId: ID

  """ApiDocs"""
  startedByTeamName: String

  """Entity ID"""
  completedByTeamId: ID

  """ApiDocs"""
  completedByTeamName: String

  """Deleted at date"""
  assignedAt: DateTime

  """Entity ID"""
  assignedByUserId: ID

  """Entity ID"""
  startedByUserId: ID

  """Email address"""
  startedByUserEmail: String

  """Person's first name"""
  startedByUserFirstName: String

  """Person's last name"""
  startedByUserLastName: String

  """Date and time a task is started"""
  startedAt: DateTime

  """x coordinate location"""
  startedAtLocationX: Float

  """Y coordinate location"""
  startedAtLocationY: Float

  """Entity ID"""
  completedByUserId: ID

  """Email address"""
  completedByUserEmail: String

  """Person's first name"""
  completedByUserFirstName: String

  """Person's last name"""
  completedByUserLastName: String

  """Date and time a task is completed"""
  completedAt: DateTime

  """x coordinate location"""
  completedAtLocationX: Float

  """Y coordinate location"""
  completedAtLocationY: Float

  """Boolean for if a record is a task group"""
  isTaskGroup: Boolean

  """Entity ID"""
  taskGroupId: ID

  """Entity code"""
  taskGroupCode: String

  """Task status, i.e Not Started"""
  taskGroupStatus: TaskStatus

  """Entity ID"""
  taskGroupPosition: Float

  """Count accuracy"""
  countAccuracy: Float

  """Indicates whether the count should be guided or blind"""
  countType: PhysicalInventoryCountType

  """Entity ID"""
  internalStockOrderId: ID

  """Entity code"""
  internalStockOrderCode: String

  """Entity ID"""
  internalStockOrderItemId: ID

  """Entity ID"""
  linkedTaskId: ID
  internalStockOrderReferenceDocument: String
  taskGroupTaskData: TaskGroupTaskResource!
}

type ViewTeam {
  """Entity's team ID (foreign key)"""
  id: ID!

  """ApiDocs"""
  name: ID!

  """Description of entity"""
  description: ID!

  """Is the entity a default entity that cant be deleted"""
  default: Boolean!

  """Team's status"""
  status: TeamStatus!

  """Team's user count"""
  userCount: Int

  """
  Team's Task Filter as an object in json format as GraphQL Query Requests expect.
  """
  taskFilter: JSON

  """Team's Task Filter as an array of filter objects"""
  taskFilterArray: JSON

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

type ViewUnitOfMeasureProductConversion {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Entity's warehouse (foreign key)"""
  productId: ID

  """
  Conversion factor to convert units of measure -> Multiply against base UOM
  """
  conversionFactor: Float

  """Gross weight of entity"""
  grossWeight: Float

  """Weight UOM, i.e KG"""
  weightUOMId: ID

  """Weight UOM, i.e KG"""
  weightUOMCode: String

  """Weight UOM, i.e KG"""
  weightUOMLabel: String

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: ID

  """Volume in unit of measure for entity"""
  volumeUOMCode: String

  """Volume in unit of measure for entity"""
  volumeUOMLabel: String

  """Product's length"""
  length: Float

  """Product's width"""
  width: Float

  """Product's Height"""
  height: Float

  """Unit of measure for product dimensions"""
  dimensionUOMId: ID

  """Unit of measure for product dimensions"""
  dimensionUOMCode: String

  """Unit of measure for product dimensions"""
  dimensionUOMLabel: String

  """Boolean for base unit of measure if true UOM is base"""
  isBaseUom: Boolean
}

type ViewUserGroup {
  """Entity ID"""
  userGroupId: ID

  """ApiDocs"""
  userGroupName: String

  """Entity ID"""
  warehouseId: ID

  """Entity code"""
  warehouseCode: String

  """ApiDocs"""
  warehouseName: String

  """Entity ID"""
  roleId: ID

  """ApiDocs"""
  roleName: String

  """Determines if a roles is default"""
  roleDefault: String
}

type ViewUserUserGroups {
  id: String
  name: String
}

type ViewUserUserTeam {
  teamId: String
  teamName: String
  teamWarehouseId: String
}

type ViewUser {
  """Entity ID"""
  userId: ID

  """Person's first name"""
  firstName: String

  """Person's last name"""
  lastName: ID

  """Email address"""
  email: String

  """User's account status"""
  status: String

  """Phone number"""
  phone: ID
  userGroups: [ViewUserUserGroups!]

  """User's teams"""
  userTeams: [ViewUserUserTeam!]
}

type WarehousePathQueryModel {
  """Entity ID"""
  id: ID!

  """Entity ID"""
  warehouseId: ID!

  """Entity code"""
  warehouseCode: String!

  """Entity ID"""
  internalStockOrderTypeId: ID!

  """Entity code"""
  internalStockOrderTypeCode: String!

  """Entity's label"""
  internalStockOrderTypeLabel: String!

  """Entity ID"""
  sourceAreaId: ID!

  """Entity code"""
  sourceAreaCode: String!

  """Entity ID"""
  destinationAreaId: ID!

  """Entity code"""
  destinationAreaCode: String!
}

type WarehouseRoleTypeQueryShape {
  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity ID"""
  id: ID!

  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Entity ID"""
  velocityUOMId: String

  """Velocity unit of measure"""
  velocityUOMCode: String

  """Velocity unit of measure"""
  velocityUOMLabel: String

  """Velocity"""
  velocity: Float

  """Number representing maximum weight limit for an equipment model."""
  weightMax: Float

  """Weight UOM, i.e KG"""
  weightUOMCode: String

  """Weight UOM, i.e KG"""
  weightUOMLabel: String

  """Entity ID"""
  weightUOMId: ID

  """Currency"""
  currency: String

  """Currency"""
  cost: Float
}

type ViewZoneAisleColumn {
  """Entity ID"""
  zoneId: ID

  """Entity code"""
  zoneCode: String

  """ApiDocs"""
  zoneName: String

  """Description of entity"""
  zoneDescription: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity ID"""
  aisleColumnId: ID

  """Entity code"""
  aisleColumnCode: String

  """ApiDocs"""
  aisleColumnName: String

  """Description of entity"""
  aisleColumnDescription: String

  """The zone and entity mapping exists"""
  mapped: Boolean
}

type ViewZoneAisle {
  """Entity ID"""
  zoneId: ID

  """Entity code"""
  zoneCode: String

  """ApiDocs"""
  zoneName: String

  """Description of entity"""
  zoneDescription: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity ID"""
  aisleId: ID

  """Entity code"""
  aisleCode: String

  """ApiDocs"""
  aisleName: String

  """Description of entity"""
  aisleDescription: String

  """The zone and entity mapping exists"""
  mapped: Boolean
}

type ViewZoneArea {
  """Entity ID"""
  zoneId: ID

  """Entity code"""
  zoneCode: String

  """ApiDocs"""
  zoneName: String

  """Description of entity"""
  zoneDescription: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity ID"""
  areaId: ID

  """Entity code"""
  areaCode: String

  """Area's name"""
  areaName: String

  """The zone and entity mapping exists"""
  mapped: Boolean
}

type ViewZoneBinMapped {
  """Entity ID"""
  zoneId: ID

  """Entity code"""
  zoneCode: String

  """ApiDocs"""
  zoneName: String

  """Description of entity"""
  zoneDescription: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity ID"""
  binId: ID

  """Entity code"""
  binCode: String

  """Bin type"""
  binType: BinType

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float

  """Level where the bin is located."""
  level: Int

  """Source bin block flag"""
  sourceBinBlock: BinBlockState

  """Destination bin block flag"""
  destinationBinBlock: BinBlockState

  """Active/Inactive bin status flag"""
  inactive: BinActiveState
}

type ViewZoneBinUnmapped {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity ID"""
  binId: ID

  """Entity code"""
  binCode: String

  """Bin type"""
  binType: BinType

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float

  """Level where the bin is located."""
  level: Int

  """Source bin block flag"""
  sourceBinBlock: BinBlockState

  """Destination bin block flag"""
  destinationBinBlock: BinBlockState

  """Active/Inactive bin status flag"""
  inactive: BinActiveState
}

type ViewZone {
  """Entity ID"""
  id: ID

  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Warehouse code"""
  warehouseCode: String

  """Entity's warehouse name"""
  warehouseName: String

  """Number of areas a zone contains"""
  areaCount: Int

  """Number of bins a zone contains"""
  binCount: Int

  """Number of aisles a zone contains"""
  aisleCount: Int

  """Number of aisle columns a zone contains"""
  aisleColumnCount: Int

  """Unit of measure glossary ID"""
  pickingUomRestrictionId: ID

  """Unit of measure for entity"""
  pickingUomRestrictionCode: String

  """Unit of measure for entity"""
  pickingUomRestrictionLabel: String
}

type AdminTaskType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's label"""
  label: String!

  """Entity code"""
  code: String!

  """Description of entity"""
  description: String
}

type BarcodeMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """barcode id"""
  barcodeId: String!

  """barcode field name"""
  ai: String!

  """barcode field entity relationship"""
  entity: String

  """entity field for barcode mapping"""
  entityField: String

  """data title of barcode application identifier"""
  dataTitle: String

  """data content of barcode application identifier"""
  dataContent: String

  """required identifier in the barcode spec"""
  required: Boolean!
}

type Barcode {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Entity's company ID (foreign key)"""
  companyId: ID!

  """Entity ID"""
  businessPartnerId: ID

  """configuration type"""
  configuration: String!

  """scanned data"""
  scanData: String
  barcodeMappings: BarcodeMappings
  businessPartner: BusinessPartner
  company: Company
  adminTask: AdminTask
}

"""Admin Task"""
type AdminTask {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """Task status, i.e Not Started"""
  status: TaskStatus!

  """Task type ID (foreign key)"""
  adminTaskTypeId: ID!

  """Barcode entity ID"""
  barcodeId: ID

  """Entity's user ID (foreign key)"""
  userId: ID
  barcode: Barcode
  adminTaskType: AdminTaskType
}

type BarcodeTemplate {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime
  configurationName: BarcodeSymbologyType!
}

enum BarcodeSymbologyType {
  gs1
  pdf417
}

type BarcodeTemplateMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """barcode id"""
  barcodeTemplateId: String!

  """barcode application identifier"""
  ai: String!

  """barcode field entity relationship"""
  entity: String!

  """entity field for barcode mapping"""
  entityField: String!

  """data title of barcode application identifier"""
  dataTitle: String!

  """data content of barcode application identifier"""
  dataContent: String!
}

type BinStatusMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity ID"""
  binId: ID!

  """Entity ID"""
  binStatusId: ID!
}

type InventoryBase {
  """Entity ID"""
  id: ID!

  """Entity's user ID (foreign key)"""
  licensePlateId: ID

  """Entity's bin ID (foreign key)"""
  binId: ID!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity ID"""
  deliveryItemId: ID

  """Entity ID"""
  fulfillmentItemId: ID

  """Quantity of product moved"""
  quantity: String!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  hash: ID!

  """Number of open tasks"""
  openTaskCount: Float!

  """Available quantity"""
  openTaskQuantity: String!

  """Open task quantity"""
  availableQuantity: String!
}

type Layout {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Identifier for front end tables."""
  tableId: ID!

  """User or shared layout for FE table layouts"""
  variant: LayoutVariant!

  """Entity's label"""
  label: String!

  """Columns visible in FE table"""
  columns: JSON

  """Column widths in FE table"""
  columnSizes: JSON

  """Filter for FE table"""
  filter: JSON

  """Sorting for FE tables"""
  sorting: JSON

  """Page size for FE tables"""
  pageSize: Float!

  """Entity's user ID (foreign key)"""
  userId: ID!

  """User default for FE tables"""
  userDefault: Boolean!

  """Default shared layout for FE tables"""
  sharedDefault: Boolean!
}

enum LayoutVariant {
  User
  Shared
}

type LicensePlateStatusMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity ID"""
  licensePlateId: ID!

  """Entity ID"""
  licensePlateStatusId: ID!
}

"""Map model"""
type Map {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's human readable name"""
  name: String!
  mapJson: JSONObject!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """physical or logical map data"""
  mapType: MapType
  mapConfiguration: JSONObject
}

enum MapType {
  logical
  physical
}

type NonCompliantBarcode {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Business partner name"""
  vendor: String

  """Business partner code"""
  vendorCode: String

  """Raw barcode scan data"""
  scanData: String!

  """Barcode symbology"""
  symbology: String!

  """Delivery associated with the entity"""
  deliveryCode: String

  """Non compliant barcode resolution status"""
  resolved: Boolean!
}

type NonCompliantBarcodeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [NonCompliantBarcode!]!

  """Fetch total count of records"""
  totalCount: Int!
}

"""Replenishment entity model"""
type Replenishment {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's bin ID (foreign key)"""
  binId: ID!

  """Minimum quantity threshold for a replenishment setting"""
  autoMin: Float

  """Maximum quantity threshold for a replenishment setting"""
  autoMax: Float

  """
  Quantity to replenish when a replenishment setting threshold is triggered
  """
  autoReplenishmentQuantity: Float

  """Unit of measure ID"""
  unitOfMeasureId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Minimum quantity threshold for a manual replenishment setting"""
  manualMin: Float

  """Maximum quantity threshold for a manual replenishment setting"""
  manualMax: Float

  """
  Quantity to replenish when a manual replenishment setting threshold is triggered
  """
  manualReplenishmentQuantity: Float

  """// TODO-REPLENISHMENT - figure out what this means"""
  replenishmentType: ReplenishmentType!
}

enum ReplenishmentType {
  auto
  manual
  off
}

"""Scheduled Job model"""
type ScheduledJob {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """ApiDocs"""
  name: String!

  """Interval in min. should should execute"""
  updateInterval: Int!
  jobJson: JSON!
  lastRun: DateTime

  """Job state"""
  state: JobState!

  """Entity ID"""
  scheduledJobTypeId: ID!
}

enum JobState {
  stateUnspecified
  enabled
  paused
  disabled
  updateFailed
}

"""Scheduled Job Type Model"""
type ScheduledJobType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity code"""
  code: String!

  """
  Type of job being executed, i.e. "new"
  """
  type: ScheduledJobSchedulerType!

  """Description of job being executed"""
  description: String!

  """
  Fulfilld controller, i.e. "delivery"
  """
  controller: ScheduledJobTypeControllerName!

  """Meta data for http call executed by GCP job"""
  httpTargetJson: JSON!
}

enum ScheduledJobSchedulerType {
  UPDATE
  NEW
}

enum ScheduledJobTypeControllerName {
  DELIVERY
  FULFILLMENT
  TASK_FROM_FULFILLMENT
  LOT
  PRODUCT
  INVENTORY
  TEST
  SEARCH
  WAREHOUSE_OP
  TASK_GROUPING
}

type SlottingConfiguration {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  configuration: JSON
}

type WHMasterBusinessPartnerFieldConfiguration {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

type WHMasterBusinessPartnerFieldsConfiguration {
  name: WHMasterBusinessPartnerFieldConfiguration!
  type: WHMasterBusinessPartnerFieldConfiguration!
  searchTerm1: WHMasterBusinessPartnerFieldConfiguration!
  searchTerm2: WHMasterBusinessPartnerFieldConfiguration!
  customerCode: WHMasterBusinessPartnerFieldConfiguration!
  supplierCode: WHMasterBusinessPartnerFieldConfiguration!
  validityStart: WHMasterBusinessPartnerFieldConfiguration!
  validityEnd: WHMasterBusinessPartnerFieldConfiguration!
  addressTimezone: WHMasterBusinessPartnerFieldConfiguration!
  addressUUID: WHMasterBusinessPartnerFieldConfiguration!
  cityName: WHMasterBusinessPartnerFieldConfiguration!
  district: WHMasterBusinessPartnerFieldConfiguration!
  region: WHMasterBusinessPartnerFieldConfiguration!
  streetAddress: WHMasterBusinessPartnerFieldConfiguration!
  postalCode: WHMasterBusinessPartnerFieldConfiguration!
  country: WHMasterBusinessPartnerFieldConfiguration!
  language: WHMasterBusinessPartnerFieldConfiguration!
  defaultPhoneNumber: WHMasterBusinessPartnerFieldConfiguration!
  phoneNumber: WHMasterBusinessPartnerFieldConfiguration!
  email: WHMasterBusinessPartnerFieldConfiguration!
}

type WHMasterBusinessPartnerConfiguration {
  enabled: Boolean!
  fields: WHMasterBusinessPartnerFieldsConfiguration!
}

type WHBusinessPartnerConfiguration {
  master: WHMasterBusinessPartnerConfiguration!
}

type WHAsnDeliveryItemFieldConfiguration {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

type WHAsnDeliveryItemFieldsConfiguration {
  actualRecievedQuantity: WHAsnDeliveryItemFieldConfiguration!
  uom: WHAsnDeliveryItemFieldConfiguration!
  supplierLot: WHAsnDeliveryItemFieldConfiguration!
  erpCreated: WHAsnDeliveryItemFieldConfiguration!
  description: WHAsnDeliveryItemFieldConfiguration!
  deliveryItem: WHAsnDeliveryItemFieldConfiguration!
  receiptStatus: WHAsnDeliveryItemFieldConfiguration!
  grossWeight: WHAsnDeliveryItemFieldConfiguration!
  netWeight: WHAsnDeliveryItemFieldConfiguration!
  volume: WHAsnDeliveryItemFieldConfiguration!
  volumeUom: WHAsnDeliveryItemFieldConfiguration!
  weightUom: WHAsnDeliveryItemFieldConfiguration!
  erpLastChanged: WHAsnDeliveryItemFieldConfiguration!
  erpPurchaseOrder: WHAsnDeliveryItemFieldConfiguration!
  erpPurchaseOrderItem: WHAsnDeliveryItemFieldConfiguration!
  putawayStatus: WHAsnDeliveryItemFieldConfiguration!
  unloadStatus: WHAsnDeliveryItemFieldConfiguration!
  lotCode: WHAsnDeliveryItemFieldConfiguration!
  stockStatusTypeCode: WHAsnDeliveryItemFieldConfiguration!
  licensePlateCode: WHAsnDeliveryItemFieldConfiguration!
  productCode: WHAsnDeliveryItemFieldConfiguration!
  isBaseUoM: WHAsnDeliveryItemFieldConfiguration!
  uomConversionFactor: WHAsnDeliveryItemFieldConfiguration!
}

type WHAsnDeliveryItemConfiguration {
  plannedStockBinCode: String!
  enabled: Boolean!
  fields: WHAsnDeliveryItemFieldsConfiguration!
}

type WHDeliveryItemConfiguration {
  asn: WHAsnDeliveryItemConfiguration!
}

type WHAsnDeliveryFieldConfiguration {
  required: Boolean!
  mappingName: String
}

type WHAsnDeliveryFieldsConfiguration {
  blockStatus: WHAsnDeliveryFieldConfiguration!
  billOfLading: WHAsnDeliveryFieldConfiguration!
  category: WHAsnDeliveryFieldConfiguration!
  deliveryStatus: WHAsnDeliveryFieldConfiguration!
  doorCode: WHAsnDeliveryFieldConfiguration!
  dueDate: WHAsnDeliveryFieldConfiguration!
  erpBlockingReason: WHAsnDeliveryFieldConfiguration!
  erpCreated: WHAsnDeliveryFieldConfiguration!
  erpLastChanged: WHAsnDeliveryFieldConfiguration!
  erpPurchaseOrder: WHAsnDeliveryFieldConfiguration!
  erpSalesOrder: WHAsnDeliveryFieldConfiguration!
  export: WHAsnDeliveryFieldConfiguration!
  fulfillmentBlockCode: WHAsnDeliveryFieldConfiguration!
  goodsReceiptOrIssueStatus: WHAsnDeliveryFieldConfiguration!
  loadOrUnloadStatus: WHAsnDeliveryFieldConfiguration!
  pickOrPutawayStatus: WHAsnDeliveryFieldConfiguration!
  pointOfContact: WHAsnDeliveryFieldConfiguration!
  promiseDate: WHAsnDeliveryFieldConfiguration!
  shipReadyDate: WHAsnDeliveryFieldConfiguration!
  shipTo: WHAsnDeliveryFieldConfiguration!
  shipToName: WHAsnDeliveryFieldConfiguration!
  soldTo: WHAsnDeliveryFieldConfiguration!
  soldToName: WHAsnDeliveryFieldConfiguration!
  supplier: WHAsnDeliveryFieldConfiguration!
  supplierName: WHAsnDeliveryFieldConfiguration!
  totalGrossWeight: WHAsnDeliveryFieldConfiguration!
  totalNetWeight: WHAsnDeliveryFieldConfiguration!
  totalVolume: WHAsnDeliveryFieldConfiguration!
  totalVolumeUom: WHAsnDeliveryFieldConfiguration!
  totalWeightUom: WHAsnDeliveryFieldConfiguration!
  supplierBusinessPartnerCode: WHAsnDeliveryFieldConfiguration!
}

type WHAsnDeliveryConfiguration {
  createUnloadTasks: Boolean!
  createPutawayTasks: Boolean!
  enabled: Boolean!
  fields: WHAsnDeliveryFieldsConfiguration!
}

type WHDeliveryConfiguration {
  etaDateOffset: Int
  asn: WHAsnDeliveryConfiguration!
}

type WHSoFulfillmentItemFieldConfiguration {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

type WHSoFulfillmentItemFieldsConfiguration {
  issueStatus: WHSoFulfillmentItemFieldConfiguration!
  uom: WHSoFulfillmentItemFieldConfiguration!
  lotCode: WHSoFulfillmentItemFieldConfiguration!
  description: WHSoFulfillmentItemFieldConfiguration!
  fulfillmentItem: WHSoFulfillmentItemFieldConfiguration!
  grossWeight: WHSoFulfillmentItemFieldConfiguration!
  netWeight: WHSoFulfillmentItemFieldConfiguration!
  volume: WHSoFulfillmentItemFieldConfiguration!
  volumeUom: WHSoFulfillmentItemFieldConfiguration!
  weightUom: WHSoFulfillmentItemFieldConfiguration!
  erpLastChanged: WHSoFulfillmentItemFieldConfiguration!
  productCode: WHSoFulfillmentItemFieldConfiguration!
  customerProductCode: WHSoFulfillmentItemFieldConfiguration!
  dateMaterialAvailable: WHSoFulfillmentItemFieldConfiguration!
  erpSalesOrder: WHSoFulfillmentItemFieldConfiguration!
  erpSalesOrderItem: WHSoFulfillmentItemFieldConfiguration!
  pickStatus: WHSoFulfillmentItemFieldConfiguration!
  loadStatus: WHSoFulfillmentItemFieldConfiguration!
  stockStatusTypeCode: WHSoFulfillmentItemFieldConfiguration!
}

type WHSoFulfillmentItemConfiguration {
  enabled: Boolean!
  fields: WHSoFulfillmentItemFieldsConfiguration!
}

type WHFulfillmentItemConfiguration {
  so: WHSoFulfillmentItemConfiguration!
}

type WHSoFulfillmentFieldConfiguration {
  required: Boolean!
  mappingName: String
}

type WHSoFulfillmentFieldsConfiguration {
  blockStatus: WHSoFulfillmentFieldConfiguration!
  category: WHSoFulfillmentFieldConfiguration!
  deliveryStatus: WHSoFulfillmentFieldConfiguration!
  doorCode: WHSoFulfillmentFieldConfiguration!
  dueDate: WHSoFulfillmentFieldConfiguration!
  erpBlockingReason: WHSoFulfillmentFieldConfiguration!
  erpCreated: WHSoFulfillmentFieldConfiguration!
  erpLastChanged: WHSoFulfillmentFieldConfiguration!
  erpPurchaseOrder: WHSoFulfillmentFieldConfiguration!
  erpSalesOrder: WHSoFulfillmentFieldConfiguration!
  export: WHSoFulfillmentFieldConfiguration!
  fulfillmentBlockCode: WHSoFulfillmentFieldConfiguration!
  goodsReceiptOrIssueStatus: WHSoFulfillmentFieldConfiguration!
  loadOrUnloadStatus: WHSoFulfillmentFieldConfiguration!
  pickOrPutawayStatus: WHSoFulfillmentFieldConfiguration!
  pointOfContact: WHSoFulfillmentFieldConfiguration!
  promiseDate: WHSoFulfillmentFieldConfiguration!
  shipReadyDate: WHSoFulfillmentFieldConfiguration!
  shipTo: WHSoFulfillmentFieldConfiguration!
  shipToName: WHSoFulfillmentFieldConfiguration!
  soldTo: WHSoFulfillmentFieldConfiguration!
  soldToName: WHSoFulfillmentFieldConfiguration!
  supplier: WHSoFulfillmentFieldConfiguration!
  supplierName: WHSoFulfillmentFieldConfiguration!
  totalGrossWeight: WHSoFulfillmentFieldConfiguration!
  totalNetWeight: WHSoFulfillmentFieldConfiguration!
  totalVolume: WHSoFulfillmentFieldConfiguration!
  totalVolumeUom: WHSoFulfillmentFieldConfiguration!
  totalWeightUom: WHSoFulfillmentFieldConfiguration!
  shipToBusinessPartnerCode: WHSoFulfillmentFieldConfiguration!
  soldToBusinessPartnerCode: WHSoFulfillmentFieldConfiguration!
}

type WHSoFulfillmentConfiguration {
  enabled: Boolean!
  fields: WHSoFulfillmentFieldsConfiguration!
}

type WHFulfillmentConfiguration {
  so: WHSoFulfillmentConfiguration!
}

type WHHookConfigOptions {
  async: Boolean
  on: Boolean
}

type WHDeliveryHookConfig {
  delivery_pgi: WHHookConfigOptions
  task_binToBin: WHHookConfigOptions
  task_putaway: WHHookConfigOptions
  task_pick: WHHookConfigOptions
}

type WHMasterProductFieldConfiguration {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

type WHMasterProductFieldsConfiguration {
  name: WHMasterProductFieldConfiguration!
  description: WHMasterProductFieldConfiguration!
  lotManaged: WHMasterProductFieldConfiguration!
  weight: WHMasterProductFieldConfiguration!
  weightUnitOfMeasure: WHMasterProductFieldConfiguration!
  length: WHMasterProductFieldConfiguration!
  width: WHMasterProductFieldConfiguration!
  height: WHMasterProductFieldConfiguration!
  dimensionUnitOfMeasure: WHMasterProductFieldConfiguration!
}

type WHMasterProductConfiguration {
  enabled: Boolean!
  fields: WHMasterProductFieldsConfiguration!
}

type WHProductConfiguration {
  master: WHMasterProductConfiguration!
}

type WHTaskDeliveryConfiguration {
  putawaySteps: DeliveryTaskSteps
}

enum DeliveryTaskSteps {
  oneStep
  twoStep
}

type WHTaskFulfillmentConfiguration {
  pickSteps: DeliveryTaskSteps
}

type WHTaskGroupingConfiguration {
  maxTaskGroupSize: Int
}

type WHConfigCountApprovalTask {
  enabled: Boolean
  enabledForStockStatus: [String!]
}

type WHConfigBinCountTask {
  countTypes: [PhysicalInventoryCountType!]
  invalidStockStatus: [String!]
}

type WHTaskConfiguration {
  delivery: WHTaskDeliveryConfiguration
  fulfillment: WHTaskFulfillmentConfiguration
  grouping: WHTaskGroupingConfiguration
  inventoryBinCount: WHConfigBinCountTask
  inventoryCountApproval: WHConfigCountApprovalTask
}

type WHMasterUnitOfMeasureConfiguration {
  enabled: Boolean!
}

type WHUnitOfMeasureConfiguration {
  master: WHMasterUnitOfMeasureConfiguration!
}

type WHConfiguration {
  erp: ERPOptions
  task: WHTaskConfiguration
  product: WHProductConfiguration
  unitOfMeasure: WHUnitOfMeasureConfiguration
  businessPartner: WHBusinessPartnerConfiguration
  delivery: WHDeliveryConfiguration
  deliveryItem: WHDeliveryItemConfiguration
  fulfillment: WHFulfillmentConfiguration
  fulfillmentItem: WHFulfillmentItemConfiguration
  hooks: WHDeliveryHookConfig
}

enum ERPOptions {
  aoe
  default
  sap
  pto
}

"""WarehouseConfiguration entity model"""
type WarehouseConfiguration {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime
  configuration: WHConfiguration!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

"""Integration log model"""
type IntegrationLog {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Operation start date/time"""
  operationStart: DateTime

  """Operation complete date/time"""
  operationComplete: DateTime

  """Fulfilld error code"""
  errorCode: ErrorCodes

  """Error message"""
  errorMessage: String

  """Raw errors (as json)"""
  rawErrors: JSONObject

  """Entity ID"""
  entityId: ID

  """Entity code"""
  entityLabel: String

  """Entity's human readable name"""
  entityName: String

  """Total number of rows"""
  totalNumRows: Int

  """Number of rows complete"""
  numRowsComplete: Int

  """Number of rows complete"""
  numRowsFailed: Int

  """Processing status"""
  processingStatus: ProcessingStatus

  """Processing operation"""
  processingOperation: ProcessingOperation

  """Entity ID"""
  jobId: ID

  """Entity's user ID (foreign key)"""
  userId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

enum ErrorCodes {
  SAP_AUTH_ERROR
  SAP_GENERAL
  SAP_UNKNOWN
  SAP_INVALID_REQUEST
  SAP_NOT_FOUND
  SAP_POST_GOODS_ERROR
  SAP_PLANT_STORAGE_LOCATIONS_NOT_FOUND
  SAP_LIST_PRODUCTS_BY_PLANT
  SAP_LIST_PRODUCTS_BY_ID
  SAP_MATERIAL_TO_FF_ERROR
  SAP_HANDLING_UNIT_NOT_FOUND
  SAP_STOCK_TYPE_NOT_FOUND
  INVALID_DATE_ERROR
  INVALID_INPUT
  NOT_FOUND
  SERVER_ERROR
  NO_STOCK_FOUND
  NOT_UNIQUE
  UNHANDLED
  BAD_REQUEST
  EWM_DELIVERY_NOT_FOUND
  EWM_TASK_CREATE_ERROR
  EWM_TASK_PGR_ERROR
  EWM_DLV_TASK_NOT_FOUND
  EWM_DLV_TASK_INVALID_BIN
  EWM_TASK_NOT_FOUND
  EWM_TASK_INVALID_BIN
  EWM_INVALID_TASK_TYPE
  EWM_MALFORMED_TASK
  EWM_TASK_COMPLETE_ERROR
  EWM_HU_NOT_FOUND
  EWM_HU_DECON_STATUS
  EWM_FIELD_MAPPING_NOT_FOUND
  SAP_INBOUND_DELIVERY_IMPORT
  SAP_MATERIAL_MOVEMENT_CREATE
  CYCLE_COUNT_VALIDATION
  EQUIPMENT_TYPE_DELETE_VALIDATION
  EQUIPMENT_TYPE_NOT_IN_WAREHOUSE
  EQUIPMENT_MODEL_DELETE_VALIDATION
  BIN_STATUS_MAPPING_VALIDATION
  DELIVERY_TYPE_ERROR
  DELIVERY_CATEGORY_ERROR
  DELIVERY_STATUS_ERROR
  DELIVERY_DELIVERY_ITEMS_NOT_FOUND
  DELIVERY_TASKS_ALREADY_EXIST
  PUTAWAY_TASK_VALIDATION
  PUTAWAY_TASK_DELIVERY_ITEMS_NOT_FOUND
  FULFILLMENT_BLOCK_VALIDATION
  DELIVERY_STARTED
  DELIVERY_ITEM_STARTED
  TASK_TYPE_BIN_STATUS_UPDATE
  TASK_TYPE_BIN_STATUS_VALIDATION
  TASK_TYPE_BIN_STATUS_RESTRICTION
  TASK_TYPE_STOCK_STATUS_RESTRICTION
  TASK_LICENSE_PLATE_STOCK_STATUS
  TASK_LICENSE_PLATE_STOCK_STATUS_LP_OR_TASK_NOT_FOUND
  TASK_LP_STOCK_STATUS_OPEN_TASKS
  WAREHOUSE_PREFERRED_UNIT_OF_MEASURE_VALIDATION
  UNIT_OF_MEASURE_BASE_QUANTITY_VALIDATION_ERROR
  UNIT_OF_MEASURE_PRODUCT_DOES_NOT_MATCH_VALIDATION_ERROR
  UNIT_OF_MEASURE_COMPLETION_QUANTITY_EXCEEDS_CREATION_QUANTITY
  UNIT_OF_MEASURE_REQUIRED_FOR_PRODUCT
  UNIT_OF_MEASURE_INVALID_FOR_PRODUCT
  UNIT_OF_MEASURE_NOT_FOUND
  PRODUCT_IS_LOT_MANAGED_NO_LOT_SELECTED
  PRODUCT_LOT_SELECTION_MISMATCH
  PRODUCT_UOM_CREATE_MANY_ERROR
  PRODUCT_NOT_FOUND
  TASK_TYPE_READ
  TASK_TYPE_NOT_FOUND
  TASK_OPEN_TASKS
  TASK_UPDATE_TASK
  TASK_INVALID_DEST_BIN
  TASK_COMPLETE_ERROR
  TASK_TYPE_INVALID
  TASK_STATUS_CANCELLED
  TASK_STATUS_COMPLETE
  TASK_STATUS_PLANNED
  TASK_QUANTITY_NOT_FOUND
  TASK_QUANTITY_INVALID
  TASK_INSUFFICIENT_QUANTITY
  TASK_BLOCK_INVALID
  TASK_BLOCK_STATUS
  TASK_BLOCK_TASK_TYPE
  LOAD_NO_FULFILLMENT_ITEMS
  LOAD_NO_STOCK_IN_STAGING
  LOAD_WAREHOUSE_NOT_ON_FULFILLMENT
  LOAD_FULFILLMENT_NOT_FOUND
  LOAD_FULFILLMENT_ITEM_NOT_FOUND
  LOAD_DELIVERY_ID_NOT_ON_TASK
  LOAD_TASK_NOT_CREATED
  LOAD_TASK_COMPLETE_LP_BAD_REQUEST
  LOAD_TASK_COMPLETE_BAD_REQUEST
  LOT_PRODUCT_MISMATCH
  LOT_NOT_FOUND
  COUNT_BIN_TASK_OPEN
  COUNT_BIN_TASK_COMPLETE_BAD_REQUEST
  COUNT_BIN_TASK_START_INVALID_STOCK_STATUS
  COUNT_BIN_TASK_CREATE_INVALID_STOCK_STATUS
  COUNT_BIN_APPROVAL_STOCK_ERROR
  ITEMS_NOT_COMPLETE
  DOOR_NOT_ASSIGNED
  FULFILLMENT_BLOCKED
  FULFILLMENT_DELIVERY_DOC_INVALID
  FULFILLMENT_ITEM_NOT_AVAILABLE
  FULFILLMENT_ITEM_NOT_FOUND
  LICENSE_PLATE_DOES_NOT_MATCH_SELECTED_PRODUCT
  FULFILLMENT_ITEM_COMPLETE
  PICK_TO_STAGING_DELIVERY_DOOR_NOT_ASSIGNED
  PICK_TO_STAGING_DELIVERY_DOOR_BIN_NOT_ASSIGNED
  PICK_TO_STAGING_TASK_COMPLETE_LP_BAD_REQUEST
  PICK_TO_STAGING_TASK_COMPLETE_BAD_REQUEST
  PICK_TO_STAGING_NO_AVAILABLE_QUANTITY
  AREA_IS_SYSTEM_DEFAULT
  AREA_IS_SYSTEM_DEFAULT_CANNOT_DELETE
  DOOR_IS_SYSTEM_DEFAULT
  DOOR_IS_SYSTEM_DEFAULT_CANNOT_DELETE
  DOOR_WAREHOUSE_DOESNT_MATCH_SELECTED_WAREHOUSE
  DOOR_SELECTION_REQUIRES_WAREHOUSE_SELECTION
  BIN_NOT_FOUND
  PLANNING_BIN_NOT_FOUND
  BIN_NOT_EMPTY
  BIN_IS_SYSTEM_DEFAULT
  BIN_IS_SYSTEM_DEFAULT_CANNOT_DELETE
  BIN_SIZE_IS_SYSTEM_DEFAULT
  BIN_SIZE_IS_SYSTEM_DEFAULT_CANNOT_DELETE
  BIN_SIZE_BAD_INPUT_UPDATE
  BIN_SIZE_IN_USE_DELETE
  LICENSE_PLATE_STATUS_INVALID
  LICENSE_PLATE_NOT_FOUND
  LICENSE_PLATE_ALREADY_EXISTS
  LICENSE_PLATE_CONTENT_MISMATCH
  LICENSE_PLATE_MUST_BE_IN_PLANNING_BIN
  LICENSE_PLATE_EMPTY
  LICENSE_PLATE_SYNC_STATUS_UNKNOWN
  LICENSE_PLATE_NOT_IN_WAREHOUSE
  BARCODE_PARSE_ERROR
  BARCODE_EMPTY
  UNKNOWN_BARCODE_SYMBOLOGY
  UNKNOWN_BARCODE_SCANNER
  BARCODE_NON_COMPLIANT
  AUTHENTICATION_TOKEN_VERIFICATION_ERROR
  AUTHENTICATION_UNKNOWN_ERROR
  AUTHENTICATION_INVALID_ACCESS_TOKEN
  AUTHENTICATION_MISSING_ACCESS_TOKEN
  AUTHENTICATION_INVALID_ID_TOKEN
  AUTHENTICATION_MISSING_ID_TOKEN
  AUTHENTICATION_EXPIRED_TOKEN
  AUTHENTICATION_BROKER_USER_DISABLED
  AUTHENTICATION_USER_DISABLED
  AUTHENTICATION_REVOKED_TOKEN
  AUTHENTICATION_MISSING_AUTH_TYPE
  AUTHENTICATION_INVALID_AUTH_TYPE
  AUTHENTICATION_SAP_REFRESH_TOKEN_EXPIRED
  AUTHENTICATION_TOKEN_MAPPING_ERROR
  AUTHENTICATION_IDP_USER_NOT_FOUND
  AUTHENTICATION_FF_USER_NOT_FOUND
  AUTHENTICATION_FF_LOGIN_ERROR
  AUTHENTICATION_FF_M2M_MISMATCH
  AUTHENTICATION_CONN_PAUSED
  ANALYTICS_DASHBOARD_NOT_FOUND
  ANALYTICS_CARDS_NOT_FOUND
  ANALYTICS_USER_TOKEN_NOT_FOUND
  ANALYTICS_ADMIN_TOKEN_NOT_FOUND
  ANALYTICS_USER_NOT_FOUND
  ANALYTICS_ERROR_CREATING_USER
  ANALYTICS_ERROR_FETCHING_CARDS
  ANALYTICS_ERROR_FETCHING_DASHBOARDS
  ANALYTICS_TENANT_CONFIG_ERROR
  ANALYTICS_ENV_CONFIG_ERROR
  ANALYTICS_LIVEBOARD_NAMING_ERROR
  USER_CREATE_ERROR
  USER_NOT_FOUND_ERROR
  USER_DOES_NOT_HAVE_A_PRIMARY_TEAM
  USER_DOES_NOT_HAVE_A_DEFAULT_WAREHOUSE
  GCP_STORAGE_FILE_NOT_FOUND
  GCP_STORAGE_FOLDER_NOT_FOUND
  GCP_STORAGE_NO_BUCKET_SELECTED
  GCP_RAW_ERROR
  WAREHOUSE_NOT_FOUND
  WAREHOUSE_NOT_IN_COMPANY
  WAREHOUSE_SYSTEM_CONNECTION_NOT_FOUND
  EVENTS_WARHEOUSE_OPS_OP_NOT_FOUND
  EVENTS_WARHEOUSE_OPS_BUSINESS_PARTNER_NOT_FOUND
  WAREHOUSE_OP_CODE_NOT_CODE
  WAREHOUSE_OP_BP_NOT_FOUND
  WAREHOUSE_OP_BP_UNSUPPORTED
  WAREHOUSE_OP_CODE_UNKNOWN
  WAREHOUSE_OP_UPLOAD_ERROR
  WAREHOUSE_OP_DUPLICATE_UPLOAD_ERROR
  WAREHOUSE_OP_NO_BARCODE_PROVIDED
  BUSINESS_PARTNER_COMPLIANCE_CHECK_ERROR
  UPLOAD_EVENT_ERROR
  UNAUTHORIZED_ERROR
  HISTORY_ID_MISTMATCH
  DISPOSITION_OPEN_TASKS_EXIST
  DISPOSITION_ALREADY_OPEN
  DISPOSITION_LICENSE_PLATE_DOESNT_EXIST
  SMART_SCAN_LICENSE_PLATE_NOT_FOUND
  SMART_SCAN_CONTEXT_NOT_FOUND
  DISPOSITION_LICENSE_PLATE_OR_DISPOSO_DOESNT_EXIST
  DISPOSITION_LICENSE_PLATE_INVENTORY_NOT_FOUND
  FOUND_STOCK_LICENSE_PLATE_NOT_FOUND
  WAREHOUSE_CONFIGURATION_NOT_FOUND
  DELETE_LAYOUT_VARIANT_ERROR
  ZONE_UPDATE_INVALID_WAREHOUSE
  ZONE_UPDATE_INVALID_BIN_TYPE
  TASK_GROUP_ASSIGN_MISSING_USER_TEAM
  TASK_GROUP_NOT_FOUND
  TASK_GROUP_EMPTY
  TASK_GROUP_ORDERING_X_Y_COORDINATES_UNKNOWN
  TASK_GROUP_AI_ENDPOINT_REQUEST
  TASK_GROUP_STATUS_CANCELLED
  TASK_GROUP_STATUS_COMPLETE
  MIN_MAX_REPLENISHMENTQUANTITY_UNDEFINED
  INVENTORY_NOT_FOUND
  INTEGRATION_LOG_CREATE_ERROR
  TASK_RECEIVE_FROM_PRODUCTION_BAD_REQUEST
  SLOTTING_DATASET_VARIANT_LIST_ERROR
  SLOTTING_DATASET_SLOC_PLANT_WH_ERROR
  SLOTTING_RUN_NOT_FOUND
  NO_SLOTTING_RUN_DEPLOYED
  SLOTTING_RUN_ALREADY_DEPLOYED
  STOCK_STATUS_SYSTEM_CONNECTION_INVALID
  STOCK_STATUS_SYSTEM_CONNECTION_MAPPING_ERROR
  STOCK_STATUS_CREATE_SYSTEM_CONNECTION_MISSING
  STOCK_STATUS_UPDATE_SYSTEM_CONNECTION_MISSING
  STOCK_STATUS_MAPPING_NOT_FOUND
  STOCK_STATUS_MAPPING_CREATE_DUPLICATE
  STOCK_STATUS_MAPPING_CREATE_DUPLICATE_DEFAULT
  SAP_STOCK_STATUS_DEFAULT_UPDATE
  SYSTEM_CONNECTION_HU_USER_STATUS_UPDATE_ERROR
  SYSTEM_CONNECTION_NOT_FOUND
  SYSTEM_CONNECTION_PAUSED
  PRODUCT_SYNC_ERROR
  PRODUCT_SYNC_NO_ERP_PRODUCTS_FOUND
  LOT_SYNC_ERROR
  LOT_SYNC_PRODUCT_NOT_FOUND
  FULFILLMENT_SYNC_NO_PRODUCTS_FOUND
  FULFILLMENT_SYNC_ERROR
  FULFILLMENT_SYNC_PRODUCT_NOT_FOUND
  SLOC_SYNC_NO_EXIT_AREAS
  SLOC_SYNC_ERROR
  SAP_INTEGRATION_HU_DETAIL_ERR
  PHYSICAL_INVENTORY_DOC_POST_ERROR
  ISO_LP_ALREADY_ASSIGNED
  ISO_LP_ASSIGN_CONTENT_ERROR
  ISO_LP_ASSIGN_TASKS_STARTED
  ISO_ITEM_NOT_FOUND
  INV_RECON_REPORT_INPR
  INV_RECON_META_NOT_FOUND
  WAREHOUSE_PATH_DIFF_WAREHOUSE
  WAREHOUSE_PATH_SAME_AREA_PATH
}

enum ProcessingStatus {
  preFlight
  processing
  complete
  failed
  partialComplete
  unknown
  queued
}

enum ProcessingOperation {
  productUomMasterSync
  lotMasterSync
  fulfillmentSync
  licensePlateSync
  datasetFetch
  slottingRun
  seegridAgvDispatch
  transferOrderPost
  storageLocationSync
  stockStatusSync
  storageUnitEnqueue
  licensePlateRemoval
  inventoryReconciliation
  putawayWorkfow
  reworkAndQualityWorkflow
  pickToDockWorkflow
  physicalInventoryPost
}

type WarehousePath {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime
  warehouseId: ID!
  internalStockOrderTypeId: ID!
  sourceAreaId: ID!
  destinationAreaId: ID!
}

type SapDeliveryDocumentType {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Delivery type"""
  deliveryType: String!

  """Delivery Document Type"""
  documentType: String!

  """System connection ID"""
  systemConnectionId: ID!
}

type SapLogicalBinMapping {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity's door ID (foreign key)"""
  doorId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: String!

  """Sap bin code"""
  sapBinCode: String!

  """Sap storage type code"""
  sapStorageTypeCode: String!
  internalStockOrderTypeId: ID
}

type SapHUStatus {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """"""
  code: String!

  """"""
  label: String!

  """"""
  include: Boolean!

  """"""
  systemConnectionId: String!
}

type SlottingExclusion {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime

  """Update by email"""
  updatedByEmail: String

  """Update by id"""
  updatedById: ID

  """Deleted at date"""
  deletedAt: DateTime

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's user ID (foreign key)"""
  excludedById: ID
}

type InventoryReconciliationQueryModel {
  """Entity ID"""
  id: ID!

  """Entity ID"""
  metaId: ID

  """Entity ID"""
  warehouseId: ID!

  """Entity ID"""
  licensePlateId: ID

  """Entity code"""
  licensePlateCode: String

  """Entity ID"""
  productId: ID

  """Entity code"""
  productCode: String

  """Entity ID"""
  lotId: ID

  """Entity code"""
  lotCode: String

  """Entity ID"""
  binId: ID

  """Entity code"""
  binCode: String

  """Entity ID"""
  stockStatusTypeId: ID

  """Entity code"""
  stockStatusTypeCode: String

  """I.e. Returns, Available, Lot Restricted etc."""
  stockStatusTypeLabel: String

  """Quantity of product"""
  quantity: String

  """Entity ID"""
  unitOfMeasureId: ID

  """Unit of measure for entity"""
  unitOfMeasureCode: String

  """Entity's SAP storage location"""
  storageLocation: String

  """License Plate erp code"""
  erpLicensePlateCode: String

  """Product code"""
  erpProductCode: String

  """Entity code"""
  erpLotCode: String

  """Entity code"""
  erpBinCode: String

  """Entity ID"""
  erpStockStatusTypeId: ID

  """I.e. Returns, Available, Lot Restricted etc."""
  erpStockStatusTypeLabel: String

  """Stock status type entity belongs to"""
  erpStockType: String

  """Array of Hu User Status Codes"""
  erpHuHoldCodes: [String!]

  """Quantity of product"""
  erpQuantity: String

  """Entity code"""
  erpUnitOfMeasureCode: String

  """Entity's SAP storage location"""
  erpStorageLocation: String

  """Bin conflict found during inventory reconciliation"""
  binConflict: Boolean

  """Lot conflict found during inventory reconciliation"""
  lotConflict: Boolean

  """Product conflict found during inventory reconciliation"""
  productConflict: Boolean

  """Stock status conflict found during inventory reconciliation"""
  stockStatusConflict: Boolean

  """License Plate conflict found during inventory reconciliation"""
  licensePlateConflict: Boolean

  """Quantity conflict found during inventory reconciliation"""
  quantityConflict: Boolean

  """UOM conflict found during inventory reconciliation"""
  unitOfMeasureConflict: Boolean

  """Storage Location conflict found during inventory reconciliation"""
  storageLocationConflict: Boolean
}

type InventoryReconciliationMetaQueryModel {
  """Entity ID"""
  id: String!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime!

  """Inventory reconciliation status"""
  status: String!

  """Entity's warehouse (foreign key)"""
  warehouseId: String!

  """Lot conflict found during inventory reconciliation"""
  lotConflicts: Int!

  """Bin conflict found during inventory reconciliation"""
  binConflicts: Int!

  """Product conflict found during inventory reconciliation"""
  productConflicts: Int!

  """Stock status conflict found during inventory reconciliation"""
  stockStatusConflicts: Int!

  """UOM conflict found during inventory reconciliation"""
  uomConflicts: Int!

  """Quantity conflict found during inventory reconciliation"""
  quantityConflicts: Int!

  """License Plate conflict found during inventory reconciliation"""
  licensePlateConflicts: Int!

  """Storage Location conflict found during inventory reconciliation"""
  storageLocationConflicts: Int

  """Inventory reconciliation total conflicts"""
  totalConflicts: Int!

  """Inventory reconciliation total records"""
  totalRecords: Int!

  """Inventory reconciliation accuracy"""
  accuracy: Float!
}

type CountArtifactQueryModel {
  """Entity ID"""
  id: ID!

  """Created at date"""
  createdAt: DateTime!

  """Update at date"""
  updatedAt: DateTime!
  status: CountArtifactApprovalStatus
  productId: ID!
  productCode: String!
  binId: ID
  binCode: String
  areaId: String
  areaCode: String
  lotId: ID
  lotCode: String
  stockStatusId: ID!
  stockStatusCode: String
  stockStatusLabel: String
  licensePlateId: ID
  licensePlateCode: String

  """Timestamp of latest inventory count approval"""
  licensePlateLastCount: DateTime

  """
  Status determining if the license plate and its contents are successfully synced with the ERP ledger.
  """
  licensePlateLedgerSyncStatus: LedgerSyncStatus

  """Reason ledger sync status is not successful."""
  licensePlateLedgerSyncStatusReason: String
  baseCountedQuantity: String!
  baseExpectedQuantity: String!
  countedQuantity: String!
  expectedQuantity: String!
  quantityDifference: String!
  countedQuantityUOMId: String!
  countedQuantityUOMCode: String
  countTaskId: String!
  countTaskCode: String
  countTaskCompletedAt: String
  countTaskCompletedByUserId: String
  countTaskCompletedByUserFirstName: String
  countTaskCompletedByUserLastName: String
  approvalTaskId: String
  approvalTaskCode: String
  licensePlateStockAdjustment: Boolean
  completionStatus: CountArtifactCompleteStatus!
}

enum CountArtifactApprovalStatus {
  approved
  denied
}

enum CountArtifactCompleteStatus {
  complete
  notStarted
  canceled
}

type SlottingDataFrame {
  """"""
  id: ID!

  """Start date of the dataset"""
  last_import: DateTime!

  """End date of the dataset"""
  import_date: DateTime!

  """A String representing the status of the slotting dataframe entry"""
  status: String!

  """"""
  material_metadata_count: Float!

  """"""
  material_inventory_count: Float!

  """"""
  abc_indicator_count: Float!

  """"""
  open_transfer_orders_count: Float!

  """"""
  sales_orders_count: Float!

  """"""
  batches_count: Float!

  """"""
  uom_of_material_count: Float!

  """"""
  material_data_for_storage_type_count: Float!

  """Entity's warehouse (foreign key)"""
  warehouse_id: ID!
}

type ViewSlottingExclusion {
  """Entity code"""
  code: String

  """Entity ID"""
  id: ID

  """Entity's product ID (foreign key)"""
  productId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Unit of measure for entity"""
  baseUOM: String

  """Created by user"""
  excludedBy: String

  """Created by user"""
  createdAt: String

  """Created by user"""
  updatedAt: String
}

"""Agent configuration host"""
type AgentConfigurationHost {
  """Agent Hostname"""
  hostname: String

  """Agent Port"""
  port: String

  """Agent Path"""
  path: String!

  """Agent Access Policy"""
  accessPolicy: AgentConfigurationAccessPolicy!
}

enum AgentConfigurationAccessPolicy {
  PATH_ONLY
  ALL_PATHS
}

"""Agent configuration model"""
type AgentConfiguration {
  """Agent Id"""
  agentId: ID!

  """Agent Hosts"""
  hosts: [AgentConfigurationHost!]!

  """Agent Name"""
  agentName: String

  """Agent version"""
  version: String

  """Agent status"""
  status: AgentConfigStatus
}

enum AgentConfigStatus {
  ok
  error
}

"""Proxy configuration model"""
type ProxyConfig {
  """Proxy URL"""
  proxyUrl: String

  """Agent configurations"""
  agents: [AgentConfiguration!]!
}

type UserTeamMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UserTeamMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CompanyNodes {
  nodes: [Company!]!
}

type OrganizationOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Organization!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ContactInfoOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ContactInfo!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserWarehouseDefaultOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UserWarehouseDefault!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DisplayPreferenceOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DisplayPreference!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductNodes {
  nodes: [Product!]!
}

type WarehouseNodes {
  nodes: [Warehouse!]!
}

type CompanyOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Company!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehouseOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Warehouse!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type Users {
  nodes: [User!]!
}

type TeamOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Team!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewTeamOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewTeam!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewUserGroupOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewUserGroup!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserGroupOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UserGroup!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [User!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewUserOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewUser!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BarcodeMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [BarcodeMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewBarcodeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewBarcode!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BarcodeMappings {
  nodes: [BarcodeMapping!]!
}

type BarcodeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Barcode!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type AllBarcodeEntities {
  entity: String!
  fields: [String!]!
}

type EwmHandlingUnit {
  """Entity ID"""
  code: String!

  """Packaging material type"""
  handlingUnitType: String!

  """Quantity in base unit of measure"""
  quantity: Float

  """Unit of measure for entity"""
  quantityUnitOfMeasure: String

  """Packaging material"""
  packagingMaterial: String!

  """Net weight of entity"""
  netWeight: Float!

  """Gross weight of entity"""
  grossWeight: Float!

  """Weight UOM, i.e KG"""
  weightUnitOfMeasure: String!

  """Handling unit status"""
  handlingUnitStatus: String!

  """Product code"""
  productCode: String

  """Product description"""
  productDescription: String
  unloadingStatus: String
  pgrStatus: String
  warehouseTaskCreateStatus: String
  warehouseTaskConfirmationStatus: String
  putawayStatus: String

  """Delivery item associated with entity"""
  deliveryItem: String

  """Stock status type entity belongs to"""
  stockType: String

  """Handling Unit type"""
  type: HandlingUnitType

  """Nested handling units"""
  handlingUnits: [EwmHandlingUnit!]
}

enum HandlingUnitType {
  mixed
  uniform
  carton
}

type EwmWarehouseTaskResponse {
  """Warehouse task"""
  warehouseTask: String!

  """Handling unit"""
  handlingUnit: String!
  unloadingStatus: String
  pgrStatus: String
  warehouseTaskCreateStatus: String
  warehouseTaskConfirmationStatus: String
  putawayStatus: String
}

type EwmHUDeconResponse {
  """Handling unit"""
  handlingUnit: String!

  """Warehouse entity belongs to"""
  ewmWarehouse: String!
  workCenter: String!
}

type EwmWarehouseOrder {
  warehouseCode: String!
  warehouseOrder: String
  warehouseOrderStatus: String!
  warehouseOrderStatusName: EWMWarehouseOrderStatusName!
  creationDateTime: DateTime
  warehouseOrderStartDateTime: DateTime
  warehouseOrderConfirmedDateTime: DateTime
  lastChangeDateTime: DateTime
  latestStartDateTime: DateTime
  executingResource: String!
}

enum EWMWarehouseOrderStatusName {
  confirmed
  open
  canceled
}

type EwmWarehouseOrderOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [EwmWarehouseOrder!]!
}

type EwmWarehouseTask {
  warehouseOrder: String!

  """Entity code"""
  code: String!

  """Product code"""
  productCode: String

  """Description of entity"""
  productDescription: String

  """Quantity in base unit of measure"""
  quantity: String

  """Quantity in base unit of measure"""
  targetQuantity: String

  """Unit of measure for entity"""
  quantityUnitOfMeasure: String

  """Net weight of entity"""
  netWeight: String

  """Unit of measure for entity"""
  weightUnitOfMeasure: String
  sourceStorageType: String
  destinationStorageType: String

  """Bin entity belongs to"""
  sourceBin: String

  """Bin entity belongs to"""
  destinationBin: String

  """Handling unit"""
  sourceHandlingUnit: String

  """Handling unit"""
  destinationHandlingUnit: String

  """Task status, i.e Not Started"""
  status: EwmWarehouseTaskStatus

  """Task type"""
  taskType: String

  """Created at date"""
  createdAt: DateTime
}

enum EwmWarehouseTaskStatus {
  confirmed
  open
  canceled
}

type EwmWarehouseTaskOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [EwmWarehouseTask!]!
}

type EwmBinToBinResponse {
  """Warehouse task"""
  warehouseTask: String!
}

type EwmDeliveryLookUpMethod {
  """Lookup method"""
  method: EwmDeliveryDetailOption

  """Lookup value"""
  value: String
}

enum EwmDeliveryDetailOption {
  handlingUnit
  asn
  purchaseDocument
  delivery
  unknown
}

type EwmDelivery {
  """Delivery associated with the entity"""
  inboundDeliveryCode: String

  """Business partner code"""
  partnerCode: String

  """Warehouse code"""
  warehouseCode: String

  """Business partner name"""
  partnerDescription: String

  """Due date"""
  dueDate: DateTime

  """Advanced Shipping Notification"""
  advancedShippingNotification: String

  """Delivery category"""
  deliveryCategory: String

  """EWM delivery type"""
  deliveryType: String

  """Handling Units"""
  handlingUnits: [EwmHandlingUnit!]

  """Handling Units"""
  handlingUnitsCount: Int!

  """Lookup method details"""
  lookUpMethod: EwmDeliveryLookUpMethod
}

type UserPermissionsResponseDto {
  """Entity ID"""
  id: ID!

  """Description of entity"""
  description: String!

  """Entity code"""
  code: String!
  grouping: PermissionGrouping!
}

type UserPermittedWarehousesResponseDto {
  """Entity ID"""
  id: ID!

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Configuration Model for the Warehouse"""
  type: ModelWarehouseType

  """Entity ID"""
  systemConnectionId: String

  """Entity code"""
  systemConnectionCode: String

  """System connection type"""
  systemConnectionSystemType: SystemConnectionType
}

type SapStorageLocationPlantOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SapStorageLocationPlant!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewAreaOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewArea!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type AreaOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Area!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type AisleOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Aisle!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type AisleColumnOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [AisleColumn!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BarcodeTemplateMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [BarcodeTemplateMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BarcodeTemplateOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [BarcodeTemplate!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BinStatusOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [BinStatus!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UnitOfMeasureGlossaryOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UnitOfMeasureGlossary!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewBinSizeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewBinSize!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BinSizeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [BinSize!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type VertexOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Vertex!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewBinOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewBin!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BinOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Bin!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BinStatusMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [BinStatusMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BusinessPartnerOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [BusinessPartner!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CountArtifactQueryModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [CountArtifactQueryModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LicensePlateStatusMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [LicensePlateStatusMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LicensePlateStatusOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [LicensePlateStatus!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LicensePlateDetailQueryModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [LicensePlateDetailQueryModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LicensePlateDetailOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [LicensePlateDetail!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LicensePlateOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [LicensePlate!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewDeliveryItemOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewDeliveryItem!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DeliveryItemOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DeliveryItem!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewUnitOfMeasureProductConversionOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewUnitOfMeasureProductConversion!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UnitOfMeasureProductConversionOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [UnitOfMeasureProductConversion!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type UnitOfMeasureConversionItemResource {
  """
  Conversion factor to convert units of measure -> Multiply against base UOM
  """
  conversionFactor: Float!

  """Entity ID"""
  id: ID!

  """Entity code"""
  code: String!

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Entity ID"""
  productId: ID!

  """Boolean for base unit of measure if true UOM is base"""
  isBaseUom: Boolean!
}

"""Unit Of Measure Conversion Resource"""
type UnitOfMeasureConversion {
  """Quantity of product"""
  quantity: String!

  """Unit of measure for entity"""
  unitOfMeasure: UnitOfMeasureConversionItemResource!
}

"""Unit Of Measure Conversion Resource"""
type UnitOfMeasureConversionResource {
  """Unit of measure for entity"""
  unitOfMeasureConversions: [UnitOfMeasureConversion!]!
}

type WarehousePreferredUnitOfMeasureOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehousePreferredUnitOfMeasure!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ProductQueryShapeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ProductQueryShape!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LotNodes {
  nodes: [Lot!]!
}

type UnitOfMeasureProductConversionNodes {
  nodes: [UnitOfMeasureProductConversion!]!
}

type ProductOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Product!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewLotOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewLot!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LotOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Lot!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CreatedOrUpdatedLotsResult {
  lotsCreated: [ID!]
  lotsUpdated: [ID!]
  createdOrUpdatedLots: [Lot!]
}

type SapHuUserStatusOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SapHuUserStatus!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SapStockStatusTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SapStockStatusType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InventoryLotQueryShapeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InventoryLotQueryShape!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InventoryProductQueryShapeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InventoryProductQueryShape!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [TaskType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InventoryBaseQueryShapeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InventoryBaseQueryShape!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InternalStockOrderAssignedInventoryOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InternalStockOrderAssignedInventory!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type BinForPickTask {
  binId: ID
  binCode: String
  binLevel: String
  lotId: ID
  lotCode: String
  lotProductionDate: DateTime
  lotExpiration: DateTime
  quantity: Float
  availableQuantity: Float
}

type LicensePlateForPickTask {
  binId: ID
  binCode: String
  licensePlateId: ID
  licensePlateCode: String
  lotId: ID
  lotCode: String
  lotProductionDate: DateTime
  lotExpirationDate: DateTime
  quantity: Float
  availableQuantity: Float
}

type SapDeliveryDocumentTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SapDeliveryDocumentType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewTaskTypeStockStatusMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewTaskTypeStockStatusMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewStockStatusOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewStockStatus!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type StockStatusMappingByWarehouseDto {
  sapStockStatusType: SapStockStatusType
  sapHuUserStatus: SapHuUserStatus
}

type StockStatusTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [StockStatusType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewTaskGroupOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewTaskGroup!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SourceDestinationArea {
  sourceCode: String
  destinationCode: String
}

type TaskGroupOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [TaskGroup!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewTaskTypeBinStatusMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewTaskTypeBinStatusMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskTypeBinStatusBinsQueryDto {
  """Entity code"""
  code: String

  """Entity ID"""
  id: ID

  """Entity code"""
  areaCode: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Aisle where the bin is located"""
  aisle: String

  """Level where the bin is located."""
  level: Float

  """Column where the bin is located."""
  column: String

  """Verification code from a barcode scan"""
  verificationCode: String

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Timestamp of latest movement"""
  lastMovement: DateTime

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Source bin block flag"""
  sourceBinBlock: BinBlockState

  """Destination bin block flag"""
  destinationBinBlock: BinBlockState

  """Active/Inactive bin status flag"""
  inactive: BinActiveState
  hasOpenTasks: Boolean
  containsProducts: Boolean
}

type TaskTypeBinStatusDestinationBins {
  """Array of valid destination bins"""
  destinationBins: [ViewBin!]!
}

type TaskTypeBinStatusSourceBins {
  """Array of valid source bins"""
  sourceBins: [ViewBin!]!
}

type MobileViewTaskOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [MobileViewTask!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskGroupTaskResource {
  taskCount: Int!
  estimatedTimeToComplete: Float!
}

type ViewTaskOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewTask!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Task!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskTypeStatusCount {
  notStarted: Float!
  inProgress: Float!
  complete: Float!
}

type TaskTypeWithFrequency {
  count: Int!
  taskType: TaskType!
  statusCount: TaskTypeStatusCount!
}

type TaskTypeAnalyticsResponse {
  taskTypeAndFrequency: [TaskTypeWithFrequency!]!
  total: Float!
}

type ViewFulfillmentItemOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewFulfillmentItem!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type FulfillmentItemOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [FulfillmentItem!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LpForFulfillmentItem {
  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Entity code"""
  licensePlateCode: String

  """Entity ID"""
  productId: ID!

  """Entity code"""
  productCode: String!

  """Entity ID"""
  lotId: ID

  """Entity code"""
  lotCode: String

  """Lot expiration date"""
  lotExpirationDate: DateTime

  """Lot Restricted"""
  lotRestricted: Boolean

  """Unit of measure ID"""
  quantityUOMId: String

  """Entity code"""
  quantityUOMCode: String

  """Quantity of product"""
  quantity: String!

  """Available quantity"""
  availableQuantity: String!

  """Fulfillment quantity"""
  lineItemQuantity: String

  """Entity's area ID (foreign key)"""
  binId: ID!

  """Entity code"""
  binCode: String!

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity code"""
  areaCode: String

  """Entity's stock status type ID (foreign key)"""
  stockStatusId: String!

  """Entity code"""
  stockStatusCode: String!

  """
  Status determining if the license plate and its contents are successfully synced with the ERP ledger.
  """
  ledgerSyncStatus: LedgerSyncStatus

  """Active/Inactive license plate status flag"""
  licensePlateStatus: LicensePlateStatusState

  """Number of open tasks"""
  openTaskCount: Int!

  """Timestamp of latest movement"""
  lpLastMovement: DateTime
}

type DeliveryItemNodes {
  nodes: [DeliveryItem!]!
  totalCount: Int!
}

type FulfillmentItemNodes {
  nodes: [FulfillmentItem!]!
  totalCount: Int!
}

type ViewDeliveryOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewDelivery!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DeliveryOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Delivery!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DeliveryItemDetails {
  """Delivery item ID (foreign key)"""
  id: ID!

  """Entity code"""
  licensePlateCode: String

  """Entity ID"""
  licensePlateId: ID

  """Description of entity"""
  licensePlateDescription: String

  """Entity code"""
  productCode: String!

  """Entity ID"""
  productId: ID!

  """Description of entity"""
  productDescription: String

  """Quantity of product"""
  quantity: String!

  """Entity code"""
  lotCode: String

  """Entity ID"""
  lotId: ID

  """Entity code"""
  stockStatusCode: String

  """Entity ID"""
  stockStatusId: ID

  """Delivery item associated with entity"""
  deliveryItem: String!

  """Entity's bin ID (foreign key)"""
  sourceBinId: ID

  """Entity code"""
  sourceBinCode: String

  """Entity ID"""
  destinationBinId: ID

  """Entity code"""
  destinationBinCode: String
}

type ViewDoorOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewDoor!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DoorOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Door!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InternalStockOrderOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InternalStockOrder!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InternalStockOrderTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InternalStockOrderType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SapBinFFAreaOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SapBinFFArea!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewSapBinFFAreaOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewSapBinFFArea!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type IntegrationLogOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [IntegrationLog!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehousePathQueryModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehousePathQueryModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehousePathOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehousePath!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type TaskCompleteManyLicensePlatePutawayResponse {
  """Successful license plates"""
  successful: [LicensePlate!]!

  """Unsuccessful license plates"""
  unsuccessful: [LicensePlate!]!
}

type DemoDataOutputDto {
  bins: [Bin!]!
  products: [Product!]!
}

type GenerateDataOutputDto {
  deliveries: [Delivery!]!
  fulfillments: [Delivery!]!
}

type GenerateBinOutputDto {
  bins: [Bin!]!
}

type GenerateProductOutputDto {
  products: [Product!]!
}

type RandomPutawayOutputDto {
  completedTaskIds: [String!]!
}

type RandomUnloadOutputDto {
  completedTaskIds: [String!]!
}

type DispositionOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Disposition!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EquipmentTypeQueryShapeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [EquipmentTypeQueryShape!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EquipmentTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [EquipmentType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewEquipmentModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewEquipmentModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EquipmentModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [EquipmentModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewEquipmentOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewEquipment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EquipmentItemOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [EquipmentItem!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type FulfillmentBlockOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [FulfillmentBlock!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type FulfillmentItemDetails {
  """Fulfillment item id (foreign key)"""
  id: ID!

  """Entity code"""
  licensePlateCode: String

  """Entity ID"""
  licensePlateId: ID

  """Description of entity"""
  licensePlateDescription: String

  """Entity code"""
  productCode: String!

  """Entity ID"""
  productId: ID!

  """Description of entity"""
  productDescription: String

  """Quantity of product"""
  quantity: String!

  """Entity code"""
  lotCode: String

  """Entity ID"""
  lotId: ID

  """Entity code"""
  stockStatusCode: String

  """Entity ID"""
  stockStatusId: ID

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String!

  """Entity's bin ID (foreign key)"""
  sourceBinId: ID

  """Entity code"""
  sourceBinCode: String

  """Entity ID"""
  destinationBinId: ID

  """Entity code"""
  destinationBinCode: String
}

type ViewHistoryFieldDiffOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewHistoryFieldDiff!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewLostAndFoundOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewLostAndFound!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type LayoutOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Layout!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewMapAisleOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewMapAisle!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewMapBinOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewMapBin!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type MapOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Map!]!

  """Fetch total count of records"""
  totalCount: Int!
}

"""Mobile configuration model"""
type MobileConfigurationModel {
  """Data payload from a barcode scan"""
  payload: JSONObject!
}

"""Mobile motd model"""
type MobileMotdModel {
  """Message of the day payload"""
  payload: JSONObject!
}

type ReplenishmentOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Replenishment!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ScheduledJobTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ScheduledJobType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ScheduledJobOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ScheduledJob!]!

  """Fetch total count of records"""
  totalCount: Int!
}

"""Aggregate index counts"""
type AggsResults {
  product: Int!
  area: Int!
  task: Int!
  bin: Int!
  delivery: Int!
  fulfillment: Int!
  license_plate: Int!
}

type DeliveryItemSearchResults {
  deliveryItem: String
  productCode: String
  erpPurchaseOrder: String
  erpPurchaseOrderItem: String
  productDescription: String
  lot: String
  supplierLot: String
  putawayStatus: String
  receiptStatus: String
}

type FulfillmentItemSearchResults {
  fulfillmentItem: String
  productCode: String
  productDescription: String
  lotCode: String
  erpSalesOrder: String
  erpSalesOrderItem: String
  pickStatus: String
  issueStatus: String
}

"""Task Search results"""
type TaskSearchResults {
  """Elasticsearch index name"""
  index: String

  """Entity code"""
  code: String

  """Entity ID"""
  id: ID

  """Due date"""
  dueDate: String

  """Created at date"""
  createdAt: String

  """Update at date"""
  updatedAt: String

  """Deleted at date"""
  deletedAt: String

  """Warehouse code"""
  warehouseCode: String

  """Entity's warehouse name"""
  warehouseName: String

  """Source License Plate code"""
  sourceLicensePlateCode: String

  """Destination license plate code"""
  destinationLicensePlateCode: String

  """Entity's team name"""
  teamName: String

  """Entity's team description"""
  teamDescription: String

  """Source bin code"""
  sourceBinCode: String

  """Destination bin code"""
  destinationBinCode: String

  """Product code"""
  productCode: String

  """Product entity belongs to"""
  productDescription: String

  """Source lot code associated with the entity"""
  sourcLotCode: String

  """Destination lot associated with the entity"""
  destinationLotCode: String

  """Task type code"""
  taskType: String

  """Task type label"""
  taskTypeLabel: String
  shipTo: String
  shipToName: String
  soldTo: String
  soldToName: String
  supplier: String
  supplierName: String
  supplierBusinessPartnerId: ID
  shipToBusinessPartnerId: ID
  soldToBusinessPartnerId: ID
  childrenTasks: [TaskSearchResults!]
}

type GlobalSearchResultWithAggs {
  hits: [GlobalSearchResults!]!
  aggs: AggsResults
  totalCount: Int
}

union GlobalSearchResults = ProductSearchResults | AreaSearchResults | EmptySearchResults | TaskSearchResults | BinSearchResults | DeliverySearchResults | FulfillmentSearchResults | LicensePlateSearchResults

"""Product Search results"""
type ProductSearchResults {
  code: String
  id: ID
  description: String
  type: String
  createdAt: String
  updatedAt: String
  erpUpdatedAt: String
  deletedAt: String
  status: String
  lotManaged: String
  index: String
}

"""Area Search results"""
type AreaSearchResults {
  code: String
  id: ID
  description: String
  type: String
  createdAt: String
  updatedAt: String
  deletedAt: String
  name: String
  warehouseCode: String
  storageLocation: String
  index: String
  status: String
}

"""Empty Search results"""
type EmptySearchResults {
  x: String
}

"""Bin Search results"""
type BinSearchResults {
  index: String
  id: ID
  createdAt: String
  updatedAt: String
  deletedAt: String
  code: String
  aisle: String
  column: String
  level: Int
  warehouseCode: String
  areaCode: String
  areaName: String
  areaDescription: String
  areaType: String
  lastMoved: String
}

"""Delivery Search results"""
type DeliverySearchResults {
  id: ID
  index: String
  createdAt: String
  updatedAt: String
  deletedAt: String
  dueDate: String
  billOfLading: String
  warehouseCode: String
  warehouseName: String
  supplier: String
  supplierName: String
  supplierBusinessPartnerId: ID
  erpCode: String
  erpPurchaseOrder: String
  erpSalesOrder: String
  shipTo: String
  shipToName: String
  shipToBusinessPartnerId: ID
  soldTo: String
  soldToName: String
  soldToBusinessPartnerId: ID
  goodsReceiptStatus: String
  putawayStatus: String
  deliveryStatus: String
  deliveryItems: [DeliveryItemSearchResults!]
}

"""Fulfillment Search results"""
type FulfillmentSearchResults {
  id: ID
  index: String
  createdAt: String
  updatedAt: String
  deletedAt: String
  dueDate: String
  erpCode: String
  erpPurchaseOrder: String
  erpSalesOrder: String
  billOfLading: String
  shipTo: String
  shipToName: String
  shipToBusinessPartnerId: ID
  soldTo: String
  soldToName: String
  soldToBusinessPartnerId: ID
  warehouseCode: String
  warehouseName: String
  fulfillmentStatus: String
  pickStatus: String
  goodsIssueStatus: String
  fulfillmentItems: [FulfillmentItemSearchResults!]
}

"""License Plate Search results"""
type LicensePlateSearchResults {
  id: ID
  index: String
  createdAt: String
  updatedAt: String
  deletedAt: String
  code: String
  description: String
  status: LicensePlateStatusState
}

type SlottingDatasetOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingDataset!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SlottingDatasetVariantPlantSlocWh {
  """SAP plants for an SAP variant"""
  plants: [String!]!

  """SAP storage locations for an SAP variant"""
  storageLocations: [String!]!

  """SAP Warehouses for an SAP variant"""
  warehouses: [String!]!
}

type SlottingDatasetVariants {
  """Name for SAP variant"""
  variants: [String!]!
}

type SlottingInventoryOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingInventory!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehouseRoleTypeQueryShapeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehouseRoleTypeQueryShape!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehouseRoleTypeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehouseRoleType!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewZoneAisleColumnOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewZoneAisleColumn!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewZoneAisleOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewZoneAisle!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewZoneAreaOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewZoneArea!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewZoneBinMappedOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewZoneBinMapped!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewZoneBinUnmappedOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewZoneBinUnmapped!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewZoneOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewZone!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ZoneOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Zone!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewSlottingRulesetOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewSlottingRuleset!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SlottingRulesetOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingRuleset!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type DatasetMaterialsOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [DatasetMaterials!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PlanogramBinMaterialsOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [PlanogramBinMaterials!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type RearrangementRecommendationOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [RearrangementRecommendation!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SlottingAbcAnalysisOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingAbcAnalysis!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SlottingRunOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingRun!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SlottingConfigurationOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingConfiguration!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SmartScanResource {
  """Suggestion of action to be carried out in a smart scan response"""
  action: String!

  """
  Metadata json object providing relevant data to carry out the provided action
  """
  metaData: [SmartScanMetaData!]!
}

type SmartScanMetaData {
  """Mobile view task record"""
  task: MobileViewTask

  """License Plate Detail view record"""
  licensePlate: LicensePlateDetail

  """Task type"""
  taskType: TaskType

  """Bin entity belongs to"""
  bin: Bin
}

type OrderedTaskGroupStep {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Task type code"""
  taskTypeCode: String!

  """Position in order within a task group"""
  stepNumber: Int!

  """Total number of steps within a task group"""
  totalSteps: Int!

  """Identifies if a task is being started or completed"""
  startOrFinish: StartOrFinish!
}

enum StartOrFinish {
  start
  finish
}

type OrderedTaskGroupResponse {
  """Task group with steps in recommended completion order"""
  orderedTaskGroupSteps: [OrderedTaskGroupStep!]!
}

type ApproveBinCountTaskQueryModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ApproveBinCountTaskQueryModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type CompleteBinPITaskResponseItem {
  """Entity ID"""
  licensePlateId: ID

  """Entity ID"""
  productId: ID

  """Entity ID"""
  lotId: ID

  """Entity ID"""
  stockStatusId: ID
  quantity: String

  """Entity ID"""
  unitOfMeasureId: ID

  """Entity ID"""
  deliveryItemId: ID

  """Entity ID"""
  fulfillmentItemId: ID
}

type CompleteBinPITaskResponseObject {
  """Expected Stock"""
  expected: [CompleteBinPITaskResponseItem!]!

  """Added Stock"""
  additions: [CompleteBinPITaskResponseItem!]!

  """Missing Stock"""
  missing: [CompleteBinPITaskResponseItem!]!
}

"""QueueJob model"""
type QueueJobModel {
  id: ID
  handler: String
  data: JSON
  jobType: String
  lastAttempt: DateTime
  createdAt: DateTime
  markedPreflight: DateTime
  nextAttempt: DateTime
  processingStarted: DateTime
  numResets: Int
  retries: Int
  status: JobStatus
}

enum JobStatus {
  preflight
  processing
  completed
  failed
  queued
}

type TaskCreatePickToStagingResourceDto {
  """Fulfillment items with a pick to staging task being created"""
  created: [FulfillmentItem!]!

  """
  Fulfillment items with no stock available to create pick to staging tasks
  """
  noStockFound: [FulfillmentItem!]!

  """Fulfillment items with a pick to staging that has already been created"""
  hasTask: [FulfillmentItem!]!
}

type BaseGraphqlErrorReturnType {
  message: String!
  type: ErrorType
  code: ErrorCodes
  action: String
  duration: Float
  log: String
  logType: LogType
}

enum ErrorType {
  NOT_FOUND
  UPDATE
  CREATE
  DELETE
  DESTROY
  READ
  DATABASE
  VALIDATION
  AUTHORIZATION
  SERVER_ERROR
  SAP_ERROR
  ANALYTICS_ERROR
}

enum LogType {
  AGENT_CONFIGURATION
  AISLE
  AISLE_COLUMN
  AREA
  ANALYTICS
  AUTH
  BARCODE
  BARCODE_PARSE
  BARCODE_MAPPING
  BARCODE_TEMPLATE
  BARCODE_TEMPLATE_MAPPING
  BIN_SIZE
  BUSINESS_PARTNER
  COMPANY
  CONTACT_INFO
  CONTRACT
  CONTRACT_RULE
  COUNT_ARTIFACT
  DELIVERY
  DISPLAY_PREFERENCES
  FULFILLMENT_BLOCK
  INVENTORY_BASE
  ANCHOR
  BIN_STATUS
  BIN_STATUS_MAPPING
  DOOR
  EFFECTIVE_CONTRACT_MAPPING
  EQUIPMENT
  FLOORPLAN
  GENERAL
  LAYOUT
  LICENSE_PLATE
  LICENSE_PLATE_STATUS
  LICENSE_PLATE_STATUS_MAPPING
  LOT
  MAP
  NODE
  NON_COMPLIANT_BARCODE
  ORGANIZATION
  PERMISSION
  PERMISSION_DIMENSION
  PRODUCT
  PTO_STOCK_STATUS_TYPE
  ROLE
  ROLE_PERMISSION_MAPPING
  TEAM
  TASK_TYPE_BIN_STATUS_MAPPING
  TASK_GROUP
  USER_ACCOUNT
  UNIT_OF_MEASURE
  STANDARD_UNIT_OF_MEASURE
  UNIT_OF_MEASURE_GLOSSARY
  USER_GROUP
  USER_GROUP_MAPPING
  USER_GROUP_ROLE_MAPPING
  USER_WAREHOUSE_DEFAULT
  WAREHOUSE_PREFERRED_UNIT_OF_MEASURE
  WAREHOUSE
  WAREHOUSE_USER_GROUP_MAPPING
  WAREHOUSE_PATH
  SLOTTING_RULESET
  SLOTTING_DATAFRAME
  SLOTTING_DATASET
  SLOTTING_SETTING
  SLOTTING_SETTING_ITEM
  STOCK_STATUS_TYPE
  STOCK_STATUS_MAPPING
  SYSTEM_CONNECTION
  BIN
  PRODUCT_MOVEMENT
  DELIVERY_ITEM
  FULFILLMENT
  DEAD_LETTER
  DEAD_LETTER_EVENT
  HISTORY_RECORD
  TASK_TYPE_STOCK_STATUS_MAPPING
  STORED_IMAGE
  DISPOSITION
  ZONE
  ZONE_RULE
  ZONE_RULE_MAPPING
  ZONE_BEHAVIOR_MAPPING
  INTERNAL_STOCK_ORDER
  INTERNAL_STOCK_ORDER_ITEM
  INTERNAL_STOCK_ORDER_TYPE
  INTERNAL_STOCK_ORDER_ITEM_FUFILLMENT_ITEM_MAPPING
  INVENTORY_RECONCILIATION
  INVOICE
  INVOICE_ITEM
  FULFILLMENT_ITEM_INTERNAL_STOCK_ORDER_RECORD
  TEST_LOG
  SCHEDULED_JOB
  DELIVERY_JOB
  TASK_FROM_FULFILLMENT
  TASK_GROUPING_JOB
  SCHEDULED_JOB_TYPE
  REDPOINT
  FULFILLMENT_ITEM
  INBOUND_DELIVERY_EVENT
  POSTGRES
  SCHEDULER
  EVENT_SERVICE
  TASK_EVENT
  TASK
  TASK_TYPE
  ADMIN_TASK
  ADMIN_TASK_TYPE
  PICK_TO_DOCK
  TASK_PICK_TO_STAGING
  TASK_LOAD
  USER_TEAM_MAPPING
  WAREHOUSE_OP
  WAREHOUSE_OP_FIELD_MAPPING
  WAREHOUSE_OP_JOB
  BUSINESS_PARTNER_COMPIANCE
  UPLOAD_ERROR
  SAP_CONNECTOR
  SAP_DELIVERY
  SAP_PHYSICAL_INVENTORY
  SAP_POSTGRES
  SAP_ODATA_CLIENT
  SAP_BATCH
  SAP_STOCK_STATUS_TYPE
  SAP_HU_USER_STATUS
  SAP_STORAGE_LOCATION_PLANT
  SAP_MATERIAL_MOVEMENT
  SAP_UNIT_OF_MEASURE
  SAP_DELIVERY_ITEM
  SAP_OUTBOUND_DELIVERY
  SAP_OUTBOUND_DELIVERY_ITEM
  SAP_BUSINESS_PARTNER
  SAP_SALES_ORDER
  SAP_SALES_ORDER_ITEM
  SAP_AUTH
  SAP_HU_STATUS
  SLOTTING_EXCLUSION
  SEARCH_QUEUE
  EWM_DELIVERY
  EWM_HU
  EWM_DELIVERY_HU_MAPPING
  EWM_WHS_TASK
  EWM_FIELD_MAPPING
  AUTHORIZATION
  ASN
  GCP_STORAGE
  WAREHOUSE_CONFIGURATION
  REPLENISHMENT
  UNHANDLED
  REDIS
  INTEGRATION_LOG
  SAP_DATA_INTEGRATION
}

type TaskValidationErrorModel {
  errors: [BaseGraphqlErrorReturnType!]
  valid: Boolean!
}

type SystemConnectionOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SystemConnection!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type PlanogramOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Planogram!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SapHuDetailsStockResponse {
  """Entity code"""
  productCode: String!

  """Entity code"""
  lotCode: String

  """Quantity of product"""
  quantity: String!

  """Entity code"""
  unitOfMeasureCode: String!

  """Entity code"""
  stockStatusCode: String!

  """Entity's label"""
  stockStatusLabel: String!
}

type SapHuDetailsResponse {
  """Sap bin code"""
  erpBinCode: String!

  """Entity's SAP storage location ID (foreign key)"""
  storageLocation: String!

  """Entity code"""
  licensePlateCode: String!
  stock: [SapHuDetailsStockResponse!]
}

type FulfilldLpErpConflictStockItemDto {
  productId: String!
  productCode: String!
  lotId: String
  lotCode: String
  stockStatusTypeId: String!
  stockStatusTypeCode: String!
  stockStatusTypeLabel: String!
  quantity: String!
  unitOfMeasureId: String!
  unitOfMeasureCode: String!

  """Entity code"""
  erpProductCode: String

  """Entity code"""
  erpLotCode: String

  """Quantity of product"""
  erpQuantity: String

  """Entity code"""
  erpUnitOfMeasureCode: String

  """Entity code"""
  erpStockStatusCode: String

  """Entity's label"""
  erpStockStatusLabel: String
}

type LpErpConflictResponseDto {
  licensePlateId: String
  licensePlateCode: String
  licensePlateStorageLocation: String
  binId: String
  binCode: String

  """Sap bin code"""
  ffErpBinMappingCode: String

  """Sap bin code"""
  erpBinCode: String

  """Entity's SAP storage location ID (foreign key)"""
  erpStorageLocation: String

  """Entity code"""
  erpHandlingUnitCode: String
  stock: [FulfilldLpErpConflictStockItemDto!]
}

type InventoryReconciliationMetaQueryModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InventoryReconciliationMetaQueryModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InventoryReconciliationQueryModelOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InventoryReconciliationQueryModel!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EdgeOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Edge!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ContractOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Contract!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ContractRuleOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ContractRule!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InvoiceOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [Invoice!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type InvoiceItemOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [InvoiceItem!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type EffectiveContractMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [EffectiveContractMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SlottingDataFrameOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingDataFrame!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SlottingExclusionOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SlottingExclusion!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type ViewSlottingExclusionOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [ViewSlottingExclusion!]!

  """Fetch total count of records"""
  totalCount: Int!
}

"""SAP material document header"""
type SapMaterialDocumentHeader {
  MaterialDocument: String!
}

"""SAP sales order"""
type SAPSalesOrder {
  SalesOrder: String!
  DistributionChannel: String!
  OrganizationDivision: String!
  SalesOrderType: String!
  SalesOrganization: String!
  SoldToParty: String!
}

"""SAP sales order item"""
type SAPSalesOrderItem {
  ReferenceSDDocument: String!
  ReferenceSDDocumentItem: String!
  RequestedQuantity: String!
  Material: String!
}

type SapLogicalBinMappingOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SapLogicalBinMapping!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type SapHUStatusOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [SapHUStatus!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehouseOpFileRowOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehouseOpFileRow!]!

  """Fetch total count of records"""
  totalCount: Int!
}

type WarehouseOpFileOffsetConnection {
  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Array of nodes."""
  nodes: [WarehouseOpFile!]!

  """Fetch total count of records"""
  totalCount: Int!
}

input ContractRuleConditionInput {
  """Data source(table or query) for the contract rule"""
  dataSource: String!

  """Field in the data source for the contract rule"""
  dataSourceField: String!

  """
  Operator applied to the field and value of a data source for a contract rule
  """
  operator: String!

  """
  Value of the data source field to apply the operator towards for a contract rule
  """
  dataSourceValue: String!
}

input WHMasterBusinessPartnerFieldConfigurationInput {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

input WHMasterBusinessPartnerFieldsConfigurationInput {
  name: WHMasterBusinessPartnerFieldConfigurationInput!
  type: WHMasterBusinessPartnerFieldConfigurationInput!
  searchTerm1: WHMasterBusinessPartnerFieldConfigurationInput!
  searchTerm2: WHMasterBusinessPartnerFieldConfigurationInput!
  customerCode: WHMasterBusinessPartnerFieldConfigurationInput!
  supplierCode: WHMasterBusinessPartnerFieldConfigurationInput!
  validityStart: WHMasterBusinessPartnerFieldConfigurationInput!
  validityEnd: WHMasterBusinessPartnerFieldConfigurationInput!
  addressTimezone: WHMasterBusinessPartnerFieldConfigurationInput!
  addressUUID: WHMasterBusinessPartnerFieldConfigurationInput!
  cityName: WHMasterBusinessPartnerFieldConfigurationInput!
  district: WHMasterBusinessPartnerFieldConfigurationInput!
  region: WHMasterBusinessPartnerFieldConfigurationInput!
  streetAddress: WHMasterBusinessPartnerFieldConfigurationInput!
  postalCode: WHMasterBusinessPartnerFieldConfigurationInput!
  country: WHMasterBusinessPartnerFieldConfigurationInput!
  language: WHMasterBusinessPartnerFieldConfigurationInput!
  defaultPhoneNumber: WHMasterBusinessPartnerFieldConfigurationInput!
  phoneNumber: WHMasterBusinessPartnerFieldConfigurationInput!
  email: WHMasterBusinessPartnerFieldConfigurationInput!
}

input WHMasterBusinessPartnerConfigurationInput {
  enabled: Boolean!
  fields: WHMasterBusinessPartnerFieldsConfigurationInput!
}

input WHBusinessPartnerConfigurationInput {
  master: WHMasterBusinessPartnerConfigurationInput!
}

input WHAsnDeliveryItemFieldConfigurationInput {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

input WHAsnDeliveryItemFieldsConfigurationInput {
  actualRecievedQuantity: WHAsnDeliveryItemFieldConfigurationInput!
  uom: WHAsnDeliveryItemFieldConfigurationInput!
  supplierLot: WHAsnDeliveryItemFieldConfigurationInput!
  erpCreated: WHAsnDeliveryItemFieldConfigurationInput!
  description: WHAsnDeliveryItemFieldConfigurationInput!
  deliveryItem: WHAsnDeliveryItemFieldConfigurationInput!
  receiptStatus: WHAsnDeliveryItemFieldConfigurationInput!
  grossWeight: WHAsnDeliveryItemFieldConfigurationInput!
  netWeight: WHAsnDeliveryItemFieldConfigurationInput!
  volume: WHAsnDeliveryItemFieldConfigurationInput!
  volumeUom: WHAsnDeliveryItemFieldConfigurationInput!
  weightUom: WHAsnDeliveryItemFieldConfigurationInput!
  erpLastChanged: WHAsnDeliveryItemFieldConfigurationInput!
  erpPurchaseOrder: WHAsnDeliveryItemFieldConfigurationInput!
  erpPurchaseOrderItem: WHAsnDeliveryItemFieldConfigurationInput!
  putawayStatus: WHAsnDeliveryItemFieldConfigurationInput!
  unloadStatus: WHAsnDeliveryItemFieldConfigurationInput!
  lotCode: WHAsnDeliveryItemFieldConfigurationInput!
  stockStatusTypeCode: WHAsnDeliveryItemFieldConfigurationInput!
  licensePlateCode: WHAsnDeliveryItemFieldConfigurationInput!
  productCode: WHAsnDeliveryItemFieldConfigurationInput!
  isBaseUoM: WHAsnDeliveryItemFieldConfigurationInput!
  uomConversionFactor: WHAsnDeliveryItemFieldConfigurationInput!
}

input WHAsnDeliveryItemConfigurationInput {
  plannedStockBinCode: String!
  enabled: Boolean!
  fields: WHAsnDeliveryItemFieldsConfigurationInput!
}

input WHDeliveryItemConfigurationInput {
  asn: WHAsnDeliveryItemConfigurationInput!
}

input WHAsnDeliveryFieldConfigurationInput {
  required: Boolean!
  mappingName: String
}

input WHAsnDeliveryFieldsConfigurationInput {
  blockStatus: WHAsnDeliveryFieldConfigurationInput!
  billOfLading: WHAsnDeliveryFieldConfigurationInput!
  category: WHAsnDeliveryFieldConfigurationInput!
  deliveryStatus: WHAsnDeliveryFieldConfigurationInput!
  doorCode: WHAsnDeliveryFieldConfigurationInput!
  dueDate: WHAsnDeliveryFieldConfigurationInput!
  erpBlockingReason: WHAsnDeliveryFieldConfigurationInput!
  erpCreated: WHAsnDeliveryFieldConfigurationInput!
  erpLastChanged: WHAsnDeliveryFieldConfigurationInput!
  erpPurchaseOrder: WHAsnDeliveryFieldConfigurationInput!
  erpSalesOrder: WHAsnDeliveryFieldConfigurationInput!
  export: WHAsnDeliveryFieldConfigurationInput!
  fulfillmentBlockCode: WHAsnDeliveryFieldConfigurationInput!
  goodsReceiptOrIssueStatus: WHAsnDeliveryFieldConfigurationInput!
  loadOrUnloadStatus: WHAsnDeliveryFieldConfigurationInput!
  pickOrPutawayStatus: WHAsnDeliveryFieldConfigurationInput!
  pointOfContact: WHAsnDeliveryFieldConfigurationInput!
  promiseDate: WHAsnDeliveryFieldConfigurationInput!
  shipReadyDate: WHAsnDeliveryFieldConfigurationInput!
  shipTo: WHAsnDeliveryFieldConfigurationInput!
  shipToName: WHAsnDeliveryFieldConfigurationInput!
  soldTo: WHAsnDeliveryFieldConfigurationInput!
  soldToName: WHAsnDeliveryFieldConfigurationInput!
  supplier: WHAsnDeliveryFieldConfigurationInput!
  supplierName: WHAsnDeliveryFieldConfigurationInput!
  totalGrossWeight: WHAsnDeliveryFieldConfigurationInput!
  totalNetWeight: WHAsnDeliveryFieldConfigurationInput!
  totalVolume: WHAsnDeliveryFieldConfigurationInput!
  totalVolumeUom: WHAsnDeliveryFieldConfigurationInput!
  totalWeightUom: WHAsnDeliveryFieldConfigurationInput!
  supplierBusinessPartnerCode: WHAsnDeliveryFieldConfigurationInput!
}

input WHAsnDeliveryConfigurationInput {
  createUnloadTasks: Boolean!
  createPutawayTasks: Boolean!
  enabled: Boolean!
  fields: WHAsnDeliveryFieldsConfigurationInput!
}

input WHDeliveryConfigurationInput {
  etaDateOffset: Int
  asn: WHAsnDeliveryConfigurationInput!
}

input WHSoFulfillmentItemFieldConfigurationInput {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

input WHSoFulfillmentItemFieldsConfigurationInput {
  issueStatus: WHSoFulfillmentItemFieldConfigurationInput!
  uom: WHSoFulfillmentItemFieldConfigurationInput!
  lotCode: WHSoFulfillmentItemFieldConfigurationInput!
  description: WHSoFulfillmentItemFieldConfigurationInput!
  fulfillmentItem: WHSoFulfillmentItemFieldConfigurationInput!
  grossWeight: WHSoFulfillmentItemFieldConfigurationInput!
  netWeight: WHSoFulfillmentItemFieldConfigurationInput!
  volume: WHSoFulfillmentItemFieldConfigurationInput!
  volumeUom: WHSoFulfillmentItemFieldConfigurationInput!
  weightUom: WHSoFulfillmentItemFieldConfigurationInput!
  erpLastChanged: WHSoFulfillmentItemFieldConfigurationInput!
  productCode: WHSoFulfillmentItemFieldConfigurationInput!
  customerProductCode: WHSoFulfillmentItemFieldConfigurationInput!
  dateMaterialAvailable: WHSoFulfillmentItemFieldConfigurationInput!
  erpSalesOrder: WHSoFulfillmentItemFieldConfigurationInput!
  erpSalesOrderItem: WHSoFulfillmentItemFieldConfigurationInput!
  pickStatus: WHSoFulfillmentItemFieldConfigurationInput!
  loadStatus: WHSoFulfillmentItemFieldConfigurationInput!
  stockStatusTypeCode: WHSoFulfillmentItemFieldConfigurationInput!
}

input WHSoFulfillmentItemConfigurationInput {
  enabled: Boolean!
  fields: WHSoFulfillmentItemFieldsConfigurationInput!
}

input WHFulfillmentItemConfigurationInput {
  so: WHSoFulfillmentItemConfigurationInput!
}

input WHSoFulfillmentFieldConfigurationInput {
  required: Boolean!
  mappingName: String
}

input WHSoFulfillmentFieldsConfigurationInput {
  blockStatus: WHSoFulfillmentFieldConfigurationInput!
  category: WHSoFulfillmentFieldConfigurationInput!
  deliveryStatus: WHSoFulfillmentFieldConfigurationInput!
  doorCode: WHSoFulfillmentFieldConfigurationInput!
  dueDate: WHSoFulfillmentFieldConfigurationInput!
  erpBlockingReason: WHSoFulfillmentFieldConfigurationInput!
  erpCreated: WHSoFulfillmentFieldConfigurationInput!
  erpLastChanged: WHSoFulfillmentFieldConfigurationInput!
  erpPurchaseOrder: WHSoFulfillmentFieldConfigurationInput!
  erpSalesOrder: WHSoFulfillmentFieldConfigurationInput!
  export: WHSoFulfillmentFieldConfigurationInput!
  fulfillmentBlockCode: WHSoFulfillmentFieldConfigurationInput!
  goodsReceiptOrIssueStatus: WHSoFulfillmentFieldConfigurationInput!
  loadOrUnloadStatus: WHSoFulfillmentFieldConfigurationInput!
  pickOrPutawayStatus: WHSoFulfillmentFieldConfigurationInput!
  pointOfContact: WHSoFulfillmentFieldConfigurationInput!
  promiseDate: WHSoFulfillmentFieldConfigurationInput!
  shipReadyDate: WHSoFulfillmentFieldConfigurationInput!
  shipTo: WHSoFulfillmentFieldConfigurationInput!
  shipToName: WHSoFulfillmentFieldConfigurationInput!
  soldTo: WHSoFulfillmentFieldConfigurationInput!
  soldToName: WHSoFulfillmentFieldConfigurationInput!
  supplier: WHSoFulfillmentFieldConfigurationInput!
  supplierName: WHSoFulfillmentFieldConfigurationInput!
  totalGrossWeight: WHSoFulfillmentFieldConfigurationInput!
  totalNetWeight: WHSoFulfillmentFieldConfigurationInput!
  totalVolume: WHSoFulfillmentFieldConfigurationInput!
  totalVolumeUom: WHSoFulfillmentFieldConfigurationInput!
  totalWeightUom: WHSoFulfillmentFieldConfigurationInput!
  shipToBusinessPartnerCode: WHSoFulfillmentFieldConfigurationInput!
  soldToBusinessPartnerCode: WHSoFulfillmentFieldConfigurationInput!
}

input WHSoFulfillmentConfigurationInput {
  enabled: Boolean!
  fields: WHSoFulfillmentFieldsConfigurationInput!
}

input WHFulfillmentConfigurationInput {
  so: WHSoFulfillmentConfigurationInput!
}

input WHHookConfigOptionsInput {
  async: Boolean
  on: Boolean
}

input WHDeliveryHookConfigInput {
  delivery_pgi: WHHookConfigOptionsInput
  task_binToBin: WHHookConfigOptionsInput
  task_putaway: WHHookConfigOptionsInput
  task_pick: WHHookConfigOptionsInput
}

input WHMasterProductFieldConfigurationInput {
  required: Boolean!
  mappingName: String
  create: Boolean!
}

input WHMasterProductFieldsConfigurationInput {
  name: WHMasterProductFieldConfigurationInput!
  description: WHMasterProductFieldConfigurationInput!
  lotManaged: WHMasterProductFieldConfigurationInput!
  weight: WHMasterProductFieldConfigurationInput!
  weightUnitOfMeasure: WHMasterProductFieldConfigurationInput!
  length: WHMasterProductFieldConfigurationInput!
  width: WHMasterProductFieldConfigurationInput!
  height: WHMasterProductFieldConfigurationInput!
  dimensionUnitOfMeasure: WHMasterProductFieldConfigurationInput!
}

input WHMasterProductConfigurationInput {
  enabled: Boolean!
  fields: WHMasterProductFieldsConfigurationInput!
}

input WHProductConfigurationInput {
  master: WHMasterProductConfigurationInput!
}

input WHTaskDeliveryConfigurationInput {
  putawaySteps: DeliveryTaskSteps
}

input WHTaskFulfillmentConfigurationInput {
  pickSteps: DeliveryTaskSteps
}

input WHTaskGroupingConfigurationInput {
  maxTaskGroupSize: Int
}

input WHConfigCountApprovalTaskInput {
  enabled: Boolean
  enabledForStockStatus: [String!]
}

input WHConfigBinCountTaskInput {
  countTypes: [PhysicalInventoryCountType!]
  invalidStockStatus: [String!]
}

input WHTaskConfigurationInput {
  delivery: WHTaskDeliveryConfigurationInput
  fulfillment: WHTaskFulfillmentConfigurationInput
  grouping: WHTaskGroupingConfigurationInput
  inventoryBinCount: WHConfigBinCountTaskInput
  inventoryCountApproval: WHConfigCountApprovalTaskInput
}

input WHMasterUnitOfMeasureConfigurationInput {
  enabled: Boolean!
}

input WHUnitOfMeasureConfigurationInput {
  master: WHMasterUnitOfMeasureConfigurationInput!
}

input WHConfigurationInput {
  erp: ERPOptions
  task: WHTaskConfigurationInput
  product: WHProductConfigurationInput
  unitOfMeasure: WHUnitOfMeasureConfigurationInput
  businessPartner: WHBusinessPartnerConfigurationInput
  delivery: WHDeliveryConfigurationInput
  deliveryItem: WHDeliveryItemConfigurationInput
  fulfillment: WHFulfillmentConfigurationInput
  fulfillmentItem: WHFulfillmentItemConfigurationInput
  hooks: WHDeliveryHookConfigInput
}

type Query {
  userGroups(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: UserGroupFilter = {}

    """Specify to sort results."""
    sorting: [UserGroupSort!] = []
  ): UserGroupOffsetConnection!
  viewUserGroups(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewUserGroupFilter = {}

    """Specify to sort results."""
    sorting: [ViewUserGroupSort!] = []
  ): ViewUserGroupOffsetConnection!
  userGroupMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: UserGroupMappingFilter = {}

    """Specify to sort results."""
    sorting: [UserGroupMappingSort!] = []
  ): UserGroupMappingOffsetConnection!
  roles(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: RoleFilter = {}

    """Specify to sort results."""
    sorting: [RoleSort!] = []
  ): RoleOffsetConnection!
  role(
    """The id of the record to find."""
    id: ID!
  ): Role!
  permissions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: PermissionFilter = {}

    """Specify to sort results."""
    sorting: [PermissionSort!] = []
  ): PermissionOffsetConnection!
  warehouses(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehouseFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseSort!] = []
  ): WarehouseOffsetConnection!
  warehouse(
    """Entity ID"""
    id: ID!
  ): Warehouse!
  contactInfos(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: ContactInfoFilter = {}

    """Specify to sort results."""
    sorting: [ContactInfoSort!] = []
  ): ContactInfoOffsetConnection!
  contactInfo(
    """Entity ID"""
    id: ID!
  ): ContactInfo!
  organizations(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: OrganizationFilter = {}

    """Specify to sort results."""
    sorting: [OrganizationSort!] = []
  ): OrganizationOffsetConnection!
  organization(
    """Entity ID"""
    id: ID!
  ): Organization!
  companies(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: CompanyFilter = {}

    """Specify to sort results."""
    sorting: [CompanySort!] = []
  ): CompanyOffsetConnection!
  company(
    """Entity ID"""
    id: ID!
  ): Company!
  displayPreferences(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DisplayPreferenceFilter = {}

    """Specify to sort results."""
    sorting: [DisplayPreferenceSort!] = []
  ): DisplayPreferenceOffsetConnection!
  displayPreference(
    """Entity ID"""
    id: ID!
  ): DisplayPreference!

  """Get warehouse mapping data by shipping point"""
  getSapWarehouseMapping: [SapWarehouseMapping!]!

  """Get warehouse mapping data by warehouse ID"""
  sapWarehousePlantMappings(warehouseId: ID!): [SapWarehouseMapping!]!
  userWarehouseDefaults(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: UserWarehouseDefaultFilter = {}

    """Specify to sort results."""
    sorting: [UserWarehouseDefaultSort!] = []
  ): UserWarehouseDefaultOffsetConnection!
  userWarehouseDefault(
    """Entity ID"""
    id: ID!
  ): UserWarehouseDefault!
  teams(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: TeamFilter = {}

    """Specify to sort results."""
    sorting: [TeamSort!] = []
  ): TeamOffsetConnection!
  team(
    """Entity ID"""
    id: ID!
  ): Team!
  viewTeams(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewTeamFilter = {}

    """Specify to sort results."""
    sorting: [ViewTeamSort!] = []
  ): ViewTeamOffsetConnection!
  viewTeam(
    """Entity ID"""
    id: ID!
  ): ViewTeam!
  userTeamMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: UserTeamMappingFilter = {}

    """Specify to sort results."""
    sorting: [UserTeamMappingSort!] = []
  ): UserTeamMappingOffsetConnection!
  userTeamMapping(
    """Entity ID"""
    id: ID!
  ): UserTeamMapping!
  ewmDeliveryFromScan(
    """Entity ID"""
    companyId: ID

    """Barcode scanner type"""
    scanner: BarcodeScanner!

    """Data payload from a barcode scan"""
    payload: JSONObject!
  ): EwmDelivery!
  ewmDeliveryFromDetails(
    """Data value"""
    input: String!

    """Data detail option"""
    type: EwmDeliveryDetailOption!
  ): EwmDelivery!
  barcodes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: BarcodeFilter = {}

    """Specify to sort results."""
    sorting: [BarcodeSort!] = []
  ): BarcodeOffsetConnection!
  barcode(
    """Entity ID"""
    id: ID!
  ): Barcode!
  allBarcodeEntities: [AllBarcodeEntities!]!
  viewBarcodes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewBarcodeFilter = {}

    """Specify to sort results."""
    sorting: [ViewBarcodeSort!] = []
  ): ViewBarcodeOffsetConnection!
  barcodeMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: BarcodeMappingFilter = {}

    """Specify to sort results."""
    sorting: [BarcodeMappingSort!] = []
  ): BarcodeMappingOffsetConnection!
  barcodeMapping(
    """Entity ID"""
    id: ID!
  ): BarcodeMapping!
  userInfo: User!
  users(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserOffsetConnection!
  user(
    """Entity ID"""
    id: ID!
  ): User!
  viewUsers(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewUserFilter = {}

    """Specify to sort results."""
    sorting: [ViewUserSort!] = []
  ): ViewUserOffsetConnection!
  nonCompliantBarcodes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: NonCompliantBarcodeFilter = {}

    """Specify to sort results."""
    sorting: [NonCompliantBarcodeSort!] = []
  ): NonCompliantBarcodeOffsetConnection!
  ewmWarehouseTasks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: EwmWarehouseTaskFilter = {}

    """Specify to sort results."""
    sorting: [EwmWarehouseTaskSort!] = []
  ): EwmWarehouseTaskOffsetConnection!
  ewmWarehouseOrders(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000}

    """Specify to filter the records returned."""
    filter: EwmWarehouseOrderFilter = {}

    """Specify to sort results."""
    sorting: [EwmWarehouseOrderSort!] = []
  ): EwmWarehouseOrderOffsetConnection!
  adminTaskType(
    """Entity ID"""
    id: ID!
  ): AdminTaskType!

  """Get all agent configurations"""
  agentConfigurations: ProxyConfig!
  aisleColumns(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: AisleColumnFilter = {}

    """Specify to sort results."""
    sorting: [AisleColumnSort!] = []
  ): AisleColumnOffsetConnection!
  aisleColumn(
    """Entity ID"""
    id: ID!
  ): AisleColumn!
  aisles(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: AisleFilter = {}

    """Specify to sort results."""
    sorting: [AisleSort!] = []
  ): AisleOffsetConnection!
  aisle(
    """Entity ID"""
    id: ID!
  ): Aisle!
  areas(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: AreaFilter = {}

    """Specify to sort results."""
    sorting: [AreaSort!] = []
  ): AreaOffsetConnection!
  area(
    """Entity ID"""
    id: ID!
  ): Area!
  randomStorageAreaForWarehouse(warehouseId: ID!): Area!
  viewAreas(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewAreaFilter = {}

    """Specify to sort results."""
    sorting: [ViewAreaSort!] = []
  ): ViewAreaOffsetConnection!
  sapStorageLocationPlants(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SapStorageLocationPlantFilter = {}

    """Specify to sort results."""
    sorting: [SapStorageLocationPlantSort!] = []
  ): SapStorageLocationPlantOffsetConnection!
  sapStorageLocationPlant(
    """Entity ID"""
    id: ID!
  ): SapStorageLocationPlant!
  userPermissions(warehouseId: ID!): [UserPermissionsResponseDto!]!
  permittedWarehouses: [UserPermittedWarehousesResponseDto!]!
  sapSSOEnabled: Boolean!
  barcodeTemplateMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: BarcodeTemplateMappingFilter = {}

    """Specify to sort results."""
    sorting: [BarcodeTemplateMappingSort!] = []
  ): BarcodeTemplateMappingOffsetConnection!
  barcodeTemplateMapping(
    """Entity ID"""
    id: ID!
  ): BarcodeTemplateMapping!
  barcodeTemplates(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: BarcodeTemplateFilter = {}

    """Specify to sort results."""
    sorting: [BarcodeTemplateSort!] = []
  ): BarcodeTemplateOffsetConnection!
  barcodeTemplate(
    """Entity ID"""
    id: ID!
  ): BarcodeTemplate!
  bins(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: BinFilter = {}

    """Specify to sort results."""
    sorting: [BinSort!] = []
  ): BinOffsetConnection!
  binsTest(limit: Int!): [String!]!
  bin(
    """Entity ID"""
    id: ID!
  ): Bin!
  randomBin(warehouseId: ID!): Bin!
  randomBinFromArea(areaId: ID!): Bin!
  viewBins(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewBinFilter = {}

    """Specify to sort results."""
    sorting: [ViewBinSort!] = []
  ): ViewBinOffsetConnection!
  viewBinSizes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewBinSizeFilter = {}

    """Specify to sort results."""
    sorting: [ViewBinSizeSort!] = []
  ): ViewBinSizeOffsetConnection!
  binSizes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: BinSizeFilter = {}

    """Specify to sort results."""
    sorting: [BinSizeSort!] = []
  ): BinSizeOffsetConnection!
  binSize(
    """Entity ID"""
    id: ID!
  ): BinSize!
  unitOfMeasureGlossaries(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: UnitOfMeasureGlossaryFilter = {}

    """Specify to sort results."""
    sorting: [UnitOfMeasureGlossarySort!] = []
  ): UnitOfMeasureGlossaryOffsetConnection!
  unitOfMeasureGlossary(
    """Entity ID"""
    id: ID!
  ): UnitOfMeasureGlossary!
  unitOfMeasureWarehousePreference(warehouseId: ID!, category: StandardUOMCategory!): [UnitOfMeasureGlossary!]!
  vertices(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: VertexFilter = {}

    """Specify to sort results."""
    sorting: [VertexSort!] = []
  ): VertexOffsetConnection!
  vertex(
    """Entity ID"""
    id: ID!
  ): Vertex!
  binStatusMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: BinStatusMappingFilter = {}

    """Specify to sort results."""
    sorting: [BinStatusMappingSort!] = []
  ): BinStatusMappingOffsetConnection!
  binStatusMapping(
    """Entity ID"""
    id: ID!
  ): BinStatusMapping!
  binStatuses(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: BinStatusFilter = {}

    """Specify to sort results."""
    sorting: [BinStatusSort!] = []
  ): BinStatusOffsetConnection!
  binStatus(
    """Entity ID"""
    id: ID!
  ): BinStatus!
  businessPartners(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10000000}

    """Specify to filter the records returned."""
    filter: BusinessPartnerFilter = {}

    """Specify to sort results."""
    sorting: [BusinessPartnerSort!] = []
  ): BusinessPartnerOffsetConnection!
  businessPartner(
    """Entity ID"""
    id: ID!
  ): BusinessPartner!
  contracts(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ContractFilter = {}

    """Specify to sort results."""
    sorting: [ContractSort!] = []
  ): ContractOffsetConnection!
  contract(
    """Entity ID"""
    id: ID!
  ): Contract!
  contractRules(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ContractRuleFilter = {}

    """Specify to sort results."""
    sorting: [ContractRuleSort!] = []
  ): ContractRuleOffsetConnection!
  contractRule(
    """Entity ID"""
    id: ID!
  ): ContractRule!
  viewCountArtifacts(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: CountArtifactQueryModelFilter = {}

    """Specify to sort results."""
    sorting: [CountArtifactQueryModelSort!] = []
  ): CountArtifactQueryModelOffsetConnection!
  licensePlateDetails(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LicensePlateDetailFilter = {}

    """Specify to sort results."""
    sorting: [LicensePlateDetailSort!] = []
  ): LicensePlateDetailOffsetConnection!
  licensePlateDetailsAllBins(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LicensePlateDetailFilter = {}

    """Specify to sort results."""
    sorting: [LicensePlateDetailSort!] = []
  ): LicensePlateDetailOffsetConnection!
  licensePlates(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LicensePlateFilter = {}

    """Specify to sort results."""
    sorting: [LicensePlateSort!] = []
  ): LicensePlateOffsetConnection!
  licensePlate(
    """Entity ID"""
    id: ID!
  ): LicensePlate!
  licensePlateInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LicensePlateDetailQueryModelFilter = {}

    """Specify to sort results."""
    sorting: [LicensePlateDetailQueryModelSort!] = []
  ): LicensePlateDetailQueryModelOffsetConnection!
  licensePlateInventoryAll(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LicensePlateDetailQueryModelFilter = {}

    """Specify to sort results."""
    sorting: [LicensePlateDetailQueryModelSort!] = []
  ): LicensePlateDetailQueryModelOffsetConnection!
  licensePlateStatusMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LicensePlateStatusMappingFilter = {}

    """Specify to sort results."""
    sorting: [LicensePlateStatusMappingSort!] = []
  ): LicensePlateStatusMappingOffsetConnection!
  licensePlateStatusMapping(
    """Entity ID"""
    id: ID!
  ): LicensePlateStatusMapping!
  licensePlateStatuses(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: LicensePlateStatusFilter = {}

    """Specify to sort results."""
    sorting: [LicensePlateStatusSort!] = []
  ): LicensePlateStatusOffsetConnection!
  licensePlateStatus(
    """Entity ID"""
    id: ID!
  ): LicensePlateStatus!
  tasks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: TaskFilter = {}

    """Specify to sort results."""
    sorting: [TaskSort!] = []
  ): TaskOffsetConnection!
  task(
    """Entity ID"""
    id: ID!
  ): Task!
  getTaskTypeAnalytics(filter: TaskTypeAnalyticsFilter!): TaskTypeAnalyticsResponse!
  viewTasks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewTaskFilter = {}

    """Specify to sort results."""
    sorting: [ViewTaskSort!] = []
  ): ViewTaskOffsetConnection!
  viewTasksForTeam(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewTaskFilter = {}

    """Specify to sort results."""
    sorting: [ViewTaskSort!] = []
    teamId: ID!
  ): ViewTaskOffsetConnection!
  isTaskAssignedToTeam(taskId: ID!, teamId: ID!): Boolean!
  mobileViewTasks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: MobileViewTaskFilter = {}

    """Specify to sort results."""
    sorting: [MobileViewTaskSort!] = []
  ): MobileViewTaskOffsetConnection!
  taskTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: TaskTypeFilter = {}

    """Specify to sort results."""
    sorting: [TaskTypeSort!] = []
  ): TaskTypeOffsetConnection!
  taskType(
    """Entity ID"""
    id: ID!
  ): TaskType!
  viewTaskTypeStockStatusMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewTaskTypeStockStatusMappingFilter = {}

    """Specify to sort results."""
    sorting: [ViewTaskTypeStockStatusMappingSort!] = []
  ): ViewTaskTypeStockStatusMappingOffsetConnection!
  stockStatusTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: StockStatusTypeFilter = {}

    """Specify to sort results."""
    sorting: [StockStatusTypeSort!] = []
  ): StockStatusTypeOffsetConnection!
  stockStatusType(
    """Entity ID"""
    id: ID!
  ): StockStatusType!
  readByCode(code: String!): StockStatusType!
  viewStockStatuses(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewStockStatusFilter = {}

    """Specify to sort results."""
    sorting: [ViewStockStatusSort!] = []
  ): ViewStockStatusOffsetConnection!
  sapStockStatusTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SapStockStatusTypeFilter = {}

    """Specify to sort results."""
    sorting: [SapStockStatusTypeSort!] = []
  ): SapStockStatusTypeOffsetConnection!
  sapStockStatusType(
    """Entity ID"""
    id: ID!
  ): SapStockStatusType!
  sapStockStatusByCode(code: String!): SapStockStatusType!
  sapHuUserStatuss(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SapHuUserStatusFilter = {}

    """Specify to sort results."""
    sorting: [SapHuUserStatusSort!] = []
  ): SapHuUserStatusOffsetConnection!
  sapHuUserStatus(
    """Entity ID"""
    id: ID!
  ): SapHuUserStatus!
  unitOfMeasureProductConversions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: UnitOfMeasureProductConversionFilter = {}

    """Specify to sort results."""
    sorting: [UnitOfMeasureProductConversionSort!] = []
  ): UnitOfMeasureProductConversionOffsetConnection!
  unitOfMeasureProductConversion(
    """Entity ID"""
    id: ID!
  ): UnitOfMeasureProductConversion!
  convertQuantityToAllUoM(quantity: String!, unitOfMeasureId: ID!): UnitOfMeasureConversionResource!
  viewUnitOfMeasureProductConversions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewUnitOfMeasureProductConversionFilter = {}

    """Specify to sort results."""
    sorting: [ViewUnitOfMeasureProductConversionSort!] = []
  ): ViewUnitOfMeasureProductConversionOffsetConnection!
  baseInventoryAll(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InventoryBaseQueryShapeFilter = {}

    """Specify to sort results."""
    sorting: [InventoryBaseQueryShapeSort!] = []
  ): InventoryBaseQueryShapeOffsetConnection!
  baseInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InventoryBaseQueryShapeFilter = {}

    """Specify to sort results."""
    sorting: [InventoryBaseQueryShapeSort!] = []
  ): InventoryBaseQueryShapeOffsetConnection!
  internalStockOrderAssignedInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InternalStockOrderAssignedInventoryFilter = {}

    """Specify to sort results."""
    sorting: [InternalStockOrderAssignedInventorySort!] = []
  ): InternalStockOrderAssignedInventoryOffsetConnection!
  sapDeliveryDocumentTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SapDeliveryDocumentTypeFilter = {}

    """Specify to sort results."""
    sorting: [SapDeliveryDocumentTypeSort!] = []
  ): SapDeliveryDocumentTypeOffsetConnection!
  sapDeliveryDocumentType(
    """Entity ID"""
    id: ID!
  ): SapDeliveryDocumentType!
  warehousePreferredUnitOfMeasures(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehousePreferredUnitOfMeasureFilter = {}

    """Specify to sort results."""
    sorting: [WarehousePreferredUnitOfMeasureSort!] = []
  ): WarehousePreferredUnitOfMeasureOffsetConnection!
  warehousePreferredUnitOfMeasure(
    """Entity ID"""
    id: ID!
  ): WarehousePreferredUnitOfMeasure!
  productInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InventoryProductQueryShapeFilter = {}

    """Specify to sort results."""
    sorting: [InventoryProductQueryShapeSort!] = []
  ): InventoryProductQueryShapeOffsetConnection!
  lotInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InventoryLotQueryShapeFilter = {}

    """Specify to sort results."""
    sorting: [InventoryLotQueryShapeSort!] = []
  ): InventoryLotQueryShapeOffsetConnection!

  """returns a list of valid destination bins by task type"""
  destinationBinsForTaskType(
    taskTypeCode: String
    taskTypeId: ID

    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: TaskTypeBinStatusBinsQueryDtoFilter = {}

    """Specify to sort results."""
    sorting: [TaskTypeBinStatusBinsQueryDtoSort!] = []
  ): TaskTypeBinStatusDestinationBins!

  """returns a list of valid bins by task type"""
  sourceBinsForTaskType(
    taskTypeCode: String
    taskTypeId: ID

    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: TaskTypeBinStatusBinsQueryDtoFilter = {}

    """Specify to sort results."""
    sorting: [TaskTypeBinStatusBinsQueryDtoSort!] = []
  ): TaskTypeBinStatusSourceBins!
  viewTaskTypeBinStatusMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewTaskTypeBinStatusMappingFilter = {}

    """Specify to sort results."""
    sorting: [ViewTaskTypeBinStatusMappingSort!] = []
  ): ViewTaskTypeBinStatusMappingOffsetConnection!
  taskGroups(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: TaskGroupFilter = {}

    """Specify to sort results."""
    sorting: [TaskGroupSort!] = []
  ): TaskGroupOffsetConnection!
  taskGroup(
    """Entity ID"""
    id: ID!
  ): TaskGroup!
  viewTaskGroups(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewTaskGroupFilter = {}

    """Specify to sort results."""
    sorting: [ViewTaskGroupSort!] = []
  ): ViewTaskGroupOffsetConnection!
  lots(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LotFilter = {}

    """Specify to sort results."""
    sorting: [LotSort!] = []
  ): LotOffsetConnection!
  lot(
    """Entity ID"""
    id: ID!
  ): Lot!
  viewLots(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewLotFilter = {}

    """Specify to sort results."""
    sorting: [ViewLotSort!] = []
  ): ViewLotOffsetConnection!
  products(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ProductFilter = {}

    """Specify to sort results."""
    sorting: [ProductSort!] = []
  ): ProductOffsetConnection!
  product(
    """Entity ID"""
    id: ID!
  ): Product!
  viewProducts(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ProductQueryShapeFilter = {}

    """Specify to sort results."""
    sorting: [ProductQueryShapeSort!] = []
  ): ProductQueryShapeOffsetConnection!
  internalStockOrders(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InternalStockOrderFilter = {}

    """Specify to sort results."""
    sorting: [InternalStockOrderSort!] = []
  ): InternalStockOrderOffsetConnection!
  internalStockOrder(
    """Entity ID"""
    id: ID!
  ): InternalStockOrder!
  internalStockOrderTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InternalStockOrderTypeFilter = {}

    """Specify to sort results."""
    sorting: [InternalStockOrderTypeSort!] = []
  ): InternalStockOrderTypeOffsetConnection!
  internalStockOrderType(
    """Entity ID"""
    id: ID!
  ): InternalStockOrderType!
  viewDeliveries(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewDeliveryFilter = {}

    """Specify to sort results."""
    sorting: [ViewDeliverySort!] = []
  ): ViewDeliveryOffsetConnection!
  viewDelivery(
    """Entity ID"""
    id: ID!
  ): ViewDelivery!
  deliveries(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DeliveryFilter = {}

    """Specify to sort results."""
    sorting: [DeliverySort!] = []
  ): DeliveryOffsetConnection!
  delivery(
    """Entity ID"""
    id: ID!
  ): Delivery!
  fulfillmentItems(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: FulfillmentItemFilter = {}

    """Specify to sort results."""
    sorting: [FulfillmentItemSort!] = []
  ): FulfillmentItemOffsetConnection!
  fulfillmentItem(
    """Entity ID"""
    id: ID!
  ): FulfillmentItem!
  getLpsForFulfillmentItem(warehouseId: String!, fulfillmentItemId: String!): [LpForFulfillmentItem!]!
  viewFulfillmentItems(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewFulfillmentItemFilter = {}

    """Specify to sort results."""
    sorting: [ViewFulfillmentItemSort!] = []
  ): ViewFulfillmentItemOffsetConnection!
  viewFulfillmentItem(
    """Entity ID"""
    id: ID!
  ): ViewFulfillmentItem!
  sapBinFFAreas(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SapBinFFAreaFilter = {}

    """Specify to sort results."""
    sorting: [SapBinFFAreaSort!] = []
  ): SapBinFFAreaOffsetConnection!
  sapBinFFArea(
    """Entity ID"""
    id: ID!
  ): SapBinFFArea!
  sapBinMappingsByBinId(binId: String!, warehouseId: String!): [SapBinFFArea!]!
  viewSapBinFFAreas(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewSapBinFFAreaFilter = {}

    """Specify to sort results."""
    sorting: [ViewSapBinFFAreaSort!] = []
  ): ViewSapBinFFAreaOffsetConnection!
  viewSapBinFFArea(
    """Entity ID"""
    id: ID!
  ): ViewSapBinFFArea!
  integrationLog(
    """Entity ID"""
    id: ID!
  ): IntegrationLog!
  integrationLogs(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: IntegrationLogFilter = {}

    """Specify to sort results."""
    sorting: [IntegrationLogSort!] = []
  ): IntegrationLogOffsetConnection!
  warehousePaths(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehousePathFilter = {}

    """Specify to sort results."""
    sorting: [WarehousePathSort!] = []
  ): WarehousePathOffsetConnection!
  warehousePath(
    """Entity ID"""
    id: ID!
  ): WarehousePath!
  getBinToBinWarehousePaths(
    """Entity ID"""
    sourceBinId: ID!

    """Entity ID"""
    destinationBinId: ID!

    """Entity code"""
    internalStockOrderTypeCode: String!
  ): [[String!]!]!
  viewWarehousePaths(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehousePathQueryModelFilter = {}

    """Specify to sort results."""
    sorting: [WarehousePathQueryModelSort!] = []
  ): WarehousePathQueryModelOffsetConnection!

  """
  Reads a delivery by provided delivery code.  If the delivery is not within the fulfilld system it is retrieved from SAP.
  """
  readDeliveryByDeliveryCode(deliveryCode: String!): Delivery!
  deliveryItemsToUnload(id: ID!): [DeliveryItemDetails!]!
  deliveryItemsToPutaway(id: ID!): [DeliveryItemDetails!]!
  viewDeliveryItems(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewDeliveryItemFilter = {}

    """Specify to sort results."""
    sorting: [ViewDeliveryItemSort!] = []
  ): ViewDeliveryItemOffsetConnection!
  viewDeliveryItem(
    """Entity ID"""
    id: ID!
  ): ViewDeliveryItem!
  deliveryItems(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to filter the records returned."""
    filter: DeliveryItemFilter = {}

    """Specify to sort results."""
    sorting: [DeliveryItemSort!] = []
  ): DeliveryItemOffsetConnection!
  deliveryItem(
    """Entity ID"""
    id: ID!
  ): DeliveryItem!
  doors(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: DoorFilter = {}

    """Specify to sort results."""
    sorting: [DoorSort!] = []
  ): DoorOffsetConnection!
  door(
    """Entity ID"""
    id: ID!
  ): Door!
  viewDoors(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewDoorFilter = {}

    """Specify to sort results."""
    sorting: [ViewDoorSort!] = []
  ): ViewDoorOffsetConnection!
  warehouseConfiguration(
    """Id of the entity you want to retrieve warehouse configuration for"""
    id: ID!
  ): WarehouseConfiguration!
  dispositions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: DispositionFilter = {}

    """Specify to sort results."""
    sorting: [DispositionSort!] = []
  ): DispositionOffsetConnection!
  disposition(
    """Entity ID"""
    id: ID!
  ): Disposition!
  edges(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: EdgeFilter = {}

    """Specify to sort results."""
    sorting: [EdgeSort!] = []
  ): EdgeOffsetConnection!
  edge(
    """Entity ID"""
    id: ID!
  ): Edge!
  effectiveContractMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: EffectiveContractMappingFilter = {}

    """Specify to sort results."""
    sorting: [EffectiveContractMappingSort!] = []
  ): EffectiveContractMappingOffsetConnection!
  effectiveContractMapping(
    """Entity ID"""
    id: ID!
  ): EffectiveContractMapping!
  equipmentItems(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: EquipmentItemFilter = {}

    """Specify to sort results."""
    sorting: [EquipmentItemSort!] = []
  ): EquipmentItemOffsetConnection!
  equipmentItem(
    """Entity ID"""
    id: ID!
  ): EquipmentItem!
  viewEquipments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewEquipmentFilter = {}

    """Specify to sort results."""
    sorting: [ViewEquipmentSort!] = []
  ): ViewEquipmentOffsetConnection!
  equipmentType(
    """Entity ID"""
    id: ID!
  ): EquipmentType!
  equipmentTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: EquipmentTypeFilter = {}

    """Specify to sort results."""
    sorting: [EquipmentTypeSort!] = []
  ): EquipmentTypeOffsetConnection!
  viewEquipmentTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: EquipmentTypeQueryShapeFilter = {}

    """Specify to sort results."""
    sorting: [EquipmentTypeQueryShapeSort!] = []
  ): EquipmentTypeQueryShapeOffsetConnection!
  equipmentModels(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: EquipmentModelFilter = {}

    """Specify to sort results."""
    sorting: [EquipmentModelSort!] = []
  ): EquipmentModelOffsetConnection!
  equipmentModel(
    """Entity ID"""
    id: ID!
  ): EquipmentModel!
  viewEquipmentModels(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewEquipmentModelFilter = {}

    """Specify to sort results."""
    sorting: [ViewEquipmentModelSort!] = []
  ): ViewEquipmentModelOffsetConnection!

  """
  Reads a fulfillment by provided delivery code.  If the fulfillment is not within the fulfilld system it is retrieved from SAP
  """
  readByDeliveryCode(deliveryCode: String!): String!
  fulfillmentItemsToPick(id: ID!): [FulfillmentItemDetails!]!
  fulfillmentItemsToLoad(id: ID!): [FulfillmentItemDetails!]!
  fulfillmentBlocks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: FulfillmentBlockFilter = {}

    """Specify to sort results."""
    sorting: [FulfillmentBlockSort!] = []
  ): FulfillmentBlockOffsetConnection!
  fulfillmentBlock(
    """Entity ID"""
    id: ID!
  ): FulfillmentBlock!
  viewHistoryFieldDiffs(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewHistoryFieldDiffFilter = {}

    """Specify to sort results."""
    sorting: [ViewHistoryFieldDiffSort!] = []
  ): ViewHistoryFieldDiffOffsetConnection!
  viewLostAndFoundInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ViewLostAndFoundFilter = {}

    """Specify to sort results."""
    sorting: [ViewLostAndFoundSort!] = []
  ): ViewLostAndFoundOffsetConnection!
  erpConflictByLicensePlate(
    """Entity's license plate ID (foreign key)"""
    licensePlateId: ID!

    """Entity's license plate ID (foreign key)"""
    warehouseId: ID!
  ): LpErpConflictResponseDto!
  latestInventoryReconciliation(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InventoryReconciliationQueryModelFilter = {}

    """Specify to sort results."""
    sorting: [InventoryReconciliationQueryModelSort!] = []
  ): InventoryReconciliationQueryModelOffsetConnection!
  latestInventoryReconciliationMetadata(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InventoryReconciliationMetaQueryModelFilter = {}

    """Specify to sort results."""
    sorting: [InventoryReconciliationMetaQueryModelSort!] = []

    """Entity's warehouse (foreign key)"""
    warehouseId: String!
  ): InventoryReconciliationMetaQueryModelOffsetConnection!
  getSapHuDetailsByCode(licensePlateCode: String!, warehouseId: String!): SapHuDetailsResponse!
  invoices(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InvoiceFilter = {}

    """Specify to sort results."""
    sorting: [InvoiceSort!] = []
  ): InvoiceOffsetConnection!
  invoice(
    """Entity ID"""
    id: ID!
  ): Invoice!
  invoiceItems(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: InvoiceItemFilter = {}

    """Specify to sort results."""
    sorting: [InvoiceItemSort!] = []
  ): InvoiceItemOffsetConnection!
  invoiceItem(
    """Entity ID"""
    id: ID!
  ): InvoiceItem!
  supportTickets: String!
  supportTicket(id: ID!): String!
  layouts(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: LayoutFilter = {}

    """Specify to sort results."""
    sorting: [LayoutSort!] = []
  ): LayoutOffsetConnection!
  layout(
    """The id of the record to find."""
    id: ID!
  ): Layout!
  maps(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: MapFilter = {}

    """Specify to sort results."""
    sorting: [MapSort!] = []
  ): MapOffsetConnection!
  map(
    """Entity ID"""
    id: ID!
  ): Map!

  """Get directions for shortest path for several picks"""
  getDirections(mapping: MapQuery!): [[[Float!]!]!]!

  """Get slotting suggestions"""
  getSlotting(
    """Create Pick To Staging task wrapper"""
    createSlottingConfig: SlottingQuery!
  ): JSON!
  viewMapBins(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewMapBinFilter = {}

    """Specify to sort results."""
    sorting: [ViewMapBinSort!] = []
  ): ViewMapBinOffsetConnection!
  viewMapAisles(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewMapAisleFilter = {}

    """Specify to sort results."""
    sorting: [ViewMapAisleSort!] = []
  ): ViewMapAisleOffsetConnection!
  mobileConfiguration(
    """Entity's warehouse (foreign key)"""
    warehouseId: ID

    """Feature context enum, i.e. app"""
    context: FeatureContext
  ): MobileConfigurationModel!
  mobileMotd: MobileMotdModel!
  planograms(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: PlanogramFilter = {}

    """Specify to sort results."""
    sorting: [PlanogramSort!] = []
  ): PlanogramOffsetConnection!
  planogram(
    """Entity ID"""
    id: ID!
  ): Planogram!
  replenishments(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ReplenishmentFilter = {}

    """Specify to sort results."""
    sorting: [ReplenishmentSort!] = []
  ): ReplenishmentOffsetConnection!
  replenishment(
    """Entity ID"""
    id: ID!
  ): Replenishment!
  rolePermissionMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: RolePermissionMappingFilter = {}

    """Specify to sort results."""
    sorting: [RolePermissionMappingSort!] = []
  ): RolePermissionMappingOffsetConnection!
  scheduledJobs(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ScheduledJobFilter = {}

    """Specify to sort results."""
    sorting: [ScheduledJobSort!] = []
  ): ScheduledJobOffsetConnection!
  scheduledJob(
    """Entity ID"""
    id: ID!
  ): ScheduledJob!
  scheduledJobTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ScheduledJobTypeFilter = {}

    """Specify to sort results."""
    sorting: [ScheduledJobTypeSort!] = []
  ): ScheduledJobTypeOffsetConnection!
  scheduledJobType(
    """Entity ID"""
    id: ID!
  ): ScheduledJobType!

  """Search products by partial string."""
  esSearchQuery(search: SearchQuery!): GlobalSearchResultWithAggs!

  """count products by partial string."""
  esCountQuery(count: CountQuery!): Int!
  slottingDataFrames(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingDataFrameFilter = {}

    """Specify to sort results."""
    sorting: [SlottingDataFrameSort!] = []
  ): SlottingDataFrameOffsetConnection!
  sapDatasetVariants: SlottingDatasetVariants!
  sapVariantPlantSlocWarehouse(variantName: String!): SlottingDatasetVariantPlantSlocWh!
  slottingDatasets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingDatasetFilter = {}

    """Specify to sort results."""
    sorting: [SlottingDatasetSort!] = []
  ): SlottingDatasetOffsetConnection!
  slottingDataset(
    """Entity ID"""
    id: ID!
  ): SlottingDataset!
  salesOrder(salesOrderNumber: String!): SAPSalesOrder!
  salesOrderItems(salesOrderNumber: String!): [SAPSalesOrderItem!]!
  sapLogicalBinMappings(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SapLogicalBinMappingFilter = {}

    """Specify to sort results."""
    sorting: [SapLogicalBinMappingSort!] = []
  ): SapLogicalBinMappingOffsetConnection!
  sapHuStatuss(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SapHUStatusFilter = {}

    """Specify to sort results."""
    sorting: [SapHUStatusSort!] = []
  ): SapHUStatusOffsetConnection!
  sapHuStatus(
    """Entity ID"""
    id: ID!
  ): SapHUStatus!
  slottingInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingInventoryFilter = {}

    """Specify to sort results."""
    sorting: [SlottingInventorySort!] = []
  ): SlottingInventoryOffsetConnection!
  slottingRulesets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingRulesetFilter = {}

    """Specify to sort results."""
    sorting: [SlottingRulesetSort!] = []
  ): SlottingRulesetOffsetConnection!
  slottingRuleset(
    """Entity ID"""
    id: ID!
  ): SlottingRuleset!
  viewSlottingRulesets(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewSlottingRulesetFilter = {}

    """Specify to sort results."""
    sorting: [ViewSlottingRulesetSort!] = []
  ): ViewSlottingRulesetOffsetConnection!
  warehouseRoleType(
    """Entity ID"""
    id: ID!
  ): WarehouseRoleType!
  warehouseRoleTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehouseRoleTypeFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseRoleTypeSort!] = []
  ): WarehouseRoleTypeOffsetConnection!
  viewWarehouseRoleTypes(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehouseRoleTypeQueryShapeFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseRoleTypeQueryShapeSort!] = []
  ): WarehouseRoleTypeQueryShapeOffsetConnection!
  zones(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ZoneFilter = {}

    """Specify to sort results."""
    sorting: [ZoneSort!] = []
  ): ZoneOffsetConnection!
  zone(
    """Entity ID"""
    id: ID!
  ): Zone!
  viewZones(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewZoneFilter = {}

    """Specify to sort results."""
    sorting: [ViewZoneSort!] = []
  ): ViewZoneOffsetConnection!
  viewZoneAreas(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewZoneAreaFilter = {}

    """Specify to sort results."""
    sorting: [ViewZoneAreaSort!] = []
  ): ViewZoneAreaOffsetConnection!
  viewZoneAisleColumns(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewZoneAisleColumnFilter = {}

    """Specify to sort results."""
    sorting: [ViewZoneAisleColumnSort!] = []
  ): ViewZoneAisleColumnOffsetConnection!
  viewZoneBinsMapped(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewZoneBinMappedFilter = {}

    """Specify to sort results."""
    sorting: [ViewZoneBinMappedSort!] = []
  ): ViewZoneBinMappedOffsetConnection!
  viewZoneBinsUnmapped(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewZoneBinUnmappedFilter = {}

    """Specify to sort results."""
    sorting: [ViewZoneBinUnmappedSort!] = []
  ): ViewZoneBinUnmappedOffsetConnection!
  viewZoneAisles(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewZoneAisleFilter = {}

    """Specify to sort results."""
    sorting: [ViewZoneAisleSort!] = []
  ): ViewZoneAisleOffsetConnection!
  slottingRuns(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingRunFilter = {}

    """Specify to sort results."""
    sorting: [SlottingRunSort!] = []
  ): SlottingRunOffsetConnection!
  datasetMaterials(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: DatasetMaterialsFilter = {}

    """Specify to sort results."""
    sorting: [DatasetMaterialsSort!] = []
    run_id: String!
  ): DatasetMaterialsOffsetConnection!
  getPlanogramBinInventory(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: PlanogramBinMaterialsFilter = {}

    """Specify to sort results."""
    sorting: [PlanogramBinMaterialsSort!] = []
  ): PlanogramBinMaterialsOffsetConnection!
  slottingRun(runId: String!): SlottingRun!
  deployedRun: SlottingRun
  slottingAbcAnalysis(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingAbcAnalysisFilter = {}

    """Specify to sort results."""
    sorting: [SlottingAbcAnalysisSort!] = []
  ): SlottingAbcAnalysisOffsetConnection!
  rearrangementRecommendations(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: RearrangementRecommendationFilter = {}

    """Specify to sort results."""
    sorting: [RearrangementRecommendationSort!] = []
  ): RearrangementRecommendationOffsetConnection!
  slottingConfigurations(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingConfigurationFilter = {}

    """Specify to sort results."""
    sorting: [SlottingConfigurationSort!] = []
  ): SlottingConfigurationOffsetConnection!
  slottingConfiguration(
    """Entity ID"""
    id: ID!
  ): SlottingConfiguration!
  smartScan(
    """String providing scanned data"""
    payload: String!
    smartScanContext: SmartScanContext!
  ): SmartScanResource!
  systemConnections(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SystemConnectionFilter = {}

    """Specify to sort results."""
    sorting: [SystemConnectionSort!] = []
  ): SystemConnectionOffsetConnection!
  systemConnection(
    """Entity ID"""
    id: ID!
  ): SystemConnection!
  orderStepsForTaskGroup(
    """Entity ID"""
    taskGroupId: ID!

    """Entity code"""
    binCode: String!
  ): OrderedTaskGroupResponse!
  warehouseCountTypes(warehouseId: String!): [PhysicalInventoryCountType!]!
  invalidStockStatusForBinCount(warehouseId: String!): [StockStatusType!]!
  binCountApprovalTasks(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: ApproveBinCountTaskQueryModelFilter = {}

    """Specify to sort results."""
    sorting: [ApproveBinCountTaskQueryModelSort!] = []
  ): ApproveBinCountTaskQueryModelOffsetConnection!
  stuckSyncJob: QueueJobModel
  queueJob(id: ID!): QueueJobModel
  binsForPickTask(taskId: ID!): [BinForPickTask!]!
  licensePlatesForPickTask(taskId: ID!): [LicensePlateForPickTask!]!
  validateTaskType(
    """Entity ID"""
    warehouseId: ID!
    taskTypeId: ID
    taskTypeCode: String
    taskTypeBinStatus: TaskTypeBinStatusValidationInput
    taskTypeBinStatusForLicensePlate: TaskTypeBinStatusForLicensePlateValidationInput
    taskTypeStockStatus: TaskTypeStockStatusValidationInput
    taskTypeStockStatusForLicensePlate: TaskTypeStockStatusForLicensePlateValidationInput
    openTasksForLicensePlate: LicensePlateTaskValidationDto
  ): TaskValidationErrorModel! @deprecated(reason: "obsolete - move to validateTask")
  validateTask(
    """Entity ID"""
    warehouseId: ID!
    taskTypeId: ID
    taskTypeCode: String
    taskTypeBinStatus: TaskTypeBinStatusValidationInput
    taskTypeBinStatusForLicensePlate: TaskTypeBinStatusForLicensePlateValidationInput
    taskTypeStockStatus: TaskTypeStockStatusValidationInput
    taskTypeStockStatusForLicensePlate: TaskTypeStockStatusForLicensePlateValidationInput
    openTasksForLicensePlate: LicensePlateTaskValidationDto
  ): TaskValidationErrorModel!
  slottingExclusions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: SlottingExclusionFilter = {}

    """Specify to sort results."""
    sorting: [SlottingExclusionSort!] = []
  ): SlottingExclusionOffsetConnection!
  slottingExclusion(
    """Entity ID"""
    id: ID!
  ): SlottingExclusion!
  viewSlottingExclusions(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 100000000}

    """Specify to filter the records returned."""
    filter: ViewSlottingExclusionFilter = {}

    """Specify to sort results."""
    sorting: [ViewSlottingExclusionSort!] = []
  ): ViewSlottingExclusionOffsetConnection!
  warehouseOpFiles(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehouseOpFileFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseOpFileSort!] = []
  ): WarehouseOpFileOffsetConnection!
  warehouseOpFile(
    """Entity ID"""
    id: ID!
  ): WarehouseOpFile!
  warehouseOpFileRows(
    """Limit or page results."""
    paging: OffsetPaging = {limit: 1000000}

    """Specify to filter the records returned."""
    filter: WarehouseOpFileRowFilter = {}

    """Specify to sort results."""
    sorting: [WarehouseOpFileRowSort!] = []
  ): WarehouseOpFileRowOffsetConnection!
  warehouseOpFileRow(
    """Entity ID"""
    id: ID!
  ): WarehouseOpFileRow!
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

input UserGroupFilter {
  and: [UserGroupFilter!]
  or: [UserGroupFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  default: BooleanFieldComparison
}

input IDFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ID
  neq: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  like: ID
  notLike: ID
  iLike: ID
  notILike: ID
  in: [ID!]
  notIn: [ID!]
}

input DateFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: DateTime
  neq: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  between: DateFieldComparisonBetween
  notBetween: DateFieldComparisonBetween
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

input StringFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: String
  neq: String
  gt: String
  gte: String
  lt: String
  lte: String
  like: String
  notLike: String
  iLike: String
  notILike: String
  in: [String!]
  notIn: [String!]
  between: StringNumberFieldComparisonBetween
  notBetween: StringNumberFieldComparisonBetween
}

input StringNumberFieldComparisonBetween {
  lower: String!
  upper: String!
}

input BooleanFieldComparison {
  is: Boolean
  isNot: Boolean
}

input UserGroupSort {
  field: UserGroupSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserGroupSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  name
  default
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input ViewUserGroupFilter {
  and: [ViewUserGroupFilter!]
  or: [ViewUserGroupFilter!]
  userGroupId: IDFilterComparison
  userGroupName: StringFieldComparison
  warehouseId: IDFilterComparison
  warehouseCode: StringFieldComparison
  warehouseName: StringFieldComparison
  roleId: IDFilterComparison
  roleName: StringFieldComparison
  roleDefault: StringFieldComparison
}

input ViewUserGroupSort {
  field: ViewUserGroupSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewUserGroupSortFields {
  userGroupId
  userGroupName
  warehouseId
  warehouseCode
  warehouseName
  roleId
  roleName
  roleDefault
}

input UserGroupMappingFilter {
  and: [UserGroupMappingFilter!]
  or: [UserGroupMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  userId: IDFilterComparison
  userGroupId: IDFilterComparison
}

input UserGroupMappingSort {
  field: UserGroupMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserGroupMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  userId
  userGroupId
}

input RoleFilter {
  and: [RoleFilter!]
  or: [RoleFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  default: BooleanFieldComparison
}

input RoleSort {
  field: RoleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum RoleSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  name
  default
}

input PermissionFilter {
  and: [PermissionFilter!]
  or: [PermissionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  code: StringFieldComparison
  subject: StringFieldComparison
  grouping: PermissionGroupingFilterComparison
}

input PermissionGroupingFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: PermissionGrouping
  neq: PermissionGrouping
  gt: PermissionGrouping
  gte: PermissionGrouping
  lt: PermissionGrouping
  lte: PermissionGrouping
  like: PermissionGrouping
  notLike: PermissionGrouping
  iLike: PermissionGrouping
  notILike: PermissionGrouping
  in: [PermissionGrouping!]
  notIn: [PermissionGrouping!]
}

input PermissionSort {
  field: PermissionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PermissionSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  description
  code
  subject
  grouping
}

input WarehouseFilter {
  and: [WarehouseFilter!]
  or: [WarehouseFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  type: ModelWarehouseTypeFilterComparison
  companyId: IDFilterComparison
  vertices: JSONFilterComparison
  indices: JSONFilterComparison
  points: JSONFilterComparison
  polygon: JSONFilterComparison
  contactInfoId: StringFieldComparison
  systemConnectionId: StringFieldComparison
  company: WarehouseFilterCompanyFilter
}

input ModelWarehouseTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ModelWarehouseType
  neq: ModelWarehouseType
  gt: ModelWarehouseType
  gte: ModelWarehouseType
  lt: ModelWarehouseType
  lte: ModelWarehouseType
  like: ModelWarehouseType
  notLike: ModelWarehouseType
  iLike: ModelWarehouseType
  notILike: ModelWarehouseType
  in: [ModelWarehouseType!]
  notIn: [ModelWarehouseType!]
}

input JSONFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: JSON
  neq: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  like: JSON
  notLike: JSON
  iLike: JSON
  notILike: JSON
  in: [JSON!]
  notIn: [JSON!]
}

input WarehouseFilterCompanyFilter {
  and: [WarehouseFilterCompanyFilter!]
  or: [WarehouseFilterCompanyFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  organizationId: IDFilterComparison
  code: StringFieldComparison
  name: StringFieldComparison
  contactInfoId: IDFilterComparison
}

input WarehouseSort {
  field: WarehouseSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehouseSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  type
  companyId
  vertices
  indices
  points
  polygon
  contactInfoId
  systemConnectionId
}

input ContactInfoFilter {
  and: [ContactInfoFilter!]
  or: [ContactInfoFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  phone: StringFieldComparison
  fax: StringFieldComparison
  email: StringFieldComparison
  street1: StringFieldComparison
  street2: StringFieldComparison
  city: StringFieldComparison
  state: StringFieldComparison
  zip: StringFieldComparison
  country: StringFieldComparison
}

input ContactInfoSort {
  field: ContactInfoSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ContactInfoSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  phone
  fax
  email
  street1
  street2
  city
  state
  zip
  country
}

input OrganizationFilter {
  and: [OrganizationFilter!]
  or: [OrganizationFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  userLimit: IntFieldComparison
}

input IntFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Int
  neq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int!]
  notIn: [Int!]
  between: IntFieldComparisonBetween
  notBetween: IntFieldComparisonBetween
}

input IntFieldComparisonBetween {
  lower: Int!
  upper: Int!
}

input OrganizationSort {
  field: OrganizationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum OrganizationSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  userLimit
}

input CompanyFilter {
  and: [CompanyFilter!]
  or: [CompanyFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  organizationId: IDFilterComparison
  code: StringFieldComparison
  name: StringFieldComparison
  contactInfoId: IDFilterComparison
}

input CompanySort {
  field: CompanySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CompanySortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  organizationId
  code
  name
  contactInfoId
}

input DisplayPreferenceFilter {
  and: [DisplayPreferenceFilter!]
  or: [DisplayPreferenceFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  numberFormat: NumberFormatFilterComparison
  dateTimeFormat: StringFieldComparison
  timezone: StringFieldComparison
  language: StringFieldComparison
  currency: StringFieldComparison
  measurementSystem: StandardUOMSystemFilterComparison
}

input NumberFormatFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: NumberFormat
  neq: NumberFormat
  gt: NumberFormat
  gte: NumberFormat
  lt: NumberFormat
  lte: NumberFormat
  like: NumberFormat
  notLike: NumberFormat
  iLike: NumberFormat
  notILike: NumberFormat
  in: [NumberFormat!]
  notIn: [NumberFormat!]
}

input StandardUOMSystemFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: StandardUOMSystem
  neq: StandardUOMSystem
  gt: StandardUOMSystem
  gte: StandardUOMSystem
  lt: StandardUOMSystem
  lte: StandardUOMSystem
  like: StandardUOMSystem
  notLike: StandardUOMSystem
  iLike: StandardUOMSystem
  notILike: StandardUOMSystem
  in: [StandardUOMSystem!]
  notIn: [StandardUOMSystem!]
}

input DisplayPreferenceSort {
  field: DisplayPreferenceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DisplayPreferenceSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  numberFormat
  dateTimeFormat
  timezone
  language
  currency
  measurementSystem
}

input UserWarehouseDefaultFilter {
  and: [UserWarehouseDefaultFilter!]
  or: [UserWarehouseDefaultFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: StringFieldComparison
  userId: StringFieldComparison
  default: BooleanFieldComparison
}

input UserWarehouseDefaultSort {
  field: UserWarehouseDefaultSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserWarehouseDefaultSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  userId
  default
}

input TeamFilter {
  and: [TeamFilter!]
  or: [TeamFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  warehouseId: IDFilterComparison
  default: BooleanFieldComparison
  status: TeamStatusFilterComparison
  taskFilter: JSONFilterComparison
  taskFilterArray: JSONFilterComparison
}

input TeamStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: TeamStatus
  neq: TeamStatus
  gt: TeamStatus
  gte: TeamStatus
  lt: TeamStatus
  lte: TeamStatus
  like: TeamStatus
  notLike: TeamStatus
  iLike: TeamStatus
  notILike: TeamStatus
  in: [TeamStatus!]
  notIn: [TeamStatus!]
}

input TeamSort {
  field: TeamSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TeamSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  name
  description
  warehouseId
  default
  status
  taskFilter
  taskFilterArray
}

input ViewTeamFilter {
  and: [ViewTeamFilter!]
  or: [ViewTeamFilter!]
  id: IDFilterComparison
  name: IDFilterComparison
  description: IDFilterComparison
  default: BooleanFieldComparison
  status: TeamStatusFilterComparison
  userCount: IntFieldComparison
  taskFilter: JSONFilterComparison
  taskFilterArray: JSONFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  warehouseId: IDFilterComparison
}

input ViewTeamSort {
  field: ViewTeamSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewTeamSortFields {
  id
  name
  description
  default
  status
  userCount
  taskFilter
  taskFilterArray
  createdAt
  updatedAt
  warehouseId
}

input UserTeamMappingFilter {
  and: [UserTeamMappingFilter!]
  or: [UserTeamMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  teamId: IDFilterComparison
  userId: IDFilterComparison
  active: BooleanFieldComparison
}

input UserTeamMappingSort {
  field: UserTeamMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserTeamMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  teamId
  userId
  active
}

enum BarcodeScanner {
  zebra
}

input BarcodeFilter {
  and: [BarcodeFilter!]
  or: [BarcodeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  companyId: IDFilterComparison
  businessPartnerId: IDFilterComparison
  configuration: StringFieldComparison
  scanData: StringFieldComparison
}

input BarcodeSort {
  field: BarcodeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BarcodeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  companyId
  businessPartnerId
  configuration
  scanData
}

input ViewBarcodeFilter {
  and: [ViewBarcodeFilter!]
  or: [ViewBarcodeFilter!]
  barcodeId: IDFilterComparison
  barcodeCode: StringFieldComparison
  barcodeCreatedAt: DateFieldComparison
  adminTaskId: IDFilterComparison
  adminTaskStatus: StringFieldComparison
  userFirstName: StringFieldComparison
  userLastName: StringFieldComparison
  businessPartnerName: StringFieldComparison
  businessPartnerCode: StringFieldComparison
  businessPartnerId: IDFilterComparison
}

input ViewBarcodeSort {
  field: ViewBarcodeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewBarcodeSortFields {
  barcodeId
  barcodeCode
  barcodeCreatedAt
  adminTaskId
  adminTaskStatus
  userFirstName
  userLastName
  businessPartnerName
  businessPartnerCode
  businessPartnerId
}

input BarcodeMappingFilter {
  and: [BarcodeMappingFilter!]
  or: [BarcodeMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  barcodeId: StringFieldComparison
  ai: StringFieldComparison
  entity: StringFieldComparison
  entityField: StringFieldComparison
  dataTitle: StringFieldComparison
  dataContent: StringFieldComparison
  required: BooleanFieldComparison
}

input BarcodeMappingSort {
  field: BarcodeMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BarcodeMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  barcodeId
  ai
  entity
  entityField
  dataTitle
  dataContent
  required
}

input UserFilter {
  and: [UserFilter!]
  or: [UserFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  type: UserTypeFilterComparison
  firstName: StringFieldComparison
  lastName: StringFieldComparison
  email: StringFieldComparison
  phone: StringFieldComparison
  status: UserStatusFilterComparison
  mobileDetails: JSONFilterComparison
  firebaseAuthUid: StringFieldComparison
}

input UserTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: UserType
  neq: UserType
  gt: UserType
  gte: UserType
  lt: UserType
  lte: UserType
  like: UserType
  notLike: UserType
  iLike: UserType
  notILike: UserType
  in: [UserType!]
  notIn: [UserType!]
}

input UserStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: UserStatus
  neq: UserStatus
  gt: UserStatus
  gte: UserStatus
  lt: UserStatus
  lte: UserStatus
  like: UserStatus
  notLike: UserStatus
  iLike: UserStatus
  notILike: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
}

input UserSort {
  field: UserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UserSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  type
  firstName
  lastName
  email
  phone
  status
  mobileDetails
  firebaseAuthUid
}

input ViewUserFilter {
  and: [ViewUserFilter!]
  or: [ViewUserFilter!]
  userId: IDFilterComparison
  firstName: StringFieldComparison
  lastName: IDFilterComparison
  email: StringFieldComparison
  status: StringFieldComparison
  phone: IDFilterComparison
}

input ViewUserSort {
  field: ViewUserSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewUserSortFields {
  userId
  firstName
  lastName
  email
  status
  phone
}

input NonCompliantBarcodeFilter {
  and: [NonCompliantBarcodeFilter!]
  or: [NonCompliantBarcodeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  vendor: StringFieldComparison
  vendorCode: StringFieldComparison
  scanData: StringFieldComparison
  symbology: StringFieldComparison
  deliveryCode: StringFieldComparison
  resolved: BooleanFieldComparison
}

input NonCompliantBarcodeSort {
  field: NonCompliantBarcodeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum NonCompliantBarcodeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  vendor
  vendorCode
  scanData
  symbology
  deliveryCode
  resolved
}

input EwmWarehouseTaskFilter {
  and: [EwmWarehouseTaskFilter!]
  or: [EwmWarehouseTaskFilter!]
  warehouseOrder: EwmWarehouseTaskWarehouseOrderFilterComparison
  code: EwmWarehouseTaskCodeFilterComparison
  productCode: EwmWarehouseTaskProductCodeFilterComparison
  quantity: EwmWarehouseTaskQuantityFilterComparison
  targetQuantity: EwmWarehouseTaskTargetQuantityFilterComparison
  sourceHandlingUnit: EwmWarehouseTaskSourceHandlingUnitFilterComparison
  status: EwmWarehouseTaskStatusFilterComparison
  createdAt: EwmWarehouseTaskCreatedAtFilterComparison
}

input EwmWarehouseTaskWarehouseOrderFilterComparison {
  eq: String
}

input EwmWarehouseTaskCodeFilterComparison {
  eq: String
}

input EwmWarehouseTaskProductCodeFilterComparison {
  eq: String
}

input EwmWarehouseTaskQuantityFilterComparison {
  gte: String
  lte: String
}

input EwmWarehouseTaskTargetQuantityFilterComparison {
  gte: String
  lte: String
}

input EwmWarehouseTaskSourceHandlingUnitFilterComparison {
  eq: String
}

input EwmWarehouseTaskStatusFilterComparison {
  eq: EwmWarehouseTaskStatus
}

input EwmWarehouseTaskCreatedAtFilterComparison {
  gte: DateTime
  lte: DateTime
}

input EwmWarehouseTaskSort {
  field: EwmWarehouseTaskSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EwmWarehouseTaskSortFields {
  warehouseOrder
  code
  productCode
  quantity
  targetQuantity
  sourceHandlingUnit
  status
  createdAt
}

input EwmWarehouseOrderFilter {
  and: [EwmWarehouseOrderFilter!]
  or: [EwmWarehouseOrderFilter!]
  warehouseOrder: EwmWarehouseOrderWarehouseOrderFilterComparison
  warehouseOrderStatusName: EwmWarehouseOrderWarehouseOrderStatusNameFilterComparison
  creationDateTime: EwmWarehouseOrderCreationDateTimeFilterComparison
}

input EwmWarehouseOrderWarehouseOrderFilterComparison {
  eq: String
}

input EwmWarehouseOrderWarehouseOrderStatusNameFilterComparison {
  eq: EWMWarehouseOrderStatusName
}

input EwmWarehouseOrderCreationDateTimeFilterComparison {
  gte: DateTime
  lte: DateTime
}

input EwmWarehouseOrderSort {
  field: EwmWarehouseOrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EwmWarehouseOrderSortFields {
  warehouseOrder
  warehouseOrderStatusName
  creationDateTime
}

input AisleColumnFilter {
  and: [AisleColumnFilter!]
  or: [AisleColumnFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  warehouseId: IDFilterComparison
  aisleId: IDFilterComparison
  depth: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  rotation: FloatFieldComparison
  facing: StringFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  polygon: JSONFilterComparison
}

input FloatFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: FloatFieldComparisonBetween
  notBetween: FloatFieldComparisonBetween
}

input FloatFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input AisleColumnSort {
  field: AisleColumnSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AisleColumnSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  warehouseId
  aisleId
  depth
  width
  height
  rotation
  facing
  x
  y
  z
  polygon
}

input AisleFilter {
  and: [AisleFilter!]
  or: [AisleFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  warehouseId: IDFilterComparison
  areaId: IDFilterComparison
  depth: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  rotation: FloatFieldComparison
  facing: StringFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  polygon: JSONFilterComparison
}

input AisleSort {
  field: AisleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AisleSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  warehouseId
  areaId
  depth
  width
  height
  rotation
  facing
  x
  y
  z
  polygon
}

input AreaFilter {
  and: [AreaFilter!]
  or: [AreaFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: IDFilterComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  type: AreaTypeFilterComparison
  status: AreaStatusFilterComparison
  storageType: AreaStorageTypeFilterComparison
  depth: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  polygon: JSONFilterComparison
  targetTemperature: FloatFieldComparison
  entryPoint: BooleanFieldComparison
  exitPoint: BooleanFieldComparison
}

input AreaTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AreaType
  neq: AreaType
  gt: AreaType
  gte: AreaType
  lt: AreaType
  lte: AreaType
  like: AreaType
  notLike: AreaType
  iLike: AreaType
  notILike: AreaType
  in: [AreaType!]
  notIn: [AreaType!]
}

input AreaStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AreaStatus
  neq: AreaStatus
  gt: AreaStatus
  gte: AreaStatus
  lt: AreaStatus
  lte: AreaStatus
  like: AreaStatus
  notLike: AreaStatus
  iLike: AreaStatus
  notILike: AreaStatus
  in: [AreaStatus!]
  notIn: [AreaStatus!]
}

input AreaStorageTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: AreaStorageType
  neq: AreaStorageType
  gt: AreaStorageType
  gte: AreaStorageType
  lt: AreaStorageType
  lte: AreaStorageType
  like: AreaStorageType
  notLike: AreaStorageType
  iLike: AreaStorageType
  notILike: AreaStorageType
  in: [AreaStorageType!]
  notIn: [AreaStorageType!]
}

input AreaSort {
  field: AreaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum AreaSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  code
  name
  description
  type
  status
  storageType
  depth
  width
  height
  x
  y
  z
  polygon
  targetTemperature
  entryPoint
  exitPoint
}

input ViewAreaFilter {
  and: [ViewAreaFilter!]
  or: [ViewAreaFilter!]
  code: StringFieldComparison
  id: IDFilterComparison
  warehouseId: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  storageLocationId: IDFilterComparison
  storageLocation: StringFieldComparison
  status: AreaStatusFilterComparison
  targetTemperature: FloatFieldComparison
  isEmpty: BooleanFieldComparison
  entryPoint: BooleanFieldComparison
  exitPoint: BooleanFieldComparison
}

input ViewAreaSort {
  field: ViewAreaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewAreaSortFields {
  code
  id
  warehouseId
  name
  description
  storageLocationId
  storageLocation
  status
  targetTemperature
  isEmpty
  entryPoint
  exitPoint
}

input SapStorageLocationPlantFilter {
  and: [SapStorageLocationPlantFilter!]
  or: [SapStorageLocationPlantFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  plant: StringFieldComparison
  storageLocation: StringFieldComparison
}

input SapStorageLocationPlantSort {
  field: SapStorageLocationPlantSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SapStorageLocationPlantSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  plant
  storageLocation
}

input BarcodeTemplateMappingFilter {
  and: [BarcodeTemplateMappingFilter!]
  or: [BarcodeTemplateMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  barcodeTemplateId: StringFieldComparison
  ai: StringFieldComparison
  entity: StringFieldComparison
  entityField: StringFieldComparison
  dataTitle: StringFieldComparison
  dataContent: StringFieldComparison
}

input BarcodeTemplateMappingSort {
  field: BarcodeTemplateMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BarcodeTemplateMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  barcodeTemplateId
  ai
  entity
  entityField
  dataTitle
  dataContent
}

input BarcodeTemplateFilter {
  and: [BarcodeTemplateFilter!]
  or: [BarcodeTemplateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  configurationName: BarcodeSymbologyTypeFilterComparison
}

input BarcodeSymbologyTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: BarcodeSymbologyType
  neq: BarcodeSymbologyType
  gt: BarcodeSymbologyType
  gte: BarcodeSymbologyType
  lt: BarcodeSymbologyType
  lte: BarcodeSymbologyType
  like: BarcodeSymbologyType
  notLike: BarcodeSymbologyType
  iLike: BarcodeSymbologyType
  notILike: BarcodeSymbologyType
  in: [BarcodeSymbologyType!]
  notIn: [BarcodeSymbologyType!]
}

input BarcodeTemplateSort {
  field: BarcodeTemplateSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BarcodeTemplateSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  configurationName
}

input BinFilter {
  and: [BinFilter!]
  or: [BinFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  type: BinTypeFilterComparison
  deliveryId: IDFilterComparison
  warehouseId: IDFilterComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  level: IntFieldComparison
  rotation: FloatFieldComparison
  lastMovement: DateFieldComparison
  lastCount: DateFieldComparison
  putawayBlock: BooleanFieldComparison
  removalBlock: BooleanFieldComparison
  verificationCode: StringFieldComparison
  areaId: IDFilterComparison
  aisleId: IDFilterComparison
  aisleColumnId: IDFilterComparison
  pick_point: JSONObjectFilterComparison
  putaway_point: JSONObjectFilterComparison
  binSizeId: IDFilterComparison
}

input BinTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: BinType
  neq: BinType
  gt: BinType
  gte: BinType
  lt: BinType
  lte: BinType
  like: BinType
  notLike: BinType
  iLike: BinType
  notILike: BinType
  in: [BinType!]
  notIn: [BinType!]
}

input JSONObjectFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: JSONObject
  neq: JSONObject
  gt: JSONObject
  gte: JSONObject
  lt: JSONObject
  lte: JSONObject
  like: JSONObject
  notLike: JSONObject
  iLike: JSONObject
  notILike: JSONObject
  in: [JSONObject!]
  notIn: [JSONObject!]
}

input BinSort {
  field: BinSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BinSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  type
  deliveryId
  warehouseId
  x
  y
  z
  level
  rotation
  lastMovement
  lastCount
  putawayBlock
  removalBlock
  verificationCode
  areaId
  aisleId
  aisleColumnId
  pick_point
  putaway_point
  binSizeId
}

input ViewBinFilter {
  and: [ViewBinFilter!]
  or: [ViewBinFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  type: BinTypeFilterComparison
  verificationCode: StringFieldComparison
  level: FloatFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  warehouseId: IDFilterComparison
  warehouseCode: StringFieldComparison
  lastMovement: DateFieldComparison
  lastCount: DateFieldComparison
  zoneId: StringFieldComparison
  zoneCode: StringFieldComparison
  binSizeId: StringFieldComparison
  binSizeCode: StringFieldComparison
  binSizeDepth: FloatFieldComparison
  binSizeHeight: FloatFieldComparison
  binSizeWidth: FloatFieldComparison
  distanceUomId: IDFilterComparison
  distanceUomCode: StringFieldComparison
  binSizeWeightCapacity: FloatFieldComparison
  weightCapacityUomId: IDFilterComparison
  weightCapacityUomCode: StringFieldComparison
  areaId: IDFilterComparison
  areaCode: StringFieldComparison
  areaName: StringFieldComparison
  areaStorageType: AreaStorageTypeFilterComparison
  aisleId: IDFilterComparison
  aisleCode: StringFieldComparison
  aisleColumnId: IDFilterComparison
  aisleColumnCode: StringFieldComparison
  sourceBinBlock: BinBlockStateFilterComparison
  destinationBinBlock: BinBlockStateFilterComparison
  inactive: BinActiveStateFilterComparison
  containsProducts: BooleanFieldComparison
  empty: BooleanFieldComparison
  hasOpenTasks: BooleanFieldComparison
  countTaskId: IDFilterComparison
  countTaskCode: StringFieldComparison
  isAssignedToDoor: BooleanFieldComparison
}

input BinBlockStateFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: BinBlockState
  neq: BinBlockState
  gt: BinBlockState
  gte: BinBlockState
  lt: BinBlockState
  lte: BinBlockState
  like: BinBlockState
  notLike: BinBlockState
  iLike: BinBlockState
  notILike: BinBlockState
  in: [BinBlockState!]
  notIn: [BinBlockState!]
}

input BinActiveStateFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: BinActiveState
  neq: BinActiveState
  gt: BinActiveState
  gte: BinActiveState
  lt: BinActiveState
  lte: BinActiveState
  like: BinActiveState
  notLike: BinActiveState
  iLike: BinActiveState
  notILike: BinActiveState
  in: [BinActiveState!]
  notIn: [BinActiveState!]
}

input ViewBinSort {
  field: ViewBinSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewBinSortFields {
  id
  code
  type
  verificationCode
  level
  x
  y
  z
  warehouseId
  warehouseCode
  lastMovement
  lastCount
  zoneId
  zoneCode
  binSizeId
  binSizeCode
  binSizeDepth
  binSizeHeight
  binSizeWidth
  distanceUomId
  distanceUomCode
  binSizeWeightCapacity
  weightCapacityUomId
  weightCapacityUomCode
  areaId
  areaCode
  areaName
  areaStorageType
  aisleId
  aisleCode
  aisleColumnId
  aisleColumnCode
  sourceBinBlock
  destinationBinBlock
  inactive
  containsProducts
  empty
  hasOpenTasks
  countTaskId
  countTaskCode
  isAssignedToDoor
}

input ViewBinSizeFilter {
  and: [ViewBinSizeFilter!]
  or: [ViewBinSizeFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  weightCapacity: FloatFieldComparison
  depth: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  productSizeRestriction: JSONObjectFilterComparison
  warehouseId: IDFilterComparison
  warehouseCode: StringFieldComparison
  distanceUomId: IDFilterComparison
  distanceUomCode: StringFieldComparison
  weightCapacityUomId: IDFilterComparison
  weightCapacityUomCode: StringFieldComparison
  createdByUserFirstName: IDFilterComparison
  createdByUserLastName: IDFilterComparison
  binCount: FloatFieldComparison
  volumeCapacityUomId: IDFilterComparison
  volumeUomCode: StringFieldComparison
  volumeCapacity: FloatFieldComparison
  length: FloatFieldComparison
  productLengthLimit: FloatFieldComparison
  productHeightLimit: FloatFieldComparison
  productWidthLimit: FloatFieldComparison
  productLimitUomCode: StringFieldComparison
  maximumProductUomUomCode: StringFieldComparison
}

input ViewBinSizeSort {
  field: ViewBinSizeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewBinSizeSortFields {
  id
  code
  label
  description
  weightCapacity
  depth
  width
  height
  productSizeRestriction
  warehouseId
  warehouseCode
  distanceUomId
  distanceUomCode
  weightCapacityUomId
  weightCapacityUomCode
  createdByUserFirstName
  createdByUserLastName
  binCount
  volumeCapacityUomId
  volumeUomCode
  volumeCapacity
  length
  productLengthLimit
  productHeightLimit
  productWidthLimit
  productLimitUomCode
  maximumProductUomUomCode
}

input BinSizeFilter {
  and: [BinSizeFilter!]
  or: [BinSizeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  weightCapacity: FloatFieldComparison
  depth: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  productSizeRestriction: JSONObjectFilterComparison
  warehouseId: IDFilterComparison
  distanceUomId: IDFilterComparison
  weightCapacityUomId: IDFilterComparison
  createdByUserId: StringFieldComparison
  volumeCapacityUomId: IDFilterComparison
  volumeCapacity: FloatFieldComparison
  length: FloatFieldComparison
  productLengthLimit: FloatFieldComparison
  productHeightLimit: FloatFieldComparison
  productWidthLimit: FloatFieldComparison
  productLimitUomId: IDFilterComparison
  maximumProductUomId: IDFilterComparison
}

input BinSizeSort {
  field: BinSizeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BinSizeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  description
  weightCapacity
  depth
  width
  height
  productSizeRestriction
  warehouseId
  distanceUomId
  weightCapacityUomId
  createdByUserId
  volumeCapacityUomId
  volumeCapacity
  length
  productLengthLimit
  productHeightLimit
  productWidthLimit
  productLimitUomId
  maximumProductUomId
}

input UnitOfMeasureGlossaryFilter {
  and: [UnitOfMeasureGlossaryFilter!]
  or: [UnitOfMeasureGlossaryFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  internalCode: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  category: StandardUOMCategoryFilterComparison
  isBaseUom: BooleanFieldComparison
  measurementSystem: StandardUOMSystemFilterComparison
  companyId: IDFilterComparison
}

input StandardUOMCategoryFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: StandardUOMCategory
  neq: StandardUOMCategory
  gt: StandardUOMCategory
  gte: StandardUOMCategory
  lt: StandardUOMCategory
  lte: StandardUOMCategory
  like: StandardUOMCategory
  notLike: StandardUOMCategory
  iLike: StandardUOMCategory
  notILike: StandardUOMCategory
  in: [StandardUOMCategory!]
  notIn: [StandardUOMCategory!]
}

input UnitOfMeasureGlossarySort {
  field: UnitOfMeasureGlossarySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UnitOfMeasureGlossarySortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  internalCode
  label
  description
  category
  isBaseUom
  measurementSystem
  companyId
}

input VertexFilter {
  and: [VertexFilter!]
  or: [VertexFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: IDFilterComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  type: VertexTypeFilterComparison
}

input VertexTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: VertexType
  neq: VertexType
  gt: VertexType
  gte: VertexType
  lt: VertexType
  lte: VertexType
  like: VertexType
  notLike: VertexType
  iLike: VertexType
  notILike: VertexType
  in: [VertexType!]
  notIn: [VertexType!]
}

input VertexSort {
  field: VertexSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum VertexSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  x
  y
  z
  type
}

input BinStatusMappingFilter {
  and: [BinStatusMappingFilter!]
  or: [BinStatusMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  binId: IDFilterComparison
  binStatusId: IDFilterComparison
}

input BinStatusMappingSort {
  field: BinStatusMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BinStatusMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  binId
  binStatusId
}

input BinStatusFilter {
  and: [BinStatusFilter!]
  or: [BinStatusFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  label: StringFieldComparison
  code: BinStatusCodeFilterComparison
}

input BinStatusCodeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: BinStatusCode
  neq: BinStatusCode
  gt: BinStatusCode
  gte: BinStatusCode
  lt: BinStatusCode
  lte: BinStatusCode
  like: BinStatusCode
  notLike: BinStatusCode
  iLike: BinStatusCode
  notILike: BinStatusCode
  in: [BinStatusCode!]
  notIn: [BinStatusCode!]
}

input BinStatusSort {
  field: BinStatusSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BinStatusSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  label
  code
}

input BusinessPartnerFilter {
  and: [BusinessPartnerFilter!]
  or: [BusinessPartnerFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  type: StringFieldComparison
  searchTerm1: StringFieldComparison
  searchTerm2: StringFieldComparison
  customerCode: StringFieldComparison
  supplierCode: StringFieldComparison
  validityStart: DateFieldComparison
  validityEnd: DateFieldComparison
  addressTimezone: StringFieldComparison
  addressUUID: StringFieldComparison
  cityName: StringFieldComparison
  district: StringFieldComparison
  region: StringFieldComparison
  streetAddress: StringFieldComparison
  postalCode: StringFieldComparison
  country: StringFieldComparison
  language: StringFieldComparison
  defaultPhoneNumber: StringFieldComparison
  phoneNumber: StringFieldComparison
  email: StringFieldComparison
}

input BusinessPartnerSort {
  field: BusinessPartnerSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum BusinessPartnerSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  type
  searchTerm1
  searchTerm2
  customerCode
  supplierCode
  validityStart
  validityEnd
  addressTimezone
  addressUUID
  cityName
  district
  region
  streetAddress
  postalCode
  country
  language
  defaultPhoneNumber
  phoneNumber
  email
}

input ContractFilter {
  and: [ContractFilter!]
  or: [ContractFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  type: ContractTypeFilterComparison
}

input ContractTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ContractType
  neq: ContractType
  gt: ContractType
  gte: ContractType
  lt: ContractType
  lte: ContractType
  like: ContractType
  notLike: ContractType
  iLike: ContractType
  notILike: ContractType
  in: [ContractType!]
  notIn: [ContractType!]
}

input ContractSort {
  field: ContractSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ContractSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  type
}

input ContractRuleFilter {
  and: [ContractRuleFilter!]
  or: [ContractRuleFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  feeType: ContractRuleFeeTypeFilterComparison
  frequency: StringFieldComparison
  value: FloatFieldComparison
  valueRateUom: StringFieldComparison
  contractId: IDFilterComparison
}

input ContractRuleFeeTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ContractRuleFeeType
  neq: ContractRuleFeeType
  gt: ContractRuleFeeType
  gte: ContractRuleFeeType
  lt: ContractRuleFeeType
  lte: ContractRuleFeeType
  like: ContractRuleFeeType
  notLike: ContractRuleFeeType
  iLike: ContractRuleFeeType
  notILike: ContractRuleFeeType
  in: [ContractRuleFeeType!]
  notIn: [ContractRuleFeeType!]
}

input ContractRuleSort {
  field: ContractRuleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ContractRuleSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  feeType
  frequency
  value
  valueRateUom
  contractId
}

input CountArtifactQueryModelFilter {
  and: [CountArtifactQueryModelFilter!]
  or: [CountArtifactQueryModelFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  status: CountArtifactApprovalStatusFilterComparison
  productId: IDFilterComparison
  productCode: StringFieldComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
  areaId: StringFieldComparison
  areaCode: StringFieldComparison
  lotId: IDFilterComparison
  lotCode: StringFieldComparison
  stockStatusId: IDFilterComparison
  stockStatusCode: StringFieldComparison
  stockStatusLabel: StringFieldComparison
  licensePlateId: IDFilterComparison
  licensePlateCode: StringFieldComparison
  licensePlateLastCount: DateFieldComparison
  licensePlateLedgerSyncStatus: LedgerSyncStatusFilterComparison
  licensePlateLedgerSyncStatusReason: StringFieldComparison
  baseCountedQuantity: StringFieldComparison
  baseExpectedQuantity: StringFieldComparison
  countedQuantity: StringFieldComparison
  expectedQuantity: StringFieldComparison
  quantityDifference: StringFieldComparison
  countedQuantityUOMId: StringFieldComparison
  countedQuantityUOMCode: StringFieldComparison
  countTaskId: StringFieldComparison
  countTaskCode: StringFieldComparison
  countTaskCompletedAt: StringFieldComparison
  countTaskCompletedByUserId: StringFieldComparison
  countTaskCompletedByUserFirstName: StringFieldComparison
  countTaskCompletedByUserLastName: StringFieldComparison
  approvalTaskId: StringFieldComparison
  approvalTaskCode: StringFieldComparison
  licensePlateStockAdjustment: BooleanFieldComparison
  completionStatus: CountArtifactCompleteStatusFilterComparison
}

input CountArtifactApprovalStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: CountArtifactApprovalStatus
  neq: CountArtifactApprovalStatus
  gt: CountArtifactApprovalStatus
  gte: CountArtifactApprovalStatus
  lt: CountArtifactApprovalStatus
  lte: CountArtifactApprovalStatus
  like: CountArtifactApprovalStatus
  notLike: CountArtifactApprovalStatus
  iLike: CountArtifactApprovalStatus
  notILike: CountArtifactApprovalStatus
  in: [CountArtifactApprovalStatus!]
  notIn: [CountArtifactApprovalStatus!]
}

input LedgerSyncStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: LedgerSyncStatus
  neq: LedgerSyncStatus
  gt: LedgerSyncStatus
  gte: LedgerSyncStatus
  lt: LedgerSyncStatus
  lte: LedgerSyncStatus
  like: LedgerSyncStatus
  notLike: LedgerSyncStatus
  iLike: LedgerSyncStatus
  notILike: LedgerSyncStatus
  in: [LedgerSyncStatus!]
  notIn: [LedgerSyncStatus!]
}

input CountArtifactCompleteStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: CountArtifactCompleteStatus
  neq: CountArtifactCompleteStatus
  gt: CountArtifactCompleteStatus
  gte: CountArtifactCompleteStatus
  lt: CountArtifactCompleteStatus
  lte: CountArtifactCompleteStatus
  like: CountArtifactCompleteStatus
  notLike: CountArtifactCompleteStatus
  iLike: CountArtifactCompleteStatus
  notILike: CountArtifactCompleteStatus
  in: [CountArtifactCompleteStatus!]
  notIn: [CountArtifactCompleteStatus!]
}

input CountArtifactQueryModelSort {
  field: CountArtifactQueryModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum CountArtifactQueryModelSortFields {
  id
  createdAt
  updatedAt
  status
  productId
  productCode
  binId
  binCode
  areaId
  areaCode
  lotId
  lotCode
  stockStatusId
  stockStatusCode
  stockStatusLabel
  licensePlateId
  licensePlateCode
  licensePlateLastCount
  licensePlateLedgerSyncStatus
  licensePlateLedgerSyncStatusReason
  baseCountedQuantity
  baseExpectedQuantity
  countedQuantity
  expectedQuantity
  quantityDifference
  countedQuantityUOMId
  countedQuantityUOMCode
  countTaskId
  countTaskCode
  countTaskCompletedAt
  countTaskCompletedByUserId
  countTaskCompletedByUserFirstName
  countTaskCompletedByUserLastName
  approvalTaskId
  approvalTaskCode
  licensePlateStockAdjustment
  completionStatus
}

input LicensePlateDetailFilter {
  and: [LicensePlateDetailFilter!]
  or: [LicensePlateDetailFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  description: StringFieldComparison
  length: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  dimensionUOMId: StringFieldComparison
  processStatus: StringFieldComparison
  aisleId: IDFilterComparison
  aisleCode: StringFieldComparison
  aisle: StringFieldComparison
  aisleColumnId: IDFilterComparison
  aisleColumnCode: StringFieldComparison
  column: StringFieldComparison
  level: IntFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  licensePlateMaterial: StringFieldComparison
  licensePlateMaterialType: StringFieldComparison
  parentId: IDFilterComparison
  binCode: StringFieldComparison
  totalWeight: FloatFieldComparison
  totalVolume: FloatFieldComparison
  areaCode: StringFieldComparison
  binId: IDFilterComparison
  binType: StringFieldComparison
  storageLocation: StringFieldComparison
  warehouseId: IDFilterComparison
  warehouseName: StringFieldComparison
  hasOpenTasks: BooleanFieldComparison
  inactive: LicensePlateStatusStateFilterComparison
  dispositionId: IDFilterComparison
  openTaskCount: IntFieldComparison
  deliveryItemId: IDFilterComparison
  fulfillmentItemId: IDFilterComparison
  deliveryId: IDFilterComparison
  fulfillmentId: IDFilterComparison
  erpSalesOrder: StringFieldComparison
  soldToBusinessPartnerId: IDFilterComparison
  soldToBusinessPartnerName: StringFieldComparison
  soldToBusinessPartnerCode: StringFieldComparison
  lpHierarchy: JSONFilterComparison
}

input LicensePlateStatusStateFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: LicensePlateStatusState
  neq: LicensePlateStatusState
  gt: LicensePlateStatusState
  gte: LicensePlateStatusState
  lt: LicensePlateStatusState
  lte: LicensePlateStatusState
  like: LicensePlateStatusState
  notLike: LicensePlateStatusState
  iLike: LicensePlateStatusState
  notILike: LicensePlateStatusState
  in: [LicensePlateStatusState!]
  notIn: [LicensePlateStatusState!]
}

input LicensePlateDetailSort {
  field: LicensePlateDetailSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LicensePlateDetailSortFields {
  id
  createdAt
  updatedAt
  deletedAt
  code
  description
  length
  width
  height
  dimensionUOMId
  processStatus
  aisleId
  aisleCode
  aisle
  aisleColumnId
  aisleColumnCode
  column
  level
  x
  y
  licensePlateMaterial
  licensePlateMaterialType
  parentId
  binCode
  totalWeight
  totalVolume
  areaCode
  binId
  binType
  storageLocation
  warehouseId
  warehouseName
  hasOpenTasks
  inactive
  dispositionId
  openTaskCount
  deliveryItemId
  fulfillmentItemId
  deliveryId
  fulfillmentId
  erpSalesOrder
  soldToBusinessPartnerId
  soldToBusinessPartnerName
  soldToBusinessPartnerCode
  lpHierarchy
}

input LicensePlateFilter {
  and: [LicensePlateFilter!]
  or: [LicensePlateFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  erpCode: StringFieldComparison
  length: FloatFieldComparison
  baseLength: FloatFieldComparison
  width: FloatFieldComparison
  baseWidth: FloatFieldComparison
  height: FloatFieldComparison
  baseHeight: FloatFieldComparison
  dimensionUOMId: IDFilterComparison
  grossWeight: FloatFieldComparison
  baseGrossWeight: FloatFieldComparison
  netWeight: FloatFieldComparison
  baseNetWeight: FloatFieldComparison
  weightUOMId: StringFieldComparison
  processStatus: StringFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  licensePlateMaterial: StringFieldComparison
  licensePlateMaterialType: StringFieldComparison
  description: StringFieldComparison
  storageLocation: StringFieldComparison
  parentId: IDFilterComparison
  dispositionId: StringFieldComparison
  ledgerSyncStatus: LedgerSyncStatusFilterComparison
  ledgerSyncStatusReason: StringFieldComparison
  partial: LicensePlatePartialFilterComparison
  licensePlateContentsUoMId: IDFilterComparison
  freshnessClock: DateFieldComparison
  lpLastMovement: DateFieldComparison
  lastCount: DateFieldComparison
}

input LicensePlatePartialFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: LicensePlatePartial
  neq: LicensePlatePartial
  gt: LicensePlatePartial
  gte: LicensePlatePartial
  lt: LicensePlatePartial
  lte: LicensePlatePartial
  like: LicensePlatePartial
  notLike: LicensePlatePartial
  iLike: LicensePlatePartial
  notILike: LicensePlatePartial
  in: [LicensePlatePartial!]
  notIn: [LicensePlatePartial!]
}

input LicensePlateSort {
  field: LicensePlateSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LicensePlateSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  erpCode
  length
  baseLength
  width
  baseWidth
  height
  baseHeight
  dimensionUOMId
  grossWeight
  baseGrossWeight
  netWeight
  baseNetWeight
  weightUOMId
  processStatus
  x
  y
  licensePlateMaterial
  licensePlateMaterialType
  description
  storageLocation
  parentId
  dispositionId
  ledgerSyncStatus
  ledgerSyncStatusReason
  partial
  licensePlateContentsUoMId
  freshnessClock
  lpLastMovement
  lastCount
}

input LicensePlateDetailQueryModelFilter {
  and: [LicensePlateDetailQueryModelFilter!]
  or: [LicensePlateDetailQueryModelFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  erpCode: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  processStatus: StringFieldComparison
  licensePlateMaterial: StringFieldComparison
  licensePlateMaterialType: StringFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  dispositionId: IDFilterComparison
  parentId: IDFilterComparison
  length: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  volume: FloatFieldComparison
  dimensionUOMId: IDFilterComparison
  dimensionUOMCode: StringFieldComparison
  grossWeight: FloatFieldComparison
  netWeight: FloatFieldComparison
  weightUOMId: IDFilterComparison
  weightUOMCode: StringFieldComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
  binType: BinTypeFilterComparison
  binLevel: IntFieldComparison
  storageLocation: StringFieldComparison
  warehouseId: IDFilterComparison
  warehouseName: StringFieldComparison
  warehouseCode: StringFieldComparison
  licensePlateStatus: LicensePlateStatusStateFilterComparison
  openTaskCount: FloatFieldComparison
  hasOpenTasks: BooleanFieldComparison
  ledgerSyncStatus: LedgerSyncStatusFilterComparison
  ledgerSyncStatusReason: StringFieldComparison
  partial: LicensePlatePartialFilterComparison
  licensePlateContentsUoMId: IDFilterComparison
  licensePlateContentsUoMCode: StringFieldComparison
  freshnessClock: DateFieldComparison
  areaCode: StringFieldComparison
  erpSalesOrder: StringFieldComparison
  lastCount: DateFieldComparison
}

input LicensePlateDetailQueryModelSort {
  field: LicensePlateDetailQueryModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LicensePlateDetailQueryModelSortFields {
  id
  code
  erpCode
  createdAt
  updatedAt
  deletedAt
  description
  processStatus
  licensePlateMaterial
  licensePlateMaterialType
  x
  y
  dispositionId
  parentId
  length
  width
  height
  volume
  dimensionUOMId
  dimensionUOMCode
  grossWeight
  netWeight
  weightUOMId
  weightUOMCode
  binId
  binCode
  binType
  binLevel
  storageLocation
  warehouseId
  warehouseName
  warehouseCode
  licensePlateStatus
  openTaskCount
  hasOpenTasks
  ledgerSyncStatus
  ledgerSyncStatusReason
  partial
  licensePlateContentsUoMId
  licensePlateContentsUoMCode
  freshnessClock
  areaCode
  erpSalesOrder
  lastCount
}

input LicensePlateStatusMappingFilter {
  and: [LicensePlateStatusMappingFilter!]
  or: [LicensePlateStatusMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  licensePlateId: IDFilterComparison
  licensePlateStatusId: IDFilterComparison
}

input LicensePlateStatusMappingSort {
  field: LicensePlateStatusMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LicensePlateStatusMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  licensePlateId
  licensePlateStatusId
}

input LicensePlateStatusFilter {
  and: [LicensePlateStatusFilter!]
  or: [LicensePlateStatusFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  label: StringFieldComparison
  code: LicensePlateStatusCodeFilterComparison
}

input LicensePlateStatusCodeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: LicensePlateStatusCode
  neq: LicensePlateStatusCode
  gt: LicensePlateStatusCode
  gte: LicensePlateStatusCode
  lt: LicensePlateStatusCode
  lte: LicensePlateStatusCode
  like: LicensePlateStatusCode
  notLike: LicensePlateStatusCode
  iLike: LicensePlateStatusCode
  notILike: LicensePlateStatusCode
  in: [LicensePlateStatusCode!]
  notIn: [LicensePlateStatusCode!]
}

input LicensePlateStatusSort {
  field: LicensePlateStatusSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LicensePlateStatusSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  label
  code
}

input TaskFilter {
  and: [TaskFilter!]
  or: [TaskFilter!]
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  warehouseId: IDFilterComparison
  sourceLicensePlateId: IDFilterComparison
  destinationLicensePlateId: IDFilterComparison
  teamId: IDFilterComparison
  userId: IDFilterComparison
  sourceBinId: IDFilterComparison
  destinationBinId: IDFilterComparison
  productId: IDFilterComparison
  taskTypeId: IDFilterComparison
  sourceLotId: IDFilterComparison
  destinationLotId: IDFilterComparison
  quantity: StringFieldComparison
  baseQuantity: StringFieldComparison
  status: TaskStatusFilterComparison
  sourceStockStatusId: IDFilterComparison
  metaData: JSONFilterComparison
  deliveryItemId: IDFilterComparison
  destinationStockStatusId: IDFilterComparison
  fulfillmentItemId: IDFilterComparison
  deliveryId: IDFilterComparison
  referringDoc: StringFieldComparison
  referringDocItem: StringFieldComparison
  dueDate: DateFieldComparison
  completionDate: DateFieldComparison
  parentTaskId: IDFilterComparison
  readonly: BooleanFieldComparison
  equipmentTypeId: IDFilterComparison
  taskGroupId: IDFilterComparison
  taskGroupPosition: FloatFieldComparison
  countAccuracy: FloatFieldComparison
  countType: PhysicalInventoryCountTypeFilterComparison
  internalStockOrderItemId: IDFilterComparison
  assignedUserId: IDFilterComparison
  assignedTeamId: IDFilterComparison
  assignedAt: DateFieldComparison
  assignedByUserId: IDFilterComparison
  startedByUserId: IDFilterComparison
  startedByTeamId: IDFilterComparison
  startedAt: DateFieldComparison
  startedAtLocationX: FloatFieldComparison
  startedAtLocationY: FloatFieldComparison
  completedByUserId: IDFilterComparison
  completedByTeamId: IDFilterComparison
  completedAt: DateFieldComparison
  completedAtLocationX: FloatFieldComparison
  completedAtLocationY: FloatFieldComparison
  linkedTaskId: IDFilterComparison
  inventoryCategory: PMInventoryCategoryFilterComparison
  taskType: TaskFilterTaskTypeFilter
}

input TaskStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: TaskStatus
  neq: TaskStatus
  gt: TaskStatus
  gte: TaskStatus
  lt: TaskStatus
  lte: TaskStatus
  like: TaskStatus
  notLike: TaskStatus
  iLike: TaskStatus
  notILike: TaskStatus
  in: [TaskStatus!]
  notIn: [TaskStatus!]
}

input PhysicalInventoryCountTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: PhysicalInventoryCountType
  neq: PhysicalInventoryCountType
  gt: PhysicalInventoryCountType
  gte: PhysicalInventoryCountType
  lt: PhysicalInventoryCountType
  lte: PhysicalInventoryCountType
  like: PhysicalInventoryCountType
  notLike: PhysicalInventoryCountType
  iLike: PhysicalInventoryCountType
  notILike: PhysicalInventoryCountType
  in: [PhysicalInventoryCountType!]
  notIn: [PhysicalInventoryCountType!]
}

input PMInventoryCategoryFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: PMInventoryCategory
  neq: PMInventoryCategory
  gt: PMInventoryCategory
  gte: PMInventoryCategory
  lt: PMInventoryCategory
  lte: PMInventoryCategory
  like: PMInventoryCategory
  notLike: PMInventoryCategory
  iLike: PMInventoryCategory
  notILike: PMInventoryCategory
  in: [PMInventoryCategory!]
  notIn: [PMInventoryCategory!]
}

input TaskFilterTaskTypeFilter {
  and: [TaskFilterTaskTypeFilter!]
  or: [TaskFilterTaskTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  label: StringFieldComparison
  code: StringFieldComparison
  description: StringFieldComparison
  referenceCategory: TaskTypeReferenceCategoryFilterComparison
}

input TaskTypeReferenceCategoryFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: TaskTypeReferenceCategory
  neq: TaskTypeReferenceCategory
  gt: TaskTypeReferenceCategory
  gte: TaskTypeReferenceCategory
  lt: TaskTypeReferenceCategory
  lte: TaskTypeReferenceCategory
  like: TaskTypeReferenceCategory
  notLike: TaskTypeReferenceCategory
  iLike: TaskTypeReferenceCategory
  notILike: TaskTypeReferenceCategory
  in: [TaskTypeReferenceCategory!]
  notIn: [TaskTypeReferenceCategory!]
}

input TaskSort {
  field: TaskSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TaskSortFields {
  updatedByEmail
  updatedById
  id
  createdAt
  updatedAt
  deletedAt
  code
  warehouseId
  sourceLicensePlateId
  destinationLicensePlateId
  teamId
  userId
  sourceBinId
  destinationBinId
  productId
  taskTypeId
  sourceLotId
  destinationLotId
  quantity
  baseQuantity
  status
  sourceStockStatusId
  metaData
  deliveryItemId
  destinationStockStatusId
  fulfillmentItemId
  deliveryId
  referringDoc
  referringDocItem
  dueDate
  completionDate
  parentTaskId
  readonly
  equipmentTypeId
  taskGroupId
  taskGroupPosition
  countAccuracy
  countType
  internalStockOrderItemId
  assignedUserId
  assignedTeamId
  assignedAt
  assignedByUserId
  startedByUserId
  startedByTeamId
  startedAt
  startedAtLocationX
  startedAtLocationY
  completedByUserId
  completedByTeamId
  completedAt
  completedAtLocationX
  completedAtLocationY
  linkedTaskId
  inventoryCategory
}

input TaskTypeAnalyticsFilter {
  warehouseId: ID!
  startDate: DateTime
  endDate: DateTime
}

input ViewTaskFilter {
  and: [ViewTaskFilter!]
  or: [ViewTaskFilter!]
  taskCode: StringFieldComparison
  deliveryId: IDFilterComparison
  parentTaskId: IDFilterComparison
  warehouseId: IDFilterComparison
  taskType: StringFieldComparison
  taskTypeCode: StringFieldComparison
  taskTypeReferenceCategory: TaskTypeReferenceCategoryFilterComparison
  productCode: StringFieldComparison
  productDescription: StringFieldComparison
  productLotManaged: BooleanFieldComparison
  warehouseCode: StringFieldComparison
  warehouseName: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  dueDate: DateFieldComparison
  completionDate: DateFieldComparison
  teamId: IDFilterComparison
  teamName: StringFieldComparison
  teamDescription: StringFieldComparison
  quantity: StringFieldComparison
  unitOfMeasure: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  sourceLotCode: StringFieldComparison
  destinationLotCode: StringFieldComparison
  sourceBinCode: StringFieldComparison
  destinationBinCode: StringFieldComparison
  sourceAreaCode: StringFieldComparison
  sourceStatus: StringFieldComparison
  sourceStockStatusId: StringFieldComparison
  referringDoc: StringFieldComparison
  referringDocItem: StringFieldComparison
  destinationAreaCode: StringFieldComparison
  destinationStatus: StringFieldComparison
  destinationStockStatusId: IDFilterComparison
  taskStatus: TaskStatusFilterComparison
  taskId: StringFieldComparison
  productId: StringFieldComparison
  sourceLicensePlateId: IDFilterComparison
  sourceLicensePlateCode: StringFieldComparison
  sourceLicensePlateDescription: StringFieldComparison
  sourceLotId: StringFieldComparison
  sourceAreaId: StringFieldComparison
  sourceBinId: StringFieldComparison
  destinationLicensePlateId: IDFilterComparison
  destinationLicensePlateCode: StringFieldComparison
  destinationLicensePlateDescription: StringFieldComparison
  destinationLotId: StringFieldComparison
  destinationAreaId: StringFieldComparison
  destinationBinId: StringFieldComparison
  fulfillmentItemId: IDFilterComparison
  fulfillmentItem: StringFieldComparison
  fulfillmentAndLineItemCode: StringFieldComparison
  deliveryItemId: IDFilterComparison
  deliveryItem: StringFieldComparison
  deliveryAndLineItemCode: StringFieldComparison
  weightUOMId: StringFieldComparison
  volume: FloatFieldComparison
  grossWeight: FloatFieldComparison
  netWeight: FloatFieldComparison
  readonly: BooleanFieldComparison
  deliveryErpCode: StringFieldComparison
  fulfillmentErpCode: StringFieldComparison
  assignedUserId: IDFilterComparison
  assignedUserEmail: StringFieldComparison
  assignedUserFirstName: StringFieldComparison
  assignedUserLastName: StringFieldComparison
  assignedTeamId: IDFilterComparison
  assignedTeamName: StringFieldComparison
  startedByTeamId: IDFilterComparison
  startedByTeamName: StringFieldComparison
  completedByTeamId: IDFilterComparison
  completedByTeamName: StringFieldComparison
  assignedAt: DateFieldComparison
  assignedByUserId: IDFilterComparison
  startedByUserId: IDFilterComparison
  startedByUserEmail: StringFieldComparison
  startedByUserFirstName: StringFieldComparison
  startedByUserLastName: StringFieldComparison
  startedAt: DateFieldComparison
  startedAtLocationX: FloatFieldComparison
  startedAtLocationY: FloatFieldComparison
  completedByUserId: IDFilterComparison
  completedByUserEmail: StringFieldComparison
  completedByUserFirstName: StringFieldComparison
  completedByUserLastName: StringFieldComparison
  completedAt: DateFieldComparison
  completedAtLocationX: FloatFieldComparison
  completedAtLocationY: FloatFieldComparison
  isTaskGroup: BooleanFieldComparison
  taskGroupId: IDFilterComparison
  taskGroupCode: StringFieldComparison
  taskGroupStatus: TaskStatusFilterComparison
  taskGroupPosition: FloatFieldComparison
  countAccuracy: FloatFieldComparison
  countType: PhysicalInventoryCountTypeFilterComparison
  internalStockOrderId: IDFilterComparison
  internalStockOrderCode: StringFieldComparison
  internalStockOrderItemId: IDFilterComparison
  linkedTaskId: IDFilterComparison
  internalStockOrderReferenceDocument: StringFieldComparison
}

input ViewTaskSort {
  field: ViewTaskSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewTaskSortFields {
  taskCode
  deliveryId
  parentTaskId
  warehouseId
  taskType
  taskTypeCode
  taskTypeReferenceCategory
  productCode
  productDescription
  productLotManaged
  warehouseCode
  warehouseName
  createdAt
  updatedAt
  dueDate
  completionDate
  teamId
  teamName
  teamDescription
  quantity
  unitOfMeasure
  unitOfMeasureId
  sourceLotCode
  destinationLotCode
  sourceBinCode
  destinationBinCode
  sourceAreaCode
  sourceStatus
  sourceStockStatusId
  referringDoc
  referringDocItem
  destinationAreaCode
  destinationStatus
  destinationStockStatusId
  taskStatus
  taskId
  productId
  sourceLicensePlateId
  sourceLicensePlateCode
  sourceLicensePlateDescription
  sourceLotId
  sourceAreaId
  sourceBinId
  destinationLicensePlateId
  destinationLicensePlateCode
  destinationLicensePlateDescription
  destinationLotId
  destinationAreaId
  destinationBinId
  fulfillmentItemId
  fulfillmentItem
  fulfillmentAndLineItemCode
  deliveryItemId
  deliveryItem
  deliveryAndLineItemCode
  weightUOMId
  volume
  grossWeight
  netWeight
  readonly
  deliveryErpCode
  fulfillmentErpCode
  assignedUserId
  assignedUserEmail
  assignedUserFirstName
  assignedUserLastName
  assignedTeamId
  assignedTeamName
  startedByTeamId
  startedByTeamName
  completedByTeamId
  completedByTeamName
  assignedAt
  assignedByUserId
  startedByUserId
  startedByUserEmail
  startedByUserFirstName
  startedByUserLastName
  startedAt
  startedAtLocationX
  startedAtLocationY
  completedByUserId
  completedByUserEmail
  completedByUserFirstName
  completedByUserLastName
  completedAt
  completedAtLocationX
  completedAtLocationY
  isTaskGroup
  taskGroupId
  taskGroupCode
  taskGroupStatus
  taskGroupPosition
  countAccuracy
  countType
  internalStockOrderId
  internalStockOrderCode
  internalStockOrderItemId
  linkedTaskId
  internalStockOrderReferenceDocument
}

input MobileViewTaskFilter {
  and: [MobileViewTaskFilter!]
  or: [MobileViewTaskFilter!]
  taskCode: StringFieldComparison
  deliveryId: IDFilterComparison
  parentTaskId: IDFilterComparison
  userId: IDFilterComparison
  warehouseId: IDFilterComparison
  taskType: StringFieldComparison
  taskTypeCode: StringFieldComparison
  productCode: StringFieldComparison
  productDescription: StringFieldComparison
  productLotManaged: BooleanFieldComparison
  unitOfMeasure: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  warehouseCode: StringFieldComparison
  warehouseName: StringFieldComparison
  createdAt: DateFieldComparison
  dueDate: DateFieldComparison
  completionDate: DateFieldComparison
  teamId: IDFilterComparison
  teamName: StringFieldComparison
  teamDescription: StringFieldComparison
  quantity: StringFieldComparison
  sourceLotCode: StringFieldComparison
  destinationLotCode: StringFieldComparison
  sourceBinCode: StringFieldComparison
  destinationBinCode: StringFieldComparison
  sourceAreaCode: StringFieldComparison
  sourceStatus: StringFieldComparison
  referringDoc: StringFieldComparison
  referringDocItem: StringFieldComparison
  destinationAreaCode: StringFieldComparison
  destinationStatus: StringFieldComparison
  taskStatus: TaskStatusFilterComparison
  taskId: StringFieldComparison
  productId: StringFieldComparison
  sourceLicensePlateId: StringFieldComparison
  sourceLicensePlateDescription: StringFieldComparison
  sourceLicensePlateCode: StringFieldComparison
  sourceLotId: StringFieldComparison
  sourceAreaId: StringFieldComparison
  sourceBinId: StringFieldComparison
  destinationLicensePlateId: StringFieldComparison
  destinationLicensePlateDescription: StringFieldComparison
  destinationLicensePlateCode: StringFieldComparison
  destinationLotId: StringFieldComparison
  destinationAreaId: StringFieldComparison
  destinationBinId: StringFieldComparison
  fulfillmentItem: StringFieldComparison
  deliveryItem: StringFieldComparison
  weightUOMId: StringFieldComparison
  volume: FloatFieldComparison
  grossWeight: FloatFieldComparison
  netWeight: FloatFieldComparison
  readonly: BooleanFieldComparison
  deliveryErpCode: StringFieldComparison
  fulfillmentErpCode: StringFieldComparison
  erpSalesOrder: StringFieldComparison
  shipToName: StringFieldComparison
  assignedUserId: IDFilterComparison
  assignedTeamId: IDFilterComparison
  assignedAt: DateFieldComparison
  assignedByUserId: IDFilterComparison
  startedByUserId: IDFilterComparison
  startedAt: DateFieldComparison
  startedAtLocationX: FloatFieldComparison
  startedAtLocationY: FloatFieldComparison
  completedByUserId: IDFilterComparison
  completedAt: DateFieldComparison
  completedAtLocationX: FloatFieldComparison
  completedAtLocationY: FloatFieldComparison
  isTaskGroup: BooleanFieldComparison
  taskGroupId: IDFilterComparison
  taskGroupCode: StringFieldComparison
  taskGroupStatus: TaskStatusFilterComparison
  taskGroupPosition: FloatFieldComparison
}

input MobileViewTaskSort {
  field: MobileViewTaskSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MobileViewTaskSortFields {
  taskCode
  deliveryId
  parentTaskId
  userId
  warehouseId
  taskType
  taskTypeCode
  productCode
  productDescription
  productLotManaged
  unitOfMeasure
  unitOfMeasureId
  warehouseCode
  warehouseName
  createdAt
  dueDate
  completionDate
  teamId
  teamName
  teamDescription
  quantity
  sourceLotCode
  destinationLotCode
  sourceBinCode
  destinationBinCode
  sourceAreaCode
  sourceStatus
  referringDoc
  referringDocItem
  destinationAreaCode
  destinationStatus
  taskStatus
  taskId
  productId
  sourceLicensePlateId
  sourceLicensePlateDescription
  sourceLicensePlateCode
  sourceLotId
  sourceAreaId
  sourceBinId
  destinationLicensePlateId
  destinationLicensePlateDescription
  destinationLicensePlateCode
  destinationLotId
  destinationAreaId
  destinationBinId
  fulfillmentItem
  deliveryItem
  weightUOMId
  volume
  grossWeight
  netWeight
  readonly
  deliveryErpCode
  fulfillmentErpCode
  erpSalesOrder
  shipToName
  assignedUserId
  assignedTeamId
  assignedAt
  assignedByUserId
  startedByUserId
  startedAt
  startedAtLocationX
  startedAtLocationY
  completedByUserId
  completedAt
  completedAtLocationX
  completedAtLocationY
  isTaskGroup
  taskGroupId
  taskGroupCode
  taskGroupStatus
  taskGroupPosition
}

input TaskTypeFilter {
  and: [TaskTypeFilter!]
  or: [TaskTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  label: StringFieldComparison
  code: StringFieldComparison
  description: StringFieldComparison
  referenceCategory: TaskTypeReferenceCategoryFilterComparison
}

input TaskTypeSort {
  field: TaskTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TaskTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  label
  code
  description
  referenceCategory
}

input ViewTaskTypeStockStatusMappingFilter {
  and: [ViewTaskTypeStockStatusMappingFilter!]
  or: [ViewTaskTypeStockStatusMappingFilter!]
  warehouseId: IDFilterComparison
  taskTypeId: IDFilterComparison
  taskTypeCode: StringFieldComparison
  taskTypeLabel: StringFieldComparison
}

input ViewTaskTypeStockStatusMappingSort {
  field: ViewTaskTypeStockStatusMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewTaskTypeStockStatusMappingSortFields {
  warehouseId
  taskTypeId
  taskTypeCode
  taskTypeLabel
}

input StockStatusTypeFilter {
  and: [StockStatusTypeFilter!]
  or: [StockStatusTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  stockStatusTypeStatus: StockStatusTypeStatusFilterComparison
  default: BooleanFieldComparison
}

input StockStatusTypeStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: StockStatusTypeStatus
  neq: StockStatusTypeStatus
  gt: StockStatusTypeStatus
  gte: StockStatusTypeStatus
  lt: StockStatusTypeStatus
  lte: StockStatusTypeStatus
  like: StockStatusTypeStatus
  notLike: StockStatusTypeStatus
  iLike: StockStatusTypeStatus
  notILike: StockStatusTypeStatus
  in: [StockStatusTypeStatus!]
  notIn: [StockStatusTypeStatus!]
}

input StockStatusTypeSort {
  field: StockStatusTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum StockStatusTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  description
  stockStatusTypeStatus
  default
}

input ViewStockStatusFilter {
  and: [ViewStockStatusFilter!]
  or: [ViewStockStatusFilter!]
  code: StringFieldComparison
  id: IDFilterComparison
  label: StringFieldComparison
  description: StringFieldComparison
  sapStockStatusCode: StringFieldComparison
  stockStatusTypeStatus: StockStatusTypeStatusFilterComparison
  sapStockStatusId: IDFilterComparison
  sapStockStatusLabel: StringFieldComparison
  sapHuUserStatusId: IDFilterComparison
  sapHuUserStatusCode: StringFieldComparison
  warehouseId: IDFilterComparison
  warehouseCode: StringFieldComparison
  systemConnectionId: IDFilterComparison
  default: BooleanFieldComparison
  stockStatusMappingId: StringFieldComparison
}

input ViewStockStatusSort {
  field: ViewStockStatusSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewStockStatusSortFields {
  code
  id
  label
  description
  sapStockStatusCode
  stockStatusTypeStatus
  sapStockStatusId
  sapStockStatusLabel
  sapHuUserStatusId
  sapHuUserStatusCode
  warehouseId
  warehouseCode
  systemConnectionId
  default
  stockStatusMappingId
}

input SapStockStatusTypeFilter {
  and: [SapStockStatusTypeFilter!]
  or: [SapStockStatusTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  systemConnectionId: IDFilterComparison
}

input SapStockStatusTypeSort {
  field: SapStockStatusTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SapStockStatusTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  systemConnectionId
}

input SapHuUserStatusFilter {
  and: [SapHuUserStatusFilter!]
  or: [SapHuUserStatusFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  systemConnectionId: IDFilterComparison
  priority: IntFieldComparison
}

input SapHuUserStatusSort {
  field: SapHuUserStatusSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SapHuUserStatusSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  systemConnectionId
  priority
}

input UnitOfMeasureProductConversionFilter {
  and: [UnitOfMeasureProductConversionFilter!]
  or: [UnitOfMeasureProductConversionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  conversionFactor: FloatFieldComparison
  grossWeight: FloatFieldComparison
  weightUOMId: StringFieldComparison
  volume: FloatFieldComparison
  volumeUOMId: StringFieldComparison
  length: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  dimensionUOMId: StringFieldComparison
  isBaseUom: BooleanFieldComparison
  warehouseUnitOfMeasure: JSONFilterComparison
  productId: IDFilterComparison
  unitOfMeasureGlossaryId: IDFilterComparison
}

input UnitOfMeasureProductConversionSort {
  field: UnitOfMeasureProductConversionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum UnitOfMeasureProductConversionSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  conversionFactor
  grossWeight
  weightUOMId
  volume
  volumeUOMId
  length
  width
  height
  dimensionUOMId
  isBaseUom
  warehouseUnitOfMeasure
  productId
  unitOfMeasureGlossaryId
}

input ViewUnitOfMeasureProductConversionFilter {
  and: [ViewUnitOfMeasureProductConversionFilter!]
  or: [ViewUnitOfMeasureProductConversionFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  productId: IDFilterComparison
  conversionFactor: FloatFieldComparison
  grossWeight: FloatFieldComparison
  weightUOMId: IDFilterComparison
  weightUOMCode: StringFieldComparison
  weightUOMLabel: StringFieldComparison
  volume: FloatFieldComparison
  volumeUOMId: IDFilterComparison
  volumeUOMCode: StringFieldComparison
  volumeUOMLabel: StringFieldComparison
  length: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  dimensionUOMId: IDFilterComparison
  dimensionUOMCode: StringFieldComparison
  dimensionUOMLabel: StringFieldComparison
  isBaseUom: BooleanFieldComparison
}

input ViewUnitOfMeasureProductConversionSort {
  field: ViewUnitOfMeasureProductConversionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewUnitOfMeasureProductConversionSortFields {
  id
  code
  label
  description
  productId
  conversionFactor
  grossWeight
  weightUOMId
  weightUOMCode
  weightUOMLabel
  volume
  volumeUOMId
  volumeUOMCode
  volumeUOMLabel
  length
  width
  height
  dimensionUOMId
  dimensionUOMCode
  dimensionUOMLabel
  isBaseUom
}

input InventoryBaseQueryShapeFilter {
  and: [InventoryBaseQueryShapeFilter!]
  or: [InventoryBaseQueryShapeFilter!]
  id: IDFilterComparison
  productId: IDFilterComparison
  productCode: StringFieldComparison
  productDescription: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  unitOfMeasure: StringFieldComparison
  quantity: StringFieldComparison
  openTaskQuantity: StringFieldComparison
  availableQuantity: StringFieldComparison
  openTaskCount: IntFieldComparison
  stockStatus: StringFieldComparison
  stockStatusTypeId: IDFilterComparison
  binCode: StringFieldComparison
  binType: StringFieldComparison
  areaCode: StringFieldComparison
  areaStorageType: AreaStorageTypeFilterComparison
  aisleId: StringFieldComparison
  aisleCode: StringFieldComparison
  binId: IDFilterComparison
  warehouseId: IDFilterComparison
  grossWeight: FloatFieldComparison
  netWeight: FloatFieldComparison
  weightUOM: StringFieldComparison
  grossVolume: FloatFieldComparison
  volumeUOM: StringFieldComparison
  length: FloatFieldComparison
  width: FloatFieldComparison
  height: FloatFieldComparison
  dimensionUOM: StringFieldComparison
  parentId: StringFieldComparison
  licensePlateStorageLocation: StringFieldComparison
  licensePlateId: IDFilterComparison
  licensePlateStatus: LicensePlateStatusStateFilterComparison
  licensePlateCode: StringFieldComparison
  licensePlateDescription: StringFieldComparison
  licensePlateLedgerSyncStatus: LedgerSyncStatusFilterComparison
  licensePlatePartial: LicensePlatePartialFilterComparison
  warehouseCode: StringFieldComparison
  lotId: IDFilterComparison
  lotCode: StringFieldComparison
  lotExpiration: DateFieldComparison
  lotRestricted: BooleanFieldComparison
  lotManaged: BooleanFieldComparison
  areaId: IDFilterComparison
  deliveryId: IDFilterComparison
  deliveryCode: StringFieldComparison
  deliveryItemId: IDFilterComparison
  fulfillmentItemId: IDFilterComparison
  fulfillmentItemItem: StringFieldComparison
  deliveryItemItem: StringFieldComparison
  stockFulfillmentId: IDFilterComparison
  stockFulfillmentCode: StringFieldComparison
  stockDeliveryId: IDFilterComparison
  stockDeliveryCode: StringFieldComparison
  erpSalesOrder: StringFieldComparison
  soldToBusinessPartnerId: IDFilterComparison
  soldToBusinessPartnerName: StringFieldComparison
  soldToBusinessPartnerCode: StringFieldComparison
  businessPartnerCode: StringFieldComparison
  businessPartnerName: StringFieldComparison
}

input InventoryBaseQueryShapeSort {
  field: InventoryBaseQueryShapeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InventoryBaseQueryShapeSortFields {
  id
  productId
  productCode
  productDescription
  unitOfMeasureId
  unitOfMeasure
  quantity
  openTaskQuantity
  availableQuantity
  openTaskCount
  stockStatus
  stockStatusTypeId
  binCode
  binType
  areaCode
  areaStorageType
  aisleId
  aisleCode
  binId
  warehouseId
  grossWeight
  netWeight
  weightUOM
  grossVolume
  volumeUOM
  length
  width
  height
  dimensionUOM
  parentId
  licensePlateStorageLocation
  licensePlateId
  licensePlateStatus
  licensePlateCode
  licensePlateDescription
  licensePlateLedgerSyncStatus
  licensePlatePartial
  warehouseCode
  lotId
  lotCode
  lotExpiration
  lotRestricted
  lotManaged
  areaId
  deliveryId
  deliveryCode
  deliveryItemId
  fulfillmentItemId
  fulfillmentItemItem
  deliveryItemItem
  stockFulfillmentId
  stockFulfillmentCode
  stockDeliveryId
  stockDeliveryCode
  erpSalesOrder
  soldToBusinessPartnerId
  soldToBusinessPartnerName
  soldToBusinessPartnerCode
  businessPartnerCode
  businessPartnerName
}

input InternalStockOrderAssignedInventoryFilter {
  and: [InternalStockOrderAssignedInventoryFilter!]
  or: [InternalStockOrderAssignedInventoryFilter!]
  productId: IDFilterComparison
  productCode: StringFieldComparison
  productDescription: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  unitOfMeasure: StringFieldComparison
  quantity: StringFieldComparison
  openTaskQuantity: StringFieldComparison
  availableQuantity: StringFieldComparison
  openTaskCount: IntFieldComparison
  stockStatus: StringFieldComparison
  stockStatusTypeId: IDFilterComparison
  binCode: StringFieldComparison
  binId: IDFilterComparison
  warehouseId: IDFilterComparison
  licensePlateId: IDFilterComparison
  licensePlateCode: StringFieldComparison
  licensePlateDescription: StringFieldComparison
  warehouseCode: StringFieldComparison
  lotId: IDFilterComparison
  lotCode: StringFieldComparison
  fulfillmentItemId: IDFilterComparison
  fulfillmentItemItem: StringFieldComparison
  internalStockOrderItemId: IDFilterComparison
  activeOrCompletedPickTask: BooleanFieldComparison
}

input InternalStockOrderAssignedInventorySort {
  field: InternalStockOrderAssignedInventorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InternalStockOrderAssignedInventorySortFields {
  productId
  productCode
  productDescription
  unitOfMeasureId
  unitOfMeasure
  quantity
  openTaskQuantity
  availableQuantity
  openTaskCount
  stockStatus
  stockStatusTypeId
  binCode
  binId
  warehouseId
  licensePlateId
  licensePlateCode
  licensePlateDescription
  warehouseCode
  lotId
  lotCode
  fulfillmentItemId
  fulfillmentItemItem
  internalStockOrderItemId
  activeOrCompletedPickTask
}

input SapDeliveryDocumentTypeFilter {
  and: [SapDeliveryDocumentTypeFilter!]
  or: [SapDeliveryDocumentTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  deliveryType: StringFieldComparison
  documentType: StringFieldComparison
  systemConnectionId: IDFilterComparison
}

input SapDeliveryDocumentTypeSort {
  field: SapDeliveryDocumentTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SapDeliveryDocumentTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  deliveryType
  documentType
  systemConnectionId
}

input WarehousePreferredUnitOfMeasureFilter {
  and: [WarehousePreferredUnitOfMeasureFilter!]
  or: [WarehousePreferredUnitOfMeasureFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  productId: IDFilterComparison
  warehouseId: IDFilterComparison
  unitOfMeasureId: IDFilterComparison
}

input WarehousePreferredUnitOfMeasureSort {
  field: WarehousePreferredUnitOfMeasureSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehousePreferredUnitOfMeasureSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  productId
  warehouseId
  unitOfMeasureId
}

input InventoryProductQueryShapeFilter {
  and: [InventoryProductQueryShapeFilter!]
  or: [InventoryProductQueryShapeFilter!]
  productId: IDFilterComparison
  productCode: StringFieldComparison
  businessPartnerCode: StringFieldComparison
  businessPartnerName: StringFieldComparison
  description: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  unitOfMeasure: StringFieldComparison
  grossWeight: FloatFieldComparison
  totalWeightUOM: StringFieldComparison
  openTaskQuantity: StringFieldComparison
  availableQuantity: StringFieldComparison
  openTaskCount: IntFieldComparison
  quantity: StringFieldComparison
  stockStatus: StringFieldComparison
  stockStatusTypeId: IDFilterComparison
  warehouseId: IDFilterComparison
}

input InventoryProductQueryShapeSort {
  field: InventoryProductQueryShapeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InventoryProductQueryShapeSortFields {
  productId
  productCode
  businessPartnerCode
  businessPartnerName
  description
  unitOfMeasureId
  unitOfMeasure
  grossWeight
  totalWeightUOM
  openTaskQuantity
  availableQuantity
  openTaskCount
  quantity
  stockStatus
  stockStatusTypeId
  warehouseId
}

input InventoryLotQueryShapeFilter {
  and: [InventoryLotQueryShapeFilter!]
  or: [InventoryLotQueryShapeFilter!]
  productId: IDFilterComparison
  productCode: StringFieldComparison
  description: StringFieldComparison
  lotId: IDFilterComparison
  lotCode: StringFieldComparison
  expirationDate: DateFieldComparison
  productionDate: DateFieldComparison
  unitOfMeasureId: IDFilterComparison
  unitOfMeasure: StringFieldComparison
  grossWeight: FloatFieldComparison
  totalWeightUOM: StringFieldComparison
  openTaskQuantity: StringFieldComparison
  availableQuantity: StringFieldComparison
  openTaskCount: IntFieldComparison
  quantity: StringFieldComparison
  stockStatus: StringFieldComparison
  stockStatusTypeId: IDFilterComparison
  warehouseId: IDFilterComparison
  businessPartnerCode: StringFieldComparison
  businessPartnerName: StringFieldComparison
}

input InventoryLotQueryShapeSort {
  field: InventoryLotQueryShapeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InventoryLotQueryShapeSortFields {
  productId
  productCode
  description
  lotId
  lotCode
  expirationDate
  productionDate
  unitOfMeasureId
  unitOfMeasure
  grossWeight
  totalWeightUOM
  openTaskQuantity
  availableQuantity
  openTaskCount
  quantity
  stockStatus
  stockStatusTypeId
  warehouseId
  businessPartnerCode
  businessPartnerName
}

input TaskTypeBinStatusBinsQueryDtoFilter {
  and: [TaskTypeBinStatusBinsQueryDtoFilter!]
  or: [TaskTypeBinStatusBinsQueryDtoFilter!]
  code: StringFieldComparison
  id: IDFilterComparison
  areaCode: StringFieldComparison
  warehouseId: IDFilterComparison
  aisle: StringFieldComparison
  level: NumberFieldComparison
  column: StringFieldComparison
  verificationCode: StringFieldComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  lastMovement: DateFieldComparison
  lastCount: DateFieldComparison
  areaId: IDFilterComparison
  hasOpenTasks: BooleanFieldComparison
  containsProducts: BooleanFieldComparison
}

input NumberFieldComparison {
  is: Boolean
  isNot: Boolean
  eq: Float
  neq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float!]
  notIn: [Float!]
  between: NumberFieldComparisonBetween
  notBetween: NumberFieldComparisonBetween
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

input TaskTypeBinStatusBinsQueryDtoSort {
  field: TaskTypeBinStatusBinsQueryDtoSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TaskTypeBinStatusBinsQueryDtoSortFields {
  code
  id
  areaCode
  warehouseId
  aisle
  level
  column
  verificationCode
  x
  y
  lastMovement
  lastCount
  areaId
  hasOpenTasks
  containsProducts
}

input ViewTaskTypeBinStatusMappingFilter {
  and: [ViewTaskTypeBinStatusMappingFilter!]
  or: [ViewTaskTypeBinStatusMappingFilter!]
  warehouseId: IDFilterComparison
  taskTypeId: IDFilterComparison
  taskTypeLabel: StringFieldComparison
  taskTypeCode: StringFieldComparison
}

input ViewTaskTypeBinStatusMappingSort {
  field: ViewTaskTypeBinStatusMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewTaskTypeBinStatusMappingSortFields {
  warehouseId
  taskTypeId
  taskTypeLabel
  taskTypeCode
}

input TaskGroupFilter {
  and: [TaskGroupFilter!]
  or: [TaskGroupFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  assignedAt: DateFieldComparison
  completedAtLocationX: FloatFieldComparison
  completedAtLocationY: FloatFieldComparison
  completedAt: DateFieldComparison
  plannedCompletionAt: DateFieldComparison
  plannedStartAt: DateFieldComparison
  startedAtLocationX: FloatFieldComparison
  startedAtLocationY: FloatFieldComparison
  startedAt: DateFieldComparison
  status: TaskGroupTaskStatusFilterComparison
  assignedByUserId: IDFilterComparison
  assignedTeamId: IDFilterComparison
  taskTypeId: IDFilterComparison
  startedByUserId: IDFilterComparison
  assignedUserId: IDFilterComparison
  completedByUserId: IDFilterComparison
  warehouseId: IDFilterComparison
}

input TaskGroupTaskStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: TaskGroupTaskStatus
  neq: TaskGroupTaskStatus
  gt: TaskGroupTaskStatus
  gte: TaskGroupTaskStatus
  lt: TaskGroupTaskStatus
  lte: TaskGroupTaskStatus
  like: TaskGroupTaskStatus
  notLike: TaskGroupTaskStatus
  iLike: TaskGroupTaskStatus
  notILike: TaskGroupTaskStatus
  in: [TaskGroupTaskStatus!]
  notIn: [TaskGroupTaskStatus!]
}

input TaskGroupSort {
  field: TaskGroupSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum TaskGroupSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  assignedAt
  completedAtLocationX
  completedAtLocationY
  completedAt
  plannedCompletionAt
  plannedStartAt
  startedAtLocationX
  startedAtLocationY
  startedAt
  status
  assignedByUserId
  assignedTeamId
  taskTypeId
  startedByUserId
  assignedUserId
  completedByUserId
  warehouseId
}

input ViewTaskGroupFilter {
  and: [ViewTaskGroupFilter!]
  or: [ViewTaskGroupFilter!]
  assignedTeamId: IDFilterComparison
  assignedTeamName: StringFieldComparison
  assignedUserFirstName: StringFieldComparison
  assignedUserLastName: StringFieldComparison
  assignedUserId: IDFilterComparison
  code: StringFieldComparison
  completedAt: DateFieldComparison
  completedUserserFirstName: StringFieldComparison
  completedUserLastName: StringFieldComparison
  completedUserId: IDFilterComparison
  plannedCompletionAt: DateFieldComparison
  plannedStartAt: DateFieldComparison
  startedAt: DateFieldComparison
  taskGroupId: IDFilterComparison
  warehouseId: IDFilterComparison
  warehouseName: StringFieldComparison
  workingTeamId: IDFilterComparison
  workingTeamName: StringFieldComparison
}

input ViewTaskGroupSort {
  field: ViewTaskGroupSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewTaskGroupSortFields {
  assignedTeamId
  assignedTeamName
  assignedUserFirstName
  assignedUserLastName
  assignedUserId
  code
  completedAt
  completedUserserFirstName
  completedUserLastName
  completedUserId
  plannedCompletionAt
  plannedStartAt
  startedAt
  taskGroupId
  warehouseId
  warehouseName
  workingTeamId
  workingTeamName
}

input LotFilter {
  and: [LotFilter!]
  or: [LotFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  productId: IDFilterComparison
  productNumber: StringFieldComparison
  warehouseStatus: BooleanFieldComparison
  erpCreatedOn: DateFieldComparison
  erpUpdatedOn: DateFieldComparison
  productionDate: DateFieldComparison
  expiration: DateFieldComparison
  supplierLotNumber: StringFieldComparison
  erpSynced: BooleanFieldComparison
  restricted: BooleanFieldComparison
}

input LotSort {
  field: LotSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LotSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  productId
  productNumber
  warehouseStatus
  erpCreatedOn
  erpUpdatedOn
  productionDate
  expiration
  supplierLotNumber
  erpSynced
  restricted
}

input ViewLotFilter {
  and: [ViewLotFilter!]
  or: [ViewLotFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  erpCreatedOn: DateFieldComparison
  erpUpdatedOn: DateFieldComparison
  updatedAt: DateFieldComparison
  productionDate: DateFieldComparison
  expiration: DateFieldComparison
  supplierLotNumber: StringFieldComparison
  productId: IDFilterComparison
  productCode: StringFieldComparison
  restricted: BooleanFieldComparison
}

input ViewLotSort {
  field: ViewLotSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewLotSortFields {
  id
  code
  erpCreatedOn
  erpUpdatedOn
  updatedAt
  productionDate
  expiration
  supplierLotNumber
  productId
  productCode
  restricted
}

input ProductFilter {
  and: [ProductFilter!]
  or: [ProductFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  companyId: IDFilterComparison
  code: StringFieldComparison
  name: StringFieldComparison
  type: StringFieldComparison
  description: StringFieldComparison
  lotManaged: BooleanFieldComparison
  status: ProductAvailabilityFilterComparison
  netWeight: FloatFieldComparison
  totalWeightUOMId: StringFieldComparison
  grossWeight: FloatFieldComparison
  volumeUOMId: StringFieldComparison
  volume: FloatFieldComparison
  erpUpdatedAt: DateFieldComparison
  erpCreatedAt: DateFieldComparison
  gtin: StringFieldComparison
  businessPartnerId: IDFilterComparison
  active: BooleanFieldComparison
}

input ProductAvailabilityFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ProductAvailability
  neq: ProductAvailability
  gt: ProductAvailability
  gte: ProductAvailability
  lt: ProductAvailability
  lte: ProductAvailability
  like: ProductAvailability
  notLike: ProductAvailability
  iLike: ProductAvailability
  notILike: ProductAvailability
  in: [ProductAvailability!]
  notIn: [ProductAvailability!]
}

input ProductSort {
  field: ProductSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  companyId
  code
  name
  type
  description
  lotManaged
  status
  netWeight
  totalWeightUOMId
  grossWeight
  volumeUOMId
  volume
  erpUpdatedAt
  erpCreatedAt
  gtin
  businessPartnerId
  active
}

input ProductQueryShapeFilter {
  and: [ProductQueryShapeFilter!]
  or: [ProductQueryShapeFilter!]
  companyId: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  id: IDFilterComparison
  code: StringFieldComparison
  baseUOMId: IDFilterComparison
  baseUOMCode: StringFieldComparison
  name: StringFieldComparison
  type: StringFieldComparison
  description: StringFieldComparison
  lotManaged: BooleanFieldComparison
  status: ProductAvailabilityFilterComparison
  netWeight: FloatFieldComparison
  totalWeightUOMId: StringFieldComparison
  totalWeightUOMCode: StringFieldComparison
  totalWeightUOMLabel: StringFieldComparison
  grossWeight: FloatFieldComparison
  volumeUOMId: StringFieldComparison
  volumeUOMCode: StringFieldComparison
  volumeUOMLabel: StringFieldComparison
  volume: FloatFieldComparison
  erpUpdatedAt: DateFieldComparison
  erpCreatedAt: DateFieldComparison
  gtin: StringFieldComparison
}

input ProductQueryShapeSort {
  field: ProductQueryShapeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ProductQueryShapeSortFields {
  companyId
  createdAt
  updatedAt
  id
  code
  baseUOMId
  baseUOMCode
  name
  type
  description
  lotManaged
  status
  netWeight
  totalWeightUOMId
  totalWeightUOMCode
  totalWeightUOMLabel
  grossWeight
  volumeUOMId
  volumeUOMCode
  volumeUOMLabel
  volume
  erpUpdatedAt
  erpCreatedAt
  gtin
}

input InternalStockOrderFilter {
  and: [InternalStockOrderFilter!]
  or: [InternalStockOrderFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  referenceDocument: StringFieldComparison
  internalStockOrderTypeId: StringFieldComparison
}

input InternalStockOrderSort {
  field: InternalStockOrderSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InternalStockOrderSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  referenceDocument
  internalStockOrderTypeId
}

input InternalStockOrderTypeFilter {
  and: [InternalStockOrderTypeFilter!]
  or: [InternalStockOrderTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: InternalStockOrderTypeCodeFilterComparison
  label: StringFieldComparison
  description: StringFieldComparison
}

input InternalStockOrderTypeCodeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: InternalStockOrderTypeCode
  neq: InternalStockOrderTypeCode
  gt: InternalStockOrderTypeCode
  gte: InternalStockOrderTypeCode
  lt: InternalStockOrderTypeCode
  lte: InternalStockOrderTypeCode
  like: InternalStockOrderTypeCode
  notLike: InternalStockOrderTypeCode
  iLike: InternalStockOrderTypeCode
  notILike: InternalStockOrderTypeCode
  in: [InternalStockOrderTypeCode!]
  notIn: [InternalStockOrderTypeCode!]
}

input InternalStockOrderTypeSort {
  field: InternalStockOrderTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InternalStockOrderTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  description
}

input ViewDeliveryFilter {
  and: [ViewDeliveryFilter!]
  or: [ViewDeliveryFilter!]
  id: IDFilterComparison
  type: DeliveryTypeFilterComparison
  category: DeliveryCategoryFilterComparison
  deliveryDocumentType: StringFieldComparison
  erpCode: StringFieldComparison
  warehouseCode: StringFieldComparison
  billOfLading: StringFieldComparison
  dueDate: DateFieldComparison
  promiseDate: DateFieldComparison
  shipReadyDate: DateFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  erpCreated: DateFieldComparison
  erpLastChanged: DateFieldComparison
  totalGrossWeight: FloatFieldComparison
  totalWeightUOMId: IDFilterComparison
  totalWeightUOMCode: StringFieldComparison
  totalWeightUOMLabel: StringFieldComparison
  pointOfContact: StringFieldComparison
  totalNetWeight: FloatFieldComparison
  totalVolume: FloatFieldComparison
  totalVolumeUOMId: IDFilterComparison
  totalVolumeUOMCode: StringFieldComparison
  totalVolumeUOMLabel: StringFieldComparison
  supplierId: IDFilterComparison
  supplierBusinessPartnerCode: StringFieldComparison
  supplierBusinessPartnerName: StringFieldComparison
  supplierCode: StringFieldComparison
  supplierName: StringFieldComparison
  shipToId: IDFilterComparison
  shipToBusinessPartnerCode: StringFieldComparison
  shipToBusinessPartnerName: StringFieldComparison
  shipToCode: StringFieldComparison
  soldToId: IDFilterComparison
  soldToBusinessPartnerCode: StringFieldComparison
  soldToBusinessPartnerName: StringFieldComparison
  soldToCode: StringFieldComparison
  erpSalesOrder: StringFieldComparison
  export: StringFieldComparison
  goodsReceiptOrIssueStatus: DeliveryCompletionStatusFilterComparison
  pickOrPutawayStatus: DeliveryCompletionStatusFilterComparison
  loadOrUnloadStatus: DeliveryCompletionStatusFilterComparison
  deliveryStatus: DeliveryCompletionStatusFilterComparison
  blockStatus: StringFieldComparison
  erpBlockingReason: StringFieldComparison
  warehouseId: IDFilterComparison
  doorId: IDFilterComparison
  doorCode: StringFieldComparison
  fulfillmentBlockId: IDFilterComparison
  fulfillmentBlockLabel: StringFieldComparison
  shipToName: StringFieldComparison
  soldToName: StringFieldComparison
  itemCount: IntFieldComparison
  progress: IntFieldComparison
  progressString: DeliveryCompletionStatusFilterComparison
  orderConfirmationFileId: IDFilterComparison
  erpPurchaseOrder: StringFieldComparison
  availability: IntFieldComparison
}

input DeliveryTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: DeliveryType
  neq: DeliveryType
  gt: DeliveryType
  gte: DeliveryType
  lt: DeliveryType
  lte: DeliveryType
  like: DeliveryType
  notLike: DeliveryType
  iLike: DeliveryType
  notILike: DeliveryType
  in: [DeliveryType!]
  notIn: [DeliveryType!]
}

input DeliveryCategoryFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: DeliveryCategory
  neq: DeliveryCategory
  gt: DeliveryCategory
  gte: DeliveryCategory
  lt: DeliveryCategory
  lte: DeliveryCategory
  like: DeliveryCategory
  notLike: DeliveryCategory
  iLike: DeliveryCategory
  notILike: DeliveryCategory
  in: [DeliveryCategory!]
  notIn: [DeliveryCategory!]
}

input DeliveryCompletionStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: DeliveryCompletionStatus
  neq: DeliveryCompletionStatus
  gt: DeliveryCompletionStatus
  gte: DeliveryCompletionStatus
  lt: DeliveryCompletionStatus
  lte: DeliveryCompletionStatus
  like: DeliveryCompletionStatus
  notLike: DeliveryCompletionStatus
  iLike: DeliveryCompletionStatus
  notILike: DeliveryCompletionStatus
  in: [DeliveryCompletionStatus!]
  notIn: [DeliveryCompletionStatus!]
}

input ViewDeliverySort {
  field: ViewDeliverySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewDeliverySortFields {
  id
  type
  category
  deliveryDocumentType
  erpCode
  warehouseCode
  billOfLading
  dueDate
  promiseDate
  shipReadyDate
  createdAt
  updatedAt
  erpCreated
  erpLastChanged
  totalGrossWeight
  totalWeightUOMId
  totalWeightUOMCode
  totalWeightUOMLabel
  pointOfContact
  totalNetWeight
  totalVolume
  totalVolumeUOMId
  totalVolumeUOMCode
  totalVolumeUOMLabel
  supplierId
  supplierBusinessPartnerCode
  supplierBusinessPartnerName
  supplierCode
  supplierName
  shipToId
  shipToBusinessPartnerCode
  shipToBusinessPartnerName
  shipToCode
  soldToId
  soldToBusinessPartnerCode
  soldToBusinessPartnerName
  soldToCode
  erpSalesOrder
  export
  goodsReceiptOrIssueStatus
  pickOrPutawayStatus
  loadOrUnloadStatus
  deliveryStatus
  blockStatus
  erpBlockingReason
  warehouseId
  doorId
  doorCode
  fulfillmentBlockId
  fulfillmentBlockLabel
  shipToName
  soldToName
  itemCount
  progress
  progressString
  orderConfirmationFileId
  erpPurchaseOrder
  availability
}

input DeliveryFilter {
  and: [DeliveryFilter!]
  or: [DeliveryFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  billOfLading: StringFieldComparison
  blockStatus: StringFieldComparison
  category: DeliveryCategoryFilterComparison
  deliveryStatus: DeliveryCompletionStatusFilterComparison
  dueDate: DateFieldComparison
  erpBlockingReason: StringFieldComparison
  erpCode: StringFieldComparison
  erpCreated: DateFieldComparison
  erpLastChanged: DateFieldComparison
  erpPurchaseOrder: StringFieldComparison
  erpSalesOrder: StringFieldComparison
  export: StringFieldComparison
  goodsReceiptOrIssueStatus: DeliveryCompletionStatusFilterComparison
  loadOrUnloadStatus: DeliveryCompletionStatusFilterComparison
  pickOrPutawayStatus: DeliveryCompletionStatusFilterComparison
  pointOfContact: StringFieldComparison
  promiseDate: DateFieldComparison
  shipTo: StringFieldComparison
  shipToName: StringFieldComparison
  shipReadyDate: DateFieldComparison
  soldTo: StringFieldComparison
  soldToName: StringFieldComparison
  supplier: StringFieldComparison
  supplierName: StringFieldComparison
  totalGrossWeight: FloatFieldComparison
  totalNetWeight: FloatFieldComparison
  totalVolume: FloatFieldComparison
  type: DeliveryTypeFilterComparison
  totalVolumeUOMId: IDFilterComparison
  totalWeightUOMId: IDFilterComparison
  doorId: IDFilterComparison
  fulfillmentBlockId: IDFilterComparison
  orderConfirmationFileId: IDFilterComparison
  shipToBusinessPartnerId: IDFilterComparison
  soldToBusinessPartnerId: IDFilterComparison
  supplierBusinessPartnerId: IDFilterComparison
  warehouseId: IDFilterComparison
  deliveryDocumentType: StringFieldComparison
}

input DeliverySort {
  field: DeliverySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DeliverySortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  billOfLading
  blockStatus
  category
  deliveryStatus
  dueDate
  erpBlockingReason
  erpCode
  erpCreated
  erpLastChanged
  erpPurchaseOrder
  erpSalesOrder
  export
  goodsReceiptOrIssueStatus
  loadOrUnloadStatus
  pickOrPutawayStatus
  pointOfContact
  promiseDate
  shipTo
  shipToName
  shipReadyDate
  soldTo
  soldToName
  supplier
  supplierName
  totalGrossWeight
  totalNetWeight
  totalVolume
  type
  totalVolumeUOMId
  totalWeightUOMId
  doorId
  fulfillmentBlockId
  orderConfirmationFileId
  shipToBusinessPartnerId
  soldToBusinessPartnerId
  supplierBusinessPartnerId
  warehouseId
  deliveryDocumentType
}

input FulfillmentItemFilter {
  and: [FulfillmentItemFilter!]
  or: [FulfillmentItemFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  customerProductCode: StringFieldComparison
  dateMaterialAvailable: DateFieldComparison
  description: StringFieldComparison
  erpLastChanged: DateFieldComparison
  erpSalesOrder: StringFieldComparison
  erpSalesOrderItem: StringFieldComparison
  fulfillmentCode: StringFieldComparison
  fulfillmentItem: StringFieldComparison
  fulfillmentQuantity: StringFieldComparison
  fulfillmentQuantityUom: StringFieldComparison
  grossWeight: FloatFieldComparison
  licensePlateLevel: StringFieldComparison
  loadStatus: DeliveryCompletionStatusFilterComparison
  issueStatus: DeliveryCompletionStatusFilterComparison
  netWeight: FloatFieldComparison
  pickStatus: DeliveryCompletionStatusFilterComparison
  volume: FloatFieldComparison
  volumeUOMId: IDFilterComparison
  weightUOMId: IDFilterComparison
  deliveryId: IDFilterComparison
  licensePlateId: IDFilterComparison
  lotId: IDFilterComparison
  productId: IDFilterComparison
  stockStatusTypeId: IDFilterComparison
  unitOfMeasureId: IDFilterComparison
  storageLocation: StringFieldComparison
}

input FulfillmentItemSort {
  field: FulfillmentItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FulfillmentItemSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  customerProductCode
  dateMaterialAvailable
  description
  erpLastChanged
  erpSalesOrder
  erpSalesOrderItem
  fulfillmentCode
  fulfillmentItem
  fulfillmentQuantity
  fulfillmentQuantityUom
  grossWeight
  licensePlateLevel
  loadStatus
  issueStatus
  netWeight
  pickStatus
  volume
  volumeUOMId
  weightUOMId
  deliveryId
  licensePlateId
  lotId
  productId
  stockStatusTypeId
  unitOfMeasureId
  storageLocation
}

input ViewFulfillmentItemFilter {
  and: [ViewFulfillmentItemFilter!]
  or: [ViewFulfillmentItemFilter!]
  id: IDFilterComparison
  item: StringFieldComparison
  fulfillmentCode: StringFieldComparison
  fulfillmentDueDate: DateFieldComparison
  productCode: StringFieldComparison
  productDescription: StringFieldComparison
  lotCode: StringFieldComparison
  dateAvailable: DateFieldComparison
  quantity: StringFieldComparison
  pickStatus: DeliveryCompletionStatusFilterComparison
  loadStatus: DeliveryCompletionStatusFilterComparison
  erpLastChanged: DateFieldComparison
  salesOrderCode: StringFieldComparison
  salesOrderItem: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  storageLocation: StringFieldComparison
  unitOfMeasure: StringFieldComparison
  volume: FloatFieldComparison
  volumeUOMId: IDFilterComparison
  volumeUOMCode: StringFieldComparison
  volumeUOMLabel: StringFieldComparison
  grossWeight: FloatFieldComparison
  weightUOMId: IDFilterComparison
  weightUOMCode: StringFieldComparison
  weightUOMLabel: StringFieldComparison
  netWeight: FloatFieldComparison
  stockStatus: StringFieldComparison
  stockStatusCode: StringFieldComparison
  stockStatusId: StringFieldComparison
  deliveryId: IDFilterComparison
  productId: IDFilterComparison
  lotId: IDFilterComparison
  licensePlateId: IDFilterComparison
  licensePlateCode: StringFieldComparison
  licensePlateDescription: StringFieldComparison
  updatedAt: DateFieldComparison
  availability: IntFieldComparison
  warehouseId: IDFilterComparison
}

input ViewFulfillmentItemSort {
  field: ViewFulfillmentItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewFulfillmentItemSortFields {
  id
  item
  fulfillmentCode
  fulfillmentDueDate
  productCode
  productDescription
  lotCode
  dateAvailable
  quantity
  pickStatus
  loadStatus
  erpLastChanged
  salesOrderCode
  salesOrderItem
  unitOfMeasureId
  storageLocation
  unitOfMeasure
  volume
  volumeUOMId
  volumeUOMCode
  volumeUOMLabel
  grossWeight
  weightUOMId
  weightUOMCode
  weightUOMLabel
  netWeight
  stockStatus
  stockStatusCode
  stockStatusId
  deliveryId
  productId
  lotId
  licensePlateId
  licensePlateCode
  licensePlateDescription
  updatedAt
  availability
  warehouseId
}

input SapBinFFAreaFilter {
  and: [SapBinFFAreaFilter!]
  or: [SapBinFFAreaFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  id: IDFilterComparison
  areaId: IDFilterComparison
  warehouseId: StringFieldComparison
  sapBinCode: StringFieldComparison
  sapStorageTypeCode: StringFieldComparison
  systemConnectionId: IDFilterComparison
}

input SapBinFFAreaSort {
  field: SapBinFFAreaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SapBinFFAreaSortFields {
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  id
  areaId
  warehouseId
  sapBinCode
  sapStorageTypeCode
  systemConnectionId
}

input ViewSapBinFFAreaFilter {
  and: [ViewSapBinFFAreaFilter!]
  or: [ViewSapBinFFAreaFilter!]
  id: IDFilterComparison
  areaId: IDFilterComparison
  areaCode: StringFieldComparison
  sapBinCode: StringFieldComparison
  sapStorageTypeCode: StringFieldComparison
  isAreaEmpty: BooleanFieldComparison
  warehouseId: IDFilterComparison
  systemConnectionId: IDFilterComparison
}

input ViewSapBinFFAreaSort {
  field: ViewSapBinFFAreaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewSapBinFFAreaSortFields {
  id
  areaId
  areaCode
  sapBinCode
  sapStorageTypeCode
  isAreaEmpty
  warehouseId
  systemConnectionId
}

input IntegrationLogFilter {
  and: [IntegrationLogFilter!]
  or: [IntegrationLogFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  operationStart: DateFieldComparison
  operationComplete: DateFieldComparison
  errorCode: ErrorCodesFilterComparison
  errorMessage: StringFieldComparison
  rawErrors: JSONObjectFilterComparison
  entityId: IDFilterComparison
  entityLabel: StringFieldComparison
  entityName: StringFieldComparison
  totalNumRows: IntFieldComparison
  numRowsComplete: IntFieldComparison
  numRowsFailed: IntFieldComparison
  processingStatus: ProcessingStatusFilterComparison
  processingOperation: ProcessingOperationFilterComparison
  jobId: IDFilterComparison
  userId: IDFilterComparison
  warehouseId: IDFilterComparison
}

input ErrorCodesFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ErrorCodes
  neq: ErrorCodes
  gt: ErrorCodes
  gte: ErrorCodes
  lt: ErrorCodes
  lte: ErrorCodes
  like: ErrorCodes
  notLike: ErrorCodes
  iLike: ErrorCodes
  notILike: ErrorCodes
  in: [ErrorCodes!]
  notIn: [ErrorCodes!]
}

input ProcessingStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ProcessingStatus
  neq: ProcessingStatus
  gt: ProcessingStatus
  gte: ProcessingStatus
  lt: ProcessingStatus
  lte: ProcessingStatus
  like: ProcessingStatus
  notLike: ProcessingStatus
  iLike: ProcessingStatus
  notILike: ProcessingStatus
  in: [ProcessingStatus!]
  notIn: [ProcessingStatus!]
}

input ProcessingOperationFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ProcessingOperation
  neq: ProcessingOperation
  gt: ProcessingOperation
  gte: ProcessingOperation
  lt: ProcessingOperation
  lte: ProcessingOperation
  like: ProcessingOperation
  notLike: ProcessingOperation
  iLike: ProcessingOperation
  notILike: ProcessingOperation
  in: [ProcessingOperation!]
  notIn: [ProcessingOperation!]
}

input IntegrationLogSort {
  field: IntegrationLogSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum IntegrationLogSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  operationStart
  operationComplete
  errorCode
  errorMessage
  rawErrors
  entityId
  entityLabel
  entityName
  totalNumRows
  numRowsComplete
  numRowsFailed
  processingStatus
  processingOperation
  jobId
  userId
  warehouseId
}

input WarehousePathFilter {
  and: [WarehousePathFilter!]
  or: [WarehousePathFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: IDFilterComparison
  internalStockOrderTypeId: IDFilterComparison
  sourceAreaId: IDFilterComparison
  destinationAreaId: IDFilterComparison
}

input WarehousePathSort {
  field: WarehousePathSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehousePathSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  internalStockOrderTypeId
  sourceAreaId
  destinationAreaId
}

input WarehousePathQueryModelFilter {
  and: [WarehousePathQueryModelFilter!]
  or: [WarehousePathQueryModelFilter!]
  id: IDFilterComparison
  warehouseId: IDFilterComparison
  warehouseCode: StringFieldComparison
  internalStockOrderTypeId: IDFilterComparison
  internalStockOrderTypeCode: StringFieldComparison
  internalStockOrderTypeLabel: StringFieldComparison
  sourceAreaId: IDFilterComparison
  sourceAreaCode: StringFieldComparison
  destinationAreaId: IDFilterComparison
  destinationAreaCode: StringFieldComparison
}

input WarehousePathQueryModelSort {
  field: WarehousePathQueryModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehousePathQueryModelSortFields {
  id
  warehouseId
  warehouseCode
  internalStockOrderTypeId
  internalStockOrderTypeCode
  internalStockOrderTypeLabel
  sourceAreaId
  sourceAreaCode
  destinationAreaId
  destinationAreaCode
}

input ViewDeliveryItemFilter {
  and: [ViewDeliveryItemFilter!]
  or: [ViewDeliveryItemFilter!]
  id: IDFilterComparison
  deliveryId: IDFilterComparison
  deliveryDueDate: DateFieldComparison
  item: StringFieldComparison
  productCode: StringFieldComparison
  productDescription: StringFieldComparison
  lotCode: StringFieldComparison
  receiptStatus: DeliveryCompletionStatusFilterComparison
  putawayStatus: DeliveryCompletionStatusFilterComparison
  unloadStatus: DeliveryCompletionStatusFilterComparison
  quantity: StringFieldComparison
  recievedQuantity: StringFieldComparison
  supplierLotCode: StringFieldComparison
  erpLastChanged: DateFieldComparison
  erpPurchaseOrder: StringFieldComparison
  erpPurchaseOrderItem: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  unitOfMeasure: StringFieldComparison
  volume: FloatFieldComparison
  volumeUOMId: IDFilterComparison
  volumeUOMCode: StringFieldComparison
  volumeUOMLabel: StringFieldComparison
  grossWeight: FloatFieldComparison
  weightUOMId: IDFilterComparison
  weightUOMCode: StringFieldComparison
  weightUOMLabel: StringFieldComparison
  netWeight: FloatFieldComparison
  deliveryCode: StringFieldComparison
  productId: IDFilterComparison
  lotId: IDFilterComparison
  stockStatusLabel: StringFieldComparison
  stockStatusCode: StringFieldComparison
  stockStatusId: StringFieldComparison
  licensePlateId: IDFilterComparison
  licensePlateCode: StringFieldComparison
  licensePlateDescription: StringFieldComparison
  advancedShipmentNotificationFileId: IDFilterComparison
  advancedShipmentNotificationFileCode: StringFieldComparison
  updatedAt: DateFieldComparison
  warehouseId: IDFilterComparison
}

input ViewDeliveryItemSort {
  field: ViewDeliveryItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewDeliveryItemSortFields {
  id
  deliveryId
  deliveryDueDate
  item
  productCode
  productDescription
  lotCode
  receiptStatus
  putawayStatus
  unloadStatus
  quantity
  recievedQuantity
  supplierLotCode
  erpLastChanged
  erpPurchaseOrder
  erpPurchaseOrderItem
  unitOfMeasureId
  unitOfMeasure
  volume
  volumeUOMId
  volumeUOMCode
  volumeUOMLabel
  grossWeight
  weightUOMId
  weightUOMCode
  weightUOMLabel
  netWeight
  deliveryCode
  productId
  lotId
  stockStatusLabel
  stockStatusCode
  stockStatusId
  licensePlateId
  licensePlateCode
  licensePlateDescription
  advancedShipmentNotificationFileId
  advancedShipmentNotificationFileCode
  updatedAt
  warehouseId
}

input DeliveryItemFilter {
  and: [DeliveryItemFilter!]
  or: [DeliveryItemFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  deliveryId: IDFilterComparison
  actualRecievedQuantity: StringFieldComparison
  uom: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  licensePlateId: IDFilterComparison
  licensePlateLevel: IDFilterComparison
  lotId: IDFilterComparison
  supplierLot: StringFieldComparison
  erpCreated: DateFieldComparison
  deliveryCode: StringFieldComparison
  description: StringFieldComparison
  deliveryItem: StringFieldComparison
  receiptStatus: DeliveryCompletionStatusFilterComparison
  grossWeight: FloatFieldComparison
  netWeight: FloatFieldComparison
  volume: FloatFieldComparison
  volumeUOMId: IDFilterComparison
  weightUOMId: IDFilterComparison
  erpLastChanged: DateFieldComparison
  productId: IDFilterComparison
  erpPurchaseOrder: StringFieldComparison
  erpPurchaseOrderItem: StringFieldComparison
  quantity: IntFieldComparison
  putawayStatus: DeliveryCompletionStatusFilterComparison
  unloadStatus: DeliveryCompletionStatusFilterComparison
  stockStatusTypeId: StringFieldComparison
  advancedShipmentNotificationFileId: IDFilterComparison
}

input DeliveryItemSort {
  field: DeliveryItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DeliveryItemSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  deliveryId
  actualRecievedQuantity
  uom
  unitOfMeasureId
  licensePlateId
  licensePlateLevel
  lotId
  supplierLot
  erpCreated
  deliveryCode
  description
  deliveryItem
  receiptStatus
  grossWeight
  netWeight
  volume
  volumeUOMId
  weightUOMId
  erpLastChanged
  productId
  erpPurchaseOrder
  erpPurchaseOrderItem
  quantity
  putawayStatus
  unloadStatus
  stockStatusTypeId
  advancedShipmentNotificationFileId
}

input DoorFilter {
  and: [DoorFilter!]
  or: [DoorFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  direction: DoorDirectionFilterComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  areaId: IDFilterComparison
  warehouseId: IDFilterComparison
  binId: IDFilterComparison
}

input DoorDirectionFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: doorDirection
  neq: doorDirection
  gt: doorDirection
  gte: doorDirection
  lt: doorDirection
  lte: doorDirection
  like: doorDirection
  notLike: doorDirection
  iLike: doorDirection
  notILike: doorDirection
  in: [doorDirection!]
  notIn: [doorDirection!]
}

input DoorSort {
  field: DoorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DoorSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  direction
  x
  y
  areaId
  warehouseId
  binId
}

input ViewDoorFilter {
  and: [ViewDoorFilter!]
  or: [ViewDoorFilter!]
  code: StringFieldComparison
  id: IDFilterComparison
  warehouseId: IDFilterComparison
  areaCode: StringFieldComparison
  areaId: IDFilterComparison
  direction: DoorDirectionFilterComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
}

input ViewDoorSort {
  field: ViewDoorSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewDoorSortFields {
  code
  id
  warehouseId
  areaCode
  areaId
  direction
  x
  y
  binId
  binCode
}

input DispositionFilter {
  and: [DispositionFilter!]
  or: [DispositionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  notes: StringFieldComparison
}

input DispositionSort {
  field: DispositionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DispositionSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  notes
}

input EdgeFilter {
  and: [EdgeFilter!]
  or: [EdgeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: IDFilterComparison
  bidirectional: BooleanFieldComparison
}

input EdgeSort {
  field: EdgeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EdgeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  bidirectional
}

input EffectiveContractMappingFilter {
  and: [EffectiveContractMappingFilter!]
  or: [EffectiveContractMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  contractId: IDFilterComparison
  businessPartnerId: IDFilterComparison
  effectiveDate: DateFieldComparison
  status: StringFieldComparison
}

input EffectiveContractMappingSort {
  field: EffectiveContractMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EffectiveContractMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  contractId
  businessPartnerId
  effectiveDate
  status
}

input EquipmentItemFilter {
  and: [EquipmentItemFilter!]
  or: [EquipmentItemFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  status: EquipmentStatusFilterComparison
  tagId: IDFilterComparison
  equipmentModelId: IDFilterComparison
  warehouseId: IDFilterComparison
}

input EquipmentStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: EquipmentStatus
  neq: EquipmentStatus
  gt: EquipmentStatus
  gte: EquipmentStatus
  lt: EquipmentStatus
  lte: EquipmentStatus
  like: EquipmentStatus
  notLike: EquipmentStatus
  iLike: EquipmentStatus
  notILike: EquipmentStatus
  in: [EquipmentStatus!]
  notIn: [EquipmentStatus!]
}

input EquipmentItemSort {
  field: EquipmentItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EquipmentItemSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  description
  status
  tagId
  equipmentModelId
  warehouseId
}

input ViewEquipmentFilter {
  and: [ViewEquipmentFilter!]
  or: [ViewEquipmentFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  status: EquipmentStatusFilterComparison
  tagId: StringFieldComparison
  equipmentModelId: StringFieldComparison
  warehouseId: IDFilterComparison
  modelCode: StringFieldComparison
  modelLabel: StringFieldComparison
  modelDescription: StringFieldComparison
  typeHeightMax: FloatFieldComparison
  typeHeightMin: FloatFieldComparison
  typeHeightUOMId: IDFilterComparison
  typeHeightUOMCode: StringFieldComparison
  typeHeightUOMLabel: IDFilterComparison
  typeWeightMax: FloatFieldComparison
  typeWeightUOMId: IDFilterComparison
  typeWeightUOMCode: StringFieldComparison
  typeWeightUOMLabel: StringFieldComparison
  typeVolumeMax: FloatFieldComparison
  typeVolumeUOMId: IDFilterComparison
  typeVolumeUOMCode: StringFieldComparison
  typeVolumeUOMLabel: StringFieldComparison
  typeVelocity: FloatFieldComparison
  typeVerticalVelocity: FloatFieldComparison
  typeVelocityUOMId: StringFieldComparison
  typeVelocityUOMCode: StringFieldComparison
  typeVelocityUOMLabel: StringFieldComparison
  typeMobility: EquipmentMobilityFilterComparison
  equipmentTypeId: IDFilterComparison
  typeCode: StringFieldComparison
  typeLabel: StringFieldComparison
  typeDescription: StringFieldComparison
}

input EquipmentMobilityFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: EquipmentMobility
  neq: EquipmentMobility
  gt: EquipmentMobility
  gte: EquipmentMobility
  lt: EquipmentMobility
  lte: EquipmentMobility
  like: EquipmentMobility
  notLike: EquipmentMobility
  iLike: EquipmentMobility
  notILike: EquipmentMobility
  in: [EquipmentMobility!]
  notIn: [EquipmentMobility!]
}

input ViewEquipmentSort {
  field: ViewEquipmentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewEquipmentSortFields {
  id
  code
  label
  description
  status
  tagId
  equipmentModelId
  warehouseId
  modelCode
  modelLabel
  modelDescription
  typeHeightMax
  typeHeightMin
  typeHeightUOMId
  typeHeightUOMCode
  typeHeightUOMLabel
  typeWeightMax
  typeWeightUOMId
  typeWeightUOMCode
  typeWeightUOMLabel
  typeVolumeMax
  typeVolumeUOMId
  typeVolumeUOMCode
  typeVolumeUOMLabel
  typeVelocity
  typeVerticalVelocity
  typeVelocityUOMId
  typeVelocityUOMCode
  typeVelocityUOMLabel
  typeMobility
  equipmentTypeId
  typeCode
  typeLabel
  typeDescription
}

input EquipmentTypeFilter {
  and: [EquipmentTypeFilter!]
  or: [EquipmentTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  velocityUOMId: IDFilterComparison
  velocity: FloatFieldComparison
  verticalVelocity: FloatFieldComparison
  weightUOMId: IDFilterComparison
  weightMax: FloatFieldComparison
  currency: StringFieldComparison
  cost: FloatFieldComparison
  volumeUOMId: IDFilterComparison
  volumeMax: FloatFieldComparison
  mobility: EquipmentMobilityFilterComparison
  heightMax: FloatFieldComparison
  heightMin: FloatFieldComparison
  heightUOMId: IDFilterComparison
}

input EquipmentTypeSort {
  field: EquipmentTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EquipmentTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  description
  velocityUOMId
  velocity
  verticalVelocity
  weightUOMId
  weightMax
  currency
  cost
  volumeUOMId
  volumeMax
  mobility
  heightMax
  heightMin
  heightUOMId
}

input EquipmentTypeQueryShapeFilter {
  and: [EquipmentTypeQueryShapeFilter!]
  or: [EquipmentTypeQueryShapeFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  velocityUOMId: IDFilterComparison
  velocityUOMCode: StringFieldComparison
  velocityUOMLabel: StringFieldComparison
  velocity: FloatFieldComparison
  verticalVelocity: FloatFieldComparison
  weightUOMId: IDFilterComparison
  weightUOMCode: StringFieldComparison
  weightUOMLabel: StringFieldComparison
  weightMax: FloatFieldComparison
  currency: StringFieldComparison
  cost: FloatFieldComparison
  volumeUOMId: IDFilterComparison
  volumeUOMCode: StringFieldComparison
  volumeUOMLabel: StringFieldComparison
  volumeMax: FloatFieldComparison
  mobility: EquipmentMobilityFilterComparison
  heightMax: FloatFieldComparison
  heightMin: FloatFieldComparison
  heightUOMId: IDFilterComparison
  heightUOMCode: StringFieldComparison
  heightUOMLabel: StringFieldComparison
}

input EquipmentTypeQueryShapeSort {
  field: EquipmentTypeQueryShapeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EquipmentTypeQueryShapeSortFields {
  id
  code
  label
  description
  velocityUOMId
  velocityUOMCode
  velocityUOMLabel
  velocity
  verticalVelocity
  weightUOMId
  weightUOMCode
  weightUOMLabel
  weightMax
  currency
  cost
  volumeUOMId
  volumeUOMCode
  volumeUOMLabel
  volumeMax
  mobility
  heightMax
  heightMin
  heightUOMId
  heightUOMCode
  heightUOMLabel
}

input EquipmentModelFilter {
  and: [EquipmentModelFilter!]
  or: [EquipmentModelFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  equipmentTypeId: IDFilterComparison
}

input EquipmentModelSort {
  field: EquipmentModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum EquipmentModelSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  description
  equipmentTypeId
}

input ViewEquipmentModelFilter {
  and: [ViewEquipmentModelFilter!]
  or: [ViewEquipmentModelFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  equipmentTypeId: IDFilterComparison
  typeLabel: StringFieldComparison
}

input ViewEquipmentModelSort {
  field: ViewEquipmentModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewEquipmentModelSortFields {
  id
  code
  label
  description
  equipmentTypeId
  typeLabel
}

input FulfillmentBlockFilter {
  and: [FulfillmentBlockFilter!]
  or: [FulfillmentBlockFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
}

input FulfillmentBlockSort {
  field: FulfillmentBlockSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum FulfillmentBlockSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  label
  description
}

input ViewHistoryFieldDiffFilter {
  and: [ViewHistoryFieldDiffFilter!]
  or: [ViewHistoryFieldDiffFilter!]
  id: IDFilterComparison
  historyId: IDFilterComparison
  entityId: IDFilterComparison
  new: StringFieldComparison
  old: StringFieldComparison
  newVersion: IntFieldComparison
  oldVersion: IntFieldComparison
  field: StringFieldComparison
  fieldType: StringFieldComparison
  entity: StringFieldComparison
  name: StringFieldComparison
  userId: StringFieldComparison
  code: StringFieldComparison
  date: DateFieldComparison
  changeType: EntityChangeTypeFilterComparison
}

input EntityChangeTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: EntityChangeType
  neq: EntityChangeType
  gt: EntityChangeType
  gte: EntityChangeType
  lt: EntityChangeType
  lte: EntityChangeType
  like: EntityChangeType
  notLike: EntityChangeType
  iLike: EntityChangeType
  notILike: EntityChangeType
  in: [EntityChangeType!]
  notIn: [EntityChangeType!]
}

input ViewHistoryFieldDiffSort {
  field: ViewHistoryFieldDiffSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewHistoryFieldDiffSortFields {
  id
  historyId
  entityId
  new
  old
  newVersion
  oldVersion
  field
  fieldType
  entity
  name
  userId
  code
  date
  changeType
}

input ViewLostAndFoundFilter {
  and: [ViewLostAndFoundFilter!]
  or: [ViewLostAndFoundFilter!]
  productId: IDFilterComparison
  productCode: StringFieldComparison
  productDescription: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  unitOfMeasureCode: StringFieldComparison
  quantity: StringFieldComparison
  stockStatusLabel: StringFieldComparison
  stockStatusId: IDFilterComparison
  binCode: StringFieldComparison
  areaCode: StringFieldComparison
  binId: IDFilterComparison
  binType: StringFieldComparison
  warehouseId: IDFilterComparison
  licensePlateId: IDFilterComparison
  licensePlateDescription: StringFieldComparison
  licensePlateStatus: LicensePlateStatusStateFilterComparison
  licensePlateCode: StringFieldComparison
  warehouseCode: StringFieldComparison
  lotId: IDFilterComparison
  lotCode: StringFieldComparison
  lotManaged: BooleanFieldComparison
  areaId: IDFilterComparison
  deliveryItemId: IDFilterComparison
  fulfillmentItemId: IDFilterComparison
  fulfillmentItem: StringFieldComparison
  deliveryItem: StringFieldComparison
  stockFulfillmentId: IDFilterComparison
  stockFulfillmentCode: StringFieldComparison
  stockDeliveryId: IDFilterComparison
  stockDeliveryCode: StringFieldComparison
}

input ViewLostAndFoundSort {
  field: ViewLostAndFoundSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewLostAndFoundSortFields {
  productId
  productCode
  productDescription
  unitOfMeasureId
  unitOfMeasureCode
  quantity
  stockStatusLabel
  stockStatusId
  binCode
  areaCode
  binId
  binType
  warehouseId
  licensePlateId
  licensePlateDescription
  licensePlateStatus
  licensePlateCode
  warehouseCode
  lotId
  lotCode
  lotManaged
  areaId
  deliveryItemId
  fulfillmentItemId
  fulfillmentItem
  deliveryItem
  stockFulfillmentId
  stockFulfillmentCode
  stockDeliveryId
  stockDeliveryCode
}

input InventoryReconciliationQueryModelFilter {
  and: [InventoryReconciliationQueryModelFilter!]
  or: [InventoryReconciliationQueryModelFilter!]
  id: IDFilterComparison
  metaId: IDFilterComparison
  warehouseId: InventoryReconciliationQueryModelWarehouseIdFilterComparison
  licensePlateId: IDFilterComparison
  licensePlateCode: StringFieldComparison
  productId: IDFilterComparison
  productCode: StringFieldComparison
  lotId: IDFilterComparison
  lotCode: StringFieldComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
  stockStatusTypeId: IDFilterComparison
  stockStatusTypeCode: StringFieldComparison
  stockStatusTypeLabel: StringFieldComparison
  quantity: StringFieldComparison
  unitOfMeasureId: IDFilterComparison
  unitOfMeasureCode: StringFieldComparison
  storageLocation: StringFieldComparison
  erpLicensePlateCode: StringFieldComparison
  erpProductCode: StringFieldComparison
  erpLotCode: StringFieldComparison
  erpBinCode: StringFieldComparison
  erpStockStatusTypeId: IDFilterComparison
  erpStockStatusTypeLabel: StringFieldComparison
  erpStockType: StringFieldComparison
  erpQuantity: StringFieldComparison
  erpUnitOfMeasureCode: StringFieldComparison
  erpStorageLocation: StringFieldComparison
  binConflict: BooleanFieldComparison
  lotConflict: BooleanFieldComparison
  productConflict: BooleanFieldComparison
  stockStatusConflict: BooleanFieldComparison
  licensePlateConflict: BooleanFieldComparison
  quantityConflict: BooleanFieldComparison
  unitOfMeasureConflict: BooleanFieldComparison
  storageLocationConflict: BooleanFieldComparison
}

input InventoryReconciliationQueryModelWarehouseIdFilterComparison {
  eq: ID
}

input InventoryReconciliationQueryModelSort {
  field: InventoryReconciliationQueryModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InventoryReconciliationQueryModelSortFields {
  id
  metaId
  warehouseId
  licensePlateId
  licensePlateCode
  productId
  productCode
  lotId
  lotCode
  binId
  binCode
  stockStatusTypeId
  stockStatusTypeCode
  stockStatusTypeLabel
  quantity
  unitOfMeasureId
  unitOfMeasureCode
  storageLocation
  erpLicensePlateCode
  erpProductCode
  erpLotCode
  erpBinCode
  erpStockStatusTypeId
  erpStockStatusTypeLabel
  erpStockType
  erpQuantity
  erpUnitOfMeasureCode
  erpStorageLocation
  binConflict
  lotConflict
  productConflict
  stockStatusConflict
  licensePlateConflict
  quantityConflict
  unitOfMeasureConflict
  storageLocationConflict
}

input InventoryReconciliationMetaQueryModelFilter {
  and: [InventoryReconciliationMetaQueryModelFilter!]
  or: [InventoryReconciliationMetaQueryModelFilter!]
  id: StringFieldComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  status: StringFieldComparison
  warehouseId: StringFieldComparison
  lotConflicts: IntFieldComparison
  binConflicts: IntFieldComparison
  productConflicts: IntFieldComparison
  stockStatusConflicts: IntFieldComparison
  uomConflicts: IntFieldComparison
  quantityConflicts: IntFieldComparison
  licensePlateConflicts: IntFieldComparison
  storageLocationConflicts: IntFieldComparison
  totalConflicts: IntFieldComparison
  totalRecords: IntFieldComparison
  accuracy: FloatFieldComparison
}

input InventoryReconciliationMetaQueryModelSort {
  field: InventoryReconciliationMetaQueryModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InventoryReconciliationMetaQueryModelSortFields {
  id
  createdAt
  updatedAt
  status
  warehouseId
  lotConflicts
  binConflicts
  productConflicts
  stockStatusConflicts
  uomConflicts
  quantityConflicts
  licensePlateConflicts
  storageLocationConflicts
  totalConflicts
  totalRecords
  accuracy
}

input InvoiceFilter {
  and: [InvoiceFilter!]
  or: [InvoiceFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  status: StringFieldComparison
  contractId: IDFilterComparison
  warehouseId: IDFilterComparison
}

input InvoiceSort {
  field: InvoiceSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InvoiceSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  status
  contractId
  warehouseId
}

input InvoiceItemFilter {
  and: [InvoiceItemFilter!]
  or: [InvoiceItemFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  feeType: StringFieldComparison
  value: FloatFieldComparison
  manualChangeStatus: StringFieldComparison
  invoiceId: IDFilterComparison
}

input InvoiceItemSort {
  field: InvoiceItemSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum InvoiceItemSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  feeType
  value
  manualChangeStatus
  invoiceId
}

input LayoutFilter {
  and: [LayoutFilter!]
  or: [LayoutFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: IDFilterComparison
  tableId: IDFilterComparison
  variant: LayoutVariantFilterComparison
  userId: IDFilterComparison
}

input LayoutVariantFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: LayoutVariant
  neq: LayoutVariant
  gt: LayoutVariant
  gte: LayoutVariant
  lt: LayoutVariant
  lte: LayoutVariant
  like: LayoutVariant
  notLike: LayoutVariant
  iLike: LayoutVariant
  notILike: LayoutVariant
  in: [LayoutVariant!]
  notIn: [LayoutVariant!]
}

input LayoutSort {
  field: LayoutSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum LayoutSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  tableId
  variant
  userId
}

input MapFilter {
  and: [MapFilter!]
  or: [MapFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  warehouseId: IDFilterComparison
  mapType: MapTypeFilterComparison
}

input MapTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: MapType
  neq: MapType
  gt: MapType
  gte: MapType
  lt: MapType
  lte: MapType
  like: MapType
  notLike: MapType
  iLike: MapType
  notILike: MapType
  in: [MapType!]
  notIn: [MapType!]
}

input MapSort {
  field: MapSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum MapSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  name
  warehouseId
  mapType
}

input MapQuery {
  bucket: String!
  warehouse: Float!
  startX: Float!
  startY: Float!
  endX: Float
  endY: Float
  stops: [Stop!]!
}

input Stop {
  aisle: String!
  column: String!
}

input SlottingQuery {
  mixedBinStorage: Boolean!
  enforceZones: Boolean!
  warehouseId: Boolean!
  heaviestToLightestPicks: Boolean!
  pickDensity: Float!
  pickEfficiency: Float!
  putawayDensity: Float!
  putawayEfficiency: Float!
  avoidCongestion: Float!
  favorGroundLevel: Float!
  forecasting: String!
}

input ViewMapBinFilter {
  and: [ViewMapBinFilter!]
  or: [ViewMapBinFilter!]
  areaId: IDFilterComparison
  areaCode: StringFieldComparison
  areaName: StringFieldComparison
  description: StringFieldComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
  aisleId: IDFilterComparison
  aisleCode: StringFieldComparison
  aisleColumnId: IDFilterComparison
  aisleColumnCode: StringFieldComparison
  storageLocationId: IDFilterComparison
  storageLocation: StringFieldComparison
  status: AreaStatusFilterComparison
  productVolume: FloatFieldComparison
  maxVolumeCapacity: FloatFieldComparison
  dimensionCapacity: FloatFieldComparison
  productWeight: FloatFieldComparison
  maxWeightCapacity: FloatFieldComparison
  weightCapacity: FloatFieldComparison
  warehouseId: IDFilterComparison
  level: StringFieldComparison
  sourceBinBlock: BinBlockStateFilterComparison
  destinationBinBlock: BinBlockStateFilterComparison
  lastMovement: DateFieldComparison
  lastCount: DateFieldComparison
}

input ViewMapBinSort {
  field: ViewMapBinSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewMapBinSortFields {
  areaId
  areaCode
  areaName
  description
  binId
  binCode
  aisleId
  aisleCode
  aisleColumnId
  aisleColumnCode
  storageLocationId
  storageLocation
  status
  productVolume
  maxVolumeCapacity
  dimensionCapacity
  productWeight
  maxWeightCapacity
  weightCapacity
  warehouseId
  level
  sourceBinBlock
  destinationBinBlock
  lastMovement
  lastCount
}

input ViewMapAisleFilter {
  and: [ViewMapAisleFilter!]
  or: [ViewMapAisleFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  name: StringFieldComparison
  areaId: IDFilterComparison
  areaCode: StringFieldComparison
  areaName: StringFieldComparison
  description: StringFieldComparison
  storageLocationId: IDFilterComparison
  storageLocation: StringFieldComparison
  status: AreaStatusFilterComparison
  dimensionCapacity: IntFieldComparison
  weightCapacity: IntFieldComparison
  warehouseId: IDFilterComparison
}

input ViewMapAisleSort {
  field: ViewMapAisleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewMapAisleSortFields {
  id
  code
  name
  areaId
  areaCode
  areaName
  description
  storageLocationId
  storageLocation
  status
  dimensionCapacity
  weightCapacity
  warehouseId
}

enum FeatureContext {
  app
}

input PlanogramFilter {
  and: [PlanogramFilter!]
  or: [PlanogramFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  x: FloatFieldComparison
  radius: FloatFieldComparison
  description: StringFieldComparison
  warehouseId: IDFilterComparison
}

input PlanogramSort {
  field: PlanogramSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PlanogramSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  x
  radius
  description
  warehouseId
}

input ReplenishmentFilter {
  and: [ReplenishmentFilter!]
  or: [ReplenishmentFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  productId: IDFilterComparison
  binId: IDFilterComparison
  autoMin: FloatFieldComparison
  autoMax: FloatFieldComparison
  autoReplenishmentQuantity: FloatFieldComparison
  unitOfMeasureId: IDFilterComparison
  warehouseId: IDFilterComparison
  manualMin: FloatFieldComparison
  manualMax: FloatFieldComparison
  manualReplenishmentQuantity: FloatFieldComparison
  replenishmentType: ReplenishmentTypeFilterComparison
}

input ReplenishmentTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ReplenishmentType
  neq: ReplenishmentType
  gt: ReplenishmentType
  gte: ReplenishmentType
  lt: ReplenishmentType
  lte: ReplenishmentType
  like: ReplenishmentType
  notLike: ReplenishmentType
  iLike: ReplenishmentType
  notILike: ReplenishmentType
  in: [ReplenishmentType!]
  notIn: [ReplenishmentType!]
}

input ReplenishmentSort {
  field: ReplenishmentSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ReplenishmentSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  productId
  binId
  autoMin
  autoMax
  autoReplenishmentQuantity
  unitOfMeasureId
  warehouseId
  manualMin
  manualMax
  manualReplenishmentQuantity
  replenishmentType
}

input RolePermissionMappingFilter {
  and: [RolePermissionMappingFilter!]
  or: [RolePermissionMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  roleId: IDFilterComparison
  permissionId: IDFilterComparison
}

input RolePermissionMappingSort {
  field: RolePermissionMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum RolePermissionMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  roleId
  permissionId
}

input ScheduledJobFilter {
  and: [ScheduledJobFilter!]
  or: [ScheduledJobFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  updateInterval: IntFieldComparison
  lastRun: DateFieldComparison
  state: JobStateFilterComparison
  scheduledJobTypeId: IDFilterComparison
}

input JobStateFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: JobState
  neq: JobState
  gt: JobState
  gte: JobState
  lt: JobState
  lte: JobState
  like: JobState
  notLike: JobState
  iLike: JobState
  notILike: JobState
  in: [JobState!]
  notIn: [JobState!]
}

input ScheduledJobSort {
  field: ScheduledJobSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ScheduledJobSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  name
  updateInterval
  lastRun
  state
  scheduledJobTypeId
}

input ScheduledJobTypeFilter {
  and: [ScheduledJobTypeFilter!]
  or: [ScheduledJobTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  type: ScheduledJobSchedulerTypeFilterComparison
  description: StringFieldComparison
  controller: ScheduledJobTypeControllerNameFilterComparison
  httpTargetJson: JSONFilterComparison
}

input ScheduledJobSchedulerTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ScheduledJobSchedulerType
  neq: ScheduledJobSchedulerType
  gt: ScheduledJobSchedulerType
  gte: ScheduledJobSchedulerType
  lt: ScheduledJobSchedulerType
  lte: ScheduledJobSchedulerType
  like: ScheduledJobSchedulerType
  notLike: ScheduledJobSchedulerType
  iLike: ScheduledJobSchedulerType
  notILike: ScheduledJobSchedulerType
  in: [ScheduledJobSchedulerType!]
  notIn: [ScheduledJobSchedulerType!]
}

input ScheduledJobTypeControllerNameFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: ScheduledJobTypeControllerName
  neq: ScheduledJobTypeControllerName
  gt: ScheduledJobTypeControllerName
  gte: ScheduledJobTypeControllerName
  lt: ScheduledJobTypeControllerName
  lte: ScheduledJobTypeControllerName
  like: ScheduledJobTypeControllerName
  notLike: ScheduledJobTypeControllerName
  iLike: ScheduledJobTypeControllerName
  notILike: ScheduledJobTypeControllerName
  in: [ScheduledJobTypeControllerName!]
  notIn: [ScheduledJobTypeControllerName!]
}

input ScheduledJobTypeSort {
  field: ScheduledJobTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ScheduledJobTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  type
  description
  controller
  httpTargetJson
}

input SearchQuery {
  index: [ESIndices!]
  from: Int
  size: Int
  sort: String
  body: SearchBodyQuery!
}

enum ESIndices {
  product
  area
  bin
  task
  delivery
  fulfillment
  license_plate
}

input SearchBodyQuery {
  query: SearchBodyBool!
  aggs: SearchAggTermsAgg
}

input SearchBodyBool {
  bool: SearchBodyBoolBody!
}

input SearchBodyBoolBody {
  minimum_should_match: Int
  must: [SearchBodyQueryString!]
  should: [SearchBodyQueryString!]
  filter: [JSONObject!]
}

input SearchBodyQueryString {
  query_string: SearchBodyQueryStringBody
  nested: SearchBodyNested
  bool: SearchBodyBoolBody
}

input SearchBodyQueryStringBody {
  query: String!
  fields: [String!]
  escape: Boolean
  analyze_wildcard: Boolean
  default_operator: String
}

input SearchBodyNested {
  path: String!
  query: SearchBodyBool!
  ignore_unmapped: Boolean!
}

input SearchAggTermsAgg {
  termsAggregation: SearchAggTerms!
}

input SearchAggTerms {
  terms: SearchAggTermsField!
}

input SearchAggTermsField {
  field: String!
}

input CountQuery {
  index: [ESIndices!]
  body: SearchBodyQuery!
}

input SlottingDataFrameFilter {
  and: [SlottingDataFrameFilter!]
  or: [SlottingDataFrameFilter!]
  id: IDFilterComparison
  warehouse_id: IDFilterComparison
}

input SlottingDataFrameSort {
  field: SlottingDataFrameSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingDataFrameSortFields {
  id
  warehouse_id
}

input SlottingDatasetFilter {
  and: [SlottingDatasetFilter!]
  or: [SlottingDatasetFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  runCount: IntFieldComparison
  variantName: StringFieldComparison
  variantDescription: StringFieldComparison
  processType: SlottingDatasetProcessTypeFilterComparison
  loadStatus: SlottingLoadStatusFilterComparison
  analysisStatus: SlottingAnalysisStatusFilterComparison
  pullDate: DateFieldComparison
  dateRangeStart: DateFieldComparison
  dateRangeEnd: DateFieldComparison
  locked: BooleanFieldComparison
  createdByUserId: IDFilterComparison
  createdByUserName: StringFieldComparison
  warehouseId: IDFilterComparison
}

input SlottingDatasetProcessTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: SlottingDatasetProcessType
  neq: SlottingDatasetProcessType
  gt: SlottingDatasetProcessType
  gte: SlottingDatasetProcessType
  lt: SlottingDatasetProcessType
  lte: SlottingDatasetProcessType
  like: SlottingDatasetProcessType
  notLike: SlottingDatasetProcessType
  iLike: SlottingDatasetProcessType
  notILike: SlottingDatasetProcessType
  in: [SlottingDatasetProcessType!]
  notIn: [SlottingDatasetProcessType!]
}

input SlottingLoadStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: SlottingLoadStatus
  neq: SlottingLoadStatus
  gt: SlottingLoadStatus
  gte: SlottingLoadStatus
  lt: SlottingLoadStatus
  lte: SlottingLoadStatus
  like: SlottingLoadStatus
  notLike: SlottingLoadStatus
  iLike: SlottingLoadStatus
  notILike: SlottingLoadStatus
  in: [SlottingLoadStatus!]
  notIn: [SlottingLoadStatus!]
}

input SlottingAnalysisStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: SlottingAnalysisStatus
  neq: SlottingAnalysisStatus
  gt: SlottingAnalysisStatus
  gte: SlottingAnalysisStatus
  lt: SlottingAnalysisStatus
  lte: SlottingAnalysisStatus
  like: SlottingAnalysisStatus
  notLike: SlottingAnalysisStatus
  iLike: SlottingAnalysisStatus
  notILike: SlottingAnalysisStatus
  in: [SlottingAnalysisStatus!]
  notIn: [SlottingAnalysisStatus!]
}

input SlottingDatasetSort {
  field: SlottingDatasetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingDatasetSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  runCount
  variantName
  variantDescription
  processType
  loadStatus
  analysisStatus
  pullDate
  dateRangeStart
  dateRangeEnd
  locked
  createdByUserId
  createdByUserName
  warehouseId
}

input SapLogicalBinMappingFilter {
  and: [SapLogicalBinMappingFilter!]
  or: [SapLogicalBinMappingFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  areaId: IDFilterComparison
  doorId: IDFilterComparison
  warehouseId: StringFieldComparison
  sapBinCode: StringFieldComparison
  sapStorageTypeCode: StringFieldComparison
  internalStockOrderTypeId: IDFilterComparison
}

input SapLogicalBinMappingSort {
  field: SapLogicalBinMappingSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SapLogicalBinMappingSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  areaId
  doorId
  warehouseId
  sapBinCode
  sapStorageTypeCode
  internalStockOrderTypeId
}

input SapHUStatusFilter {
  and: [SapHUStatusFilter!]
  or: [SapHUStatusFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  include: BooleanFieldComparison
  systemConnectionId: StringFieldComparison
}

input SapHUStatusSort {
  field: SapHUStatusSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SapHUStatusSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  include
  systemConnectionId
}

input SlottingInventoryFilter {
  and: [SlottingInventoryFilter!]
  or: [SlottingInventoryFilter!]
  binCode: StringFieldComparison
  rank: StringFieldComparison
  zone: StringFieldComparison
  productNumber: StringFieldComparison
  productName: StringFieldComparison
  productGroup: StringFieldComparison
  eaQtyPerCase: StringFieldComparison
  quantity: StringFieldComparison
  uom: StringFieldComparison
}

input SlottingInventorySort {
  field: SlottingInventorySortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingInventorySortFields {
  binCode
  rank
  zone
  productNumber
  productName
  productGroup
  eaQtyPerCase
  quantity
  uom
}

input SlottingRulesetFilter {
  and: [SlottingRulesetFilter!]
  or: [SlottingRulesetFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  privateRuleset: BooleanFieldComparison
  warehouseId: StringFieldComparison
  maxMovements: IntFieldComparison
  forecasting: ForecastingFilterComparison
  runCount: IntFieldComparison
  createdByUserId: IDFilterComparison
  lastRun: DateFieldComparison
  rulesetStatus: RulesetStatusFilterComparison
}

input ForecastingFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: Forecasting
  neq: Forecasting
  gt: Forecasting
  gte: Forecasting
  lt: Forecasting
  lte: Forecasting
  like: Forecasting
  notLike: Forecasting
  iLike: Forecasting
  notILike: Forecasting
  in: [Forecasting!]
  notIn: [Forecasting!]
}

input RulesetStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: RulesetStatus
  neq: RulesetStatus
  gt: RulesetStatus
  gte: RulesetStatus
  lt: RulesetStatus
  lte: RulesetStatus
  like: RulesetStatus
  notLike: RulesetStatus
  iLike: RulesetStatus
  notILike: RulesetStatus
  in: [RulesetStatus!]
  notIn: [RulesetStatus!]
}

input SlottingRulesetSort {
  field: SlottingRulesetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingRulesetSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  name
  privateRuleset
  warehouseId
  maxMovements
  forecasting
  runCount
  createdByUserId
  lastRun
  rulesetStatus
}

input ViewSlottingRulesetFilter {
  and: [ViewSlottingRulesetFilter!]
  or: [ViewSlottingRulesetFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  createdBy: StringFieldComparison
  createdByUserId: StringFieldComparison
  runCount: NumberFieldComparison
  lastUpdated: DateFieldComparison
  warehouseId: IDFilterComparison
  skipAbc: BooleanFieldComparison
  rulesetStatus: RulesetStatusFilterComparison
}

input ViewSlottingRulesetSort {
  field: ViewSlottingRulesetSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewSlottingRulesetSortFields {
  id
  name
  createdBy
  createdByUserId
  runCount
  lastUpdated
  warehouseId
  skipAbc
  rulesetStatus
}

input WarehouseRoleTypeFilter {
  and: [WarehouseRoleTypeFilter!]
  or: [WarehouseRoleTypeFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  velocityUOMId: StringFieldComparison
  velocity: FloatFieldComparison
  weightUOMId: StringFieldComparison
  weightMax: FloatFieldComparison
  currency: StringFieldComparison
  cost: FloatFieldComparison
}

input WarehouseRoleTypeSort {
  field: WarehouseRoleTypeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehouseRoleTypeSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  label
  description
  velocityUOMId
  velocity
  weightUOMId
  weightMax
  currency
  cost
}

input WarehouseRoleTypeQueryShapeFilter {
  and: [WarehouseRoleTypeQueryShapeFilter!]
  or: [WarehouseRoleTypeQueryShapeFilter!]
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  id: IDFilterComparison
  code: StringFieldComparison
  label: StringFieldComparison
  description: StringFieldComparison
  velocityUOMId: StringFieldComparison
  velocityUOMCode: StringFieldComparison
  velocityUOMLabel: StringFieldComparison
  velocity: FloatFieldComparison
  weightMax: FloatFieldComparison
  weightUOMCode: StringFieldComparison
  weightUOMLabel: StringFieldComparison
  weightUOMId: IDFilterComparison
  currency: StringFieldComparison
  cost: FloatFieldComparison
}

input WarehouseRoleTypeQueryShapeSort {
  field: WarehouseRoleTypeQueryShapeSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehouseRoleTypeQueryShapeSortFields {
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  id
  code
  label
  description
  velocityUOMId
  velocityUOMCode
  velocityUOMLabel
  velocity
  weightMax
  weightUOMCode
  weightUOMLabel
  weightUOMId
  currency
  cost
}

input ZoneFilter {
  and: [ZoneFilter!]
  or: [ZoneFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  warehouseId: IDFilterComparison
}

input ZoneSort {
  field: ZoneSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ZoneSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  name
  description
  warehouseId
}

input ViewZoneFilter {
  and: [ViewZoneFilter!]
  or: [ViewZoneFilter!]
  id: IDFilterComparison
  code: StringFieldComparison
  name: StringFieldComparison
  description: StringFieldComparison
  warehouseId: IDFilterComparison
  warehouseCode: StringFieldComparison
  warehouseName: StringFieldComparison
  areaCount: IntFieldComparison
  binCount: IntFieldComparison
  aisleCount: IntFieldComparison
  aisleColumnCount: IntFieldComparison
  pickingUomRestrictionId: IDFilterComparison
  pickingUomRestrictionCode: StringFieldComparison
  pickingUomRestrictionLabel: StringFieldComparison
}

input ViewZoneSort {
  field: ViewZoneSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewZoneSortFields {
  id
  code
  name
  description
  warehouseId
  warehouseCode
  warehouseName
  areaCount
  binCount
  aisleCount
  aisleColumnCount
  pickingUomRestrictionId
  pickingUomRestrictionCode
  pickingUomRestrictionLabel
}

input ViewZoneAreaFilter {
  and: [ViewZoneAreaFilter!]
  or: [ViewZoneAreaFilter!]
  zoneId: IDFilterComparison
  zoneCode: StringFieldComparison
  zoneName: StringFieldComparison
  zoneDescription: StringFieldComparison
  warehouseId: IDFilterComparison
  areaId: IDFilterComparison
  areaCode: StringFieldComparison
  areaName: StringFieldComparison
  mapped: BooleanFieldComparison
}

input ViewZoneAreaSort {
  field: ViewZoneAreaSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewZoneAreaSortFields {
  zoneId
  zoneCode
  zoneName
  zoneDescription
  warehouseId
  areaId
  areaCode
  areaName
  mapped
}

input ViewZoneAisleColumnFilter {
  and: [ViewZoneAisleColumnFilter!]
  or: [ViewZoneAisleColumnFilter!]
  zoneId: IDFilterComparison
  zoneCode: StringFieldComparison
  zoneName: StringFieldComparison
  zoneDescription: StringFieldComparison
  warehouseId: IDFilterComparison
  aisleColumnId: IDFilterComparison
  aisleColumnCode: StringFieldComparison
  aisleColumnName: StringFieldComparison
  aisleColumnDescription: StringFieldComparison
  mapped: BooleanFieldComparison
}

input ViewZoneAisleColumnSort {
  field: ViewZoneAisleColumnSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewZoneAisleColumnSortFields {
  zoneId
  zoneCode
  zoneName
  zoneDescription
  warehouseId
  aisleColumnId
  aisleColumnCode
  aisleColumnName
  aisleColumnDescription
  mapped
}

input ViewZoneBinMappedFilter {
  and: [ViewZoneBinMappedFilter!]
  or: [ViewZoneBinMappedFilter!]
  zoneId: IDFilterComparison
  zoneCode: StringFieldComparison
  zoneName: StringFieldComparison
  zoneDescription: StringFieldComparison
  warehouseId: IDFilterComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
  binType: BinTypeFilterComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  level: IntFieldComparison
  sourceBinBlock: BinBlockStateFilterComparison
  destinationBinBlock: BinBlockStateFilterComparison
  inactive: BinActiveStateFilterComparison
}

input ViewZoneBinMappedSort {
  field: ViewZoneBinMappedSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewZoneBinMappedSortFields {
  zoneId
  zoneCode
  zoneName
  zoneDescription
  warehouseId
  binId
  binCode
  binType
  x
  y
  z
  level
  sourceBinBlock
  destinationBinBlock
  inactive
}

input ViewZoneBinUnmappedFilter {
  and: [ViewZoneBinUnmappedFilter!]
  or: [ViewZoneBinUnmappedFilter!]
  warehouseId: IDFilterComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
  binType: BinTypeFilterComparison
  x: FloatFieldComparison
  y: FloatFieldComparison
  z: FloatFieldComparison
  level: IntFieldComparison
  sourceBinBlock: BinBlockStateFilterComparison
  destinationBinBlock: BinBlockStateFilterComparison
  inactive: BinActiveStateFilterComparison
}

input ViewZoneBinUnmappedSort {
  field: ViewZoneBinUnmappedSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewZoneBinUnmappedSortFields {
  warehouseId
  binId
  binCode
  binType
  x
  y
  z
  level
  sourceBinBlock
  destinationBinBlock
  inactive
}

input ViewZoneAisleFilter {
  and: [ViewZoneAisleFilter!]
  or: [ViewZoneAisleFilter!]
  zoneId: IDFilterComparison
  zoneCode: StringFieldComparison
  zoneName: StringFieldComparison
  zoneDescription: StringFieldComparison
  warehouseId: IDFilterComparison
  aisleId: IDFilterComparison
  aisleCode: StringFieldComparison
  aisleName: StringFieldComparison
  aisleDescription: StringFieldComparison
  mapped: BooleanFieldComparison
}

input ViewZoneAisleSort {
  field: ViewZoneAisleSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewZoneAisleSortFields {
  zoneId
  zoneCode
  zoneName
  zoneDescription
  warehouseId
  aisleId
  aisleCode
  aisleName
  aisleDescription
  mapped
}

input SlottingRunFilter {
  and: [SlottingRunFilter!]
  or: [SlottingRunFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  warehouse_id: IDFilterComparison
  ruleset_id: IDFilterComparison
  ruleset_name: StringFieldComparison
  dataset_id: IDFilterComparison
  dataset_name: StringFieldComparison
  created_by_user_id: IDFilterComparison
  created_by_user_name: StringFieldComparison
  deployed_by_user_id: IDFilterComparison
  deployed_by_user_name: StringFieldComparison
  deployed_at: DateFieldComparison
  duration: NumberFieldComparison
  run_duration: NumberFieldComparison
  created_at: DateFieldComparison
  updated_dt: DateFieldComparison
  deployment_ended_at: DateFieldComparison
  variant: StringFieldComparison
  status: RunStatusFilterComparison
  status_description: StringFieldComparison
  overall: NumberFieldComparison
  efficiency: NumberFieldComparison
  distance_saved: NumberFieldComparison
  cost_saved: NumberFieldComparison
  density: NumberFieldComparison
  input: JSONObjectFilterComparison
  dataset_start: DateFieldComparison
  dataset_end: DateFieldComparison
}

input RunStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: RunStatus
  neq: RunStatus
  gt: RunStatus
  gte: RunStatus
  lt: RunStatus
  lte: RunStatus
  like: RunStatus
  notLike: RunStatus
  iLike: RunStatus
  notILike: RunStatus
  in: [RunStatus!]
  notIn: [RunStatus!]
}

input SlottingRunSort {
  field: SlottingRunSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingRunSortFields {
  id
  name
  warehouse_id
  ruleset_id
  ruleset_name
  dataset_id
  dataset_name
  created_by_user_id
  created_by_user_name
  deployed_by_user_id
  deployed_by_user_name
  deployed_at
  duration
  run_duration
  created_at
  updated_dt
  deployment_ended_at
  variant
  status
  status_description
  overall
  efficiency
  distance_saved
  cost_saved
  density
  input
  dataset_start
  dataset_end
}

input DatasetMaterialsFilter {
  and: [DatasetMaterialsFilter!]
  or: [DatasetMaterialsFilter!]
  ff_dataset_id: IDFilterComparison
  storage_bin: StringFieldComparison
  material: StringFieldComparison
  material_description: StringFieldComparison
  available_stock: StringFieldComparison
  total_stock: StringFieldComparison
  base_unit_of_measure: StringFieldComparison
  batch_number: StringFieldComparison
}

input DatasetMaterialsSort {
  field: DatasetMaterialsSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum DatasetMaterialsSortFields {
  ff_dataset_id
  storage_bin
  material
  material_description
  available_stock
  total_stock
  base_unit_of_measure
  batch_number
}

input PlanogramBinMaterialsFilter {
  and: [PlanogramBinMaterialsFilter!]
  or: [PlanogramBinMaterialsFilter!]
  source_zone_code: StringFieldComparison
  destination_zone_code: StringFieldComparison
  run_id: IDFilterComparison
  source_bin: StringFieldComparison
  destination_bin: StringFieldComparison
  material: StringFieldComparison
  line_items: StringFieldComparison
  distance: FloatFieldComparison
}

input PlanogramBinMaterialsSort {
  field: PlanogramBinMaterialsSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum PlanogramBinMaterialsSortFields {
  source_zone_code
  destination_zone_code
  run_id
  source_bin
  destination_bin
  material
  line_items
  distance
}

input SlottingAbcAnalysisFilter {
  and: [SlottingAbcAnalysisFilter!]
  or: [SlottingAbcAnalysisFilter!]
  id: IDFilterComparison
  run_id: IDFilterComparison
  plant: StringFieldComparison
  material: StringFieldComparison
  material_description: StringFieldComparison
  proposed_abc_indicator: StringFieldComparison
  current_abc_indicator: StringFieldComparison
  deployed: BooleanFieldComparison
  process_dt: DateFieldComparison
  dataset_start_date: DateFieldComparison
  dataset_end_date: DateFieldComparison
  dataset_id: StringFieldComparison
  ruleset_id: StringFieldComparison
  ruleset_name: StringFieldComparison
  run_name: StringFieldComparison
  deployed_at: DateFieldComparison
}

input SlottingAbcAnalysisSort {
  field: SlottingAbcAnalysisSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingAbcAnalysisSortFields {
  id
  run_id
  plant
  material
  material_description
  proposed_abc_indicator
  current_abc_indicator
  deployed
  process_dt
  dataset_start_date
  dataset_end_date
  dataset_id
  ruleset_id
  ruleset_name
  run_name
  deployed_at
}

input RearrangementRecommendationFilter {
  and: [RearrangementRecommendationFilter!]
  or: [RearrangementRecommendationFilter!]
  id: IDFilterComparison
  run_id: StringFieldComparison
  run_name: StringFieldComparison
  warehouse_id: StringFieldComparison
  source_zone_id: StringFieldComparison
  destination_zone_id: StringFieldComparison
  source_zone_code: StringFieldComparison
  destination_zone_code: StringFieldComparison
  source_column: StringFieldComparison
  destination_column: StringFieldComparison
  source_bin: StringFieldComparison
  destination_bin: StringFieldComparison
  material: StringFieldComparison
  material_description: StringFieldComparison
  quantity: FloatFieldComparison
  movement_reason: StringFieldComparison
  task_type: StringFieldComparison
  distance_saved: FloatFieldComparison
  distance_uom: StringFieldComparison
  time_saved: FloatFieldComparison
  time_uom: StringFieldComparison
  cost_saved: FloatFieldComparison
  cost_uom: StringFieldComparison
  process_dt: DateFieldComparison
  deployed_at: DateFieldComparison
  deployed: BooleanFieldComparison
  swap_id: StringFieldComparison
  swap_source: StringFieldComparison
  trend_all_line_items: FloatFieldComparison
  trend_all_quantity: FloatFieldComparison
  trend_7_day_line_items: FloatFieldComparison
  trend_7_day_quantity: FloatFieldComparison
  trend_uom: StringFieldComparison
  fitness_score: FloatFieldComparison
  pick_efficiency_score: FloatFieldComparison
  pick_density_score: FloatFieldComparison
  putaway_efficiency_score: FloatFieldComparison
  putaway_density_score: FloatFieldComparison
  ground_level_score: FloatFieldComparison
  avoid_congestion_score: FloatFieldComparison
  lighter_to_staging_score: FloatFieldComparison
  current_max_quantity: FloatFieldComparison
  current_min_quantity: FloatFieldComparison
  proposed_max_quantity: FloatFieldComparison
  proposed_min_quantity: FloatFieldComparison
  ruleset_id: StringFieldComparison
  ruleset_name: StringFieldComparison
  dataset_id: StringFieldComparison
  dataset_start_date: DateFieldComparison
  dataset_end_date: DateFieldComparison
}

input RearrangementRecommendationSort {
  field: RearrangementRecommendationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum RearrangementRecommendationSortFields {
  id
  run_id
  run_name
  warehouse_id
  source_zone_id
  destination_zone_id
  source_zone_code
  destination_zone_code
  source_column
  destination_column
  source_bin
  destination_bin
  material
  material_description
  quantity
  movement_reason
  task_type
  distance_saved
  distance_uom
  time_saved
  time_uom
  cost_saved
  cost_uom
  process_dt
  deployed_at
  deployed
  swap_id
  swap_source
  trend_all_line_items
  trend_all_quantity
  trend_7_day_line_items
  trend_7_day_quantity
  trend_uom
  fitness_score
  pick_efficiency_score
  pick_density_score
  putaway_efficiency_score
  putaway_density_score
  ground_level_score
  avoid_congestion_score
  lighter_to_staging_score
  current_max_quantity
  current_min_quantity
  proposed_max_quantity
  proposed_min_quantity
  ruleset_id
  ruleset_name
  dataset_id
  dataset_start_date
  dataset_end_date
}

input SlottingConfigurationFilter {
  and: [SlottingConfigurationFilter!]
  or: [SlottingConfigurationFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: IDFilterComparison
  configuration: JSONFilterComparison
}

input SlottingConfigurationSort {
  field: SlottingConfigurationSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingConfigurationSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  configuration
}

enum SmartScanContext {
  taskAgenda
}

input SystemConnectionFilter {
  and: [SystemConnectionFilter!]
  or: [SystemConnectionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  description: StringFieldComparison
  systemType: SystemConnectionTypeFilterComparison
  baseUrl: StringFieldComparison
  urlHeaders: JSONObjectFilterComparison
  timezone: StringFieldComparison
  stockStatusSetting: SystemStockStatusSettingFilterComparison
  batchSize: IntFieldComparison
  active: BooleanFieldComparison
}

input SystemConnectionTypeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: SystemConnectionType
  neq: SystemConnectionType
  gt: SystemConnectionType
  gte: SystemConnectionType
  lt: SystemConnectionType
  lte: SystemConnectionType
  like: SystemConnectionType
  notLike: SystemConnectionType
  iLike: SystemConnectionType
  notILike: SystemConnectionType
  in: [SystemConnectionType!]
  notIn: [SystemConnectionType!]
}

input SystemStockStatusSettingFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: SystemStockStatusSetting
  neq: SystemStockStatusSetting
  gt: SystemStockStatusSetting
  gte: SystemStockStatusSetting
  lt: SystemStockStatusSetting
  lte: SystemStockStatusSetting
  like: SystemStockStatusSetting
  notLike: SystemStockStatusSetting
  iLike: SystemStockStatusSetting
  notILike: SystemStockStatusSetting
  in: [SystemStockStatusSetting!]
  notIn: [SystemStockStatusSetting!]
}

input SystemConnectionSort {
  field: SystemConnectionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SystemConnectionSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  description
  systemType
  baseUrl
  urlHeaders
  timezone
  stockStatusSetting
  batchSize
  active
}

input ApproveBinCountTaskQueryModelFilter {
  and: [ApproveBinCountTaskQueryModelFilter!]
  or: [ApproveBinCountTaskQueryModelFilter!]
  taskId: IDFilterComparison
  taskCode: StringFieldComparison
  taskStatus: TaskStatusFilterComparison
  refCountTaskId: IDFilterComparison
  refCountTaskCode: StringFieldComparison
  refCountCountType: PhysicalInventoryCountTypeFilterComparison
  refCountTaskCompletedByUserId: IDFilterComparison
  refCountTaskCompletedByUserFirstName: StringFieldComparison
  refCountTaskCompletedByUserLastName: StringFieldComparison
  taskCreatedAt: DateFieldComparison
  taskUpdatedAt: DateFieldComparison
  dueDate: DateFieldComparison
  warehouseId: IDFilterComparison
  licensePlateId: IDFilterComparison
  licensePlateCode: StringFieldComparison
  binId: IDFilterComparison
  binCode: StringFieldComparison
  productId: IDFilterComparison
  productCode: IDFilterComparison
  lotId: IDFilterComparison
  lotCode: IDFilterComparison
  stockStatusId: IDFilterComparison
  stockStatusCode: StringFieldComparison
  stockStatusLabel: StringFieldComparison
  baseExpectedQuantity: StringFieldComparison
  baseCountedQuantity: StringFieldComparison
  expectedQuantity: StringFieldComparison
  countedQuantity: StringFieldComparison
  quantityDifference: StringFieldComparison
  quantityUOMId: IDFilterComparison
  quantityUOMCode: StringFieldComparison
}

input ApproveBinCountTaskQueryModelSort {
  field: ApproveBinCountTaskQueryModelSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ApproveBinCountTaskQueryModelSortFields {
  taskId
  taskCode
  taskStatus
  refCountTaskId
  refCountTaskCode
  refCountCountType
  refCountTaskCompletedByUserId
  refCountTaskCompletedByUserFirstName
  refCountTaskCompletedByUserLastName
  taskCreatedAt
  taskUpdatedAt
  dueDate
  warehouseId
  licensePlateId
  licensePlateCode
  binId
  binCode
  productId
  productCode
  lotId
  lotCode
  stockStatusId
  stockStatusCode
  stockStatusLabel
  baseExpectedQuantity
  baseCountedQuantity
  expectedQuantity
  countedQuantity
  quantityDifference
  quantityUOMId
  quantityUOMCode
}

input TaskTypeBinStatusValidationInput {
  sourceBinId: ID
  destinationBinId: ID
}

input TaskTypeBinStatusForLicensePlateValidationInput {
  sourceLicensePlateId: ID
  destinationLicensePlateId: ID
}

input TaskTypeStockStatusValidationInput {
  stockStatusId: ID!
}

input TaskTypeStockStatusForLicensePlateValidationInput {
  licensePlateId: ID!
}

input LicensePlateTaskValidationDto {
  licensePlateId: ID!
}

input SlottingExclusionFilter {
  and: [SlottingExclusionFilter!]
  or: [SlottingExclusionFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseId: IDFilterComparison
  productId: IDFilterComparison
  excludedById: IDFilterComparison
}

input SlottingExclusionSort {
  field: SlottingExclusionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum SlottingExclusionSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseId
  productId
  excludedById
}

input ViewSlottingExclusionFilter {
  and: [ViewSlottingExclusionFilter!]
  or: [ViewSlottingExclusionFilter!]
  code: StringFieldComparison
  id: IDFilterComparison
  productId: IDFilterComparison
  warehouseId: IDFilterComparison
  name: StringFieldComparison
  description: StringFieldComparison
  baseUOM: StringFieldComparison
  excludedBy: StringFieldComparison
  createdAt: StringFieldComparison
  updatedAt: StringFieldComparison
}

input ViewSlottingExclusionSort {
  field: ViewSlottingExclusionSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum ViewSlottingExclusionSortFields {
  code
  id
  productId
  warehouseId
  name
  description
  baseUOM
  excludedBy
  createdAt
  updatedAt
}

input WarehouseOpFileFilter {
  and: [WarehouseOpFileFilter!]
  or: [WarehouseOpFileFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  code: StringFieldComparison
  businessPartnerId: IDFilterComparison
  warehouseOpCode: WarehouseOpCodeFilterComparison
  warehouseOpFileStatus: WarehouseOpFileStatusFilterComparison
  processedDate: DateFieldComparison
  uploadedDate: DateFieldComparison
}

input WarehouseOpCodeFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: WarehouseOpCode
  neq: WarehouseOpCode
  gt: WarehouseOpCode
  gte: WarehouseOpCode
  lt: WarehouseOpCode
  lte: WarehouseOpCode
  like: WarehouseOpCode
  notLike: WarehouseOpCode
  iLike: WarehouseOpCode
  notILike: WarehouseOpCode
  in: [WarehouseOpCode!]
  notIn: [WarehouseOpCode!]
}

input WarehouseOpFileStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: WarehouseOpFileStatus
  neq: WarehouseOpFileStatus
  gt: WarehouseOpFileStatus
  gte: WarehouseOpFileStatus
  lt: WarehouseOpFileStatus
  lte: WarehouseOpFileStatus
  like: WarehouseOpFileStatus
  notLike: WarehouseOpFileStatus
  iLike: WarehouseOpFileStatus
  notILike: WarehouseOpFileStatus
  in: [WarehouseOpFileStatus!]
  notIn: [WarehouseOpFileStatus!]
}

input WarehouseOpFileSort {
  field: WarehouseOpFileSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehouseOpFileSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  code
  businessPartnerId
  warehouseOpCode
  warehouseOpFileStatus
  processedDate
  uploadedDate
}

input WarehouseOpFileRowFilter {
  and: [WarehouseOpFileRowFilter!]
  or: [WarehouseOpFileRowFilter!]
  id: IDFilterComparison
  createdAt: DateFieldComparison
  updatedAt: DateFieldComparison
  updatedByEmail: StringFieldComparison
  updatedById: IDFilterComparison
  deletedAt: DateFieldComparison
  warehouseOpFileId: StringFieldComparison
  warehouseOpFileRowStatus: WarehouseOpFileRowStatusFilterComparison
  deliveryItemId: IDFilterComparison
  fulfillmentItemId: IDFilterComparison
  rowData: JSONObjectFilterComparison
  rowNumber: IntFieldComparison
  errors: JSONObjectFilterComparison
  warehouseOpFileType: WarehouseOpCodeFilterComparison
  barcode: StringFieldComparison
}

input WarehouseOpFileRowStatusFilterComparison {
  is: Boolean
  isNot: Boolean
  eq: WarehouseOpFileRowStatus
  neq: WarehouseOpFileRowStatus
  gt: WarehouseOpFileRowStatus
  gte: WarehouseOpFileRowStatus
  lt: WarehouseOpFileRowStatus
  lte: WarehouseOpFileRowStatus
  like: WarehouseOpFileRowStatus
  notLike: WarehouseOpFileRowStatus
  iLike: WarehouseOpFileRowStatus
  notILike: WarehouseOpFileRowStatus
  in: [WarehouseOpFileRowStatus!]
  notIn: [WarehouseOpFileRowStatus!]
}

input WarehouseOpFileRowSort {
  field: WarehouseOpFileRowSortFields!
  direction: SortDirection!
  nulls: SortNulls
}

enum WarehouseOpFileRowSortFields {
  id
  createdAt
  updatedAt
  updatedByEmail
  updatedById
  deletedAt
  warehouseOpFileId
  warehouseOpFileRowStatus
  deliveryItemId
  fulfillmentItemId
  rowData
  rowNumber
  errors
  warehouseOpFileType
  barcode
}

type Mutation {
  updateUsersForUserGroup(input: UpdateUsersForUserGroupMappingInput!): String!
  updateRolesForUserGroup(input: UpdateRolesForUserGroupDto!): String!
  createOneUserGroup(input: UserGroupCreateInputDto!): UserGroup!
  updateOneUserGroup(input: UserGroupUpdateInput!): UserGroup!
  deleteOneUserGroup(input: UserGroupDeleteOneDto!): UserGroup!
  destroyOneuserGroup(id: ID!): UserGroup!
  destroyOneuserGroupMapping(id: ID!): UserGroupMapping!
  destroyOneuserGroupRoleMapping(id: ID!): UserGroupRoleMapping!
  createOneRole(input: RoleCreateInput!): Role!
  deleteOneRole(input: RoleDeleteInputType!): Role!
  destroyOnerole(id: ID!): Role!
  destroyOnepermission(id: ID!): Permission!
  createOneWarehouse(input: WarehouseCreateOneInput!): Warehouse!
  updateOneWarehouse(input: WarehouseUpdateOneInput!): Warehouse!
  deleteOneWarehouse(input: DeleteOneEntityIDInput!): Warehouse!
  destroyOneWarehouse(id: ID!): Warehouse
  createOneContactInfo(input: ContactInfoCreateOneInput!): ContactInfo!
  updateOneContactInfo(input: ContactInfoUpdateOneInput!): ContactInfo!
  deleteOneContactInfo(input: DeleteOneEntityIDInput!): ContactInfo!

  """
  Update Contact info data on Company by provided Company id and updateData argument.
  """
  updateOneContactInfoByCompanyId(input: UpdateContactInfoInputDto!): ContactInfo!

  """
  Update Contact info data on Organization by provided Organization id and updateData argument.
  """
  updateOneContactInfoByOrganizationId(input: UpdateContactInfoInputDto!): ContactInfo!

  """
  Update Contact info data on Warehouse by provided Warehouse id and updateData argument.
  """
  updateOneContactInfoByWarehouseId(input: UpdateContactInfoInputDto!): ContactInfo!
  destroyOneContactInfo(id: ID!): ContactInfo!
  createOneOrganization(input: OrganizationCreateOneInput!): Organization!
  updateOneOrganization(input: OrganizationUpdateOneInput!): Organization!
  deleteOneOrganization(input: DeleteOneEntityIDInput!): Organization!
  destroyOneOrganization(id: ID!): Organization!
  createOneCompany(input: CompanyCreateOneInput!): Company!
  updateOneCompany(input: CompanyUpdateOneInput!): Company!
  deleteOneCompany(input: DeleteOneEntityIDInput!): Company!
  destroyOneCompany(id: ID!): Company!
  createOneDisplayPreference(input: DisplayPreferenceCreateOneInput!): DisplayPreference!
  updateOneDisplayPreference(input: DisplayPreferenceUpdateOneInput!): DisplayPreference!
  deleteOneDisplayPreference(input: DeleteOneEntityIDInput!): DisplayPreference!
  destroyOneDisplayPreference(id: ID!): DisplayPreference!

  """Updates display preferences by warehouse id"""
  updateOneDisplayPreferenceByWarehouseId(input: DisplayPreferenceUpdateInputDto!): DisplayPreference!

  """Updates display preferences by user id"""
  updateOneDisplayPreferenceByUserId(input: DisplayPreferenceUpdateInputDto!): DisplayPreference!

  """Updates display preferences by company id"""
  updateOneDisplayPreferenceByCompanyId(input: DisplayPreferenceUpdateInputDto!): DisplayPreference!

  """Updates display preferences by organization id"""
  updateOneDisplayPreferenceByOrganizationId(input: DisplayPreferenceUpdateInputDto!): DisplayPreference!
  createOneUserWarehouseDefault(input: UserWarehouseDefaultCreateOneInput!): UserWarehouseDefault!
  updateOneUserWarehouseDefault(input: UserWarehouseDefaultUpdateOneInput!): UserWarehouseDefault!
  deleteOneUserWarehouseDefault(input: DeleteOneEntityIDInput!): UserWarehouseDefault!
  destroyOneUserWarehouseDefault(id: ID!): UserWarehouseDefault!
  createOneTeam(input: TeamCreateOneInput!): Team!
  updateOneTeam(input: TeamUpdateOneInput!): Team!
  deleteOneTeam(input: DeleteOneEntityIDInput!): Team!
  destroyOneTeam(id: ID!): Team!
  createOneUserTeamMapping(input: UserTeamMappingCreateOneInput!): UserTeamMapping!
  updateOneUserTeamMapping(input: UserTeamMappingUpdateOneInput!): UserTeamMapping!
  deleteOneUserTeamMapping(input: DeleteOneEntityIDInput!): UserTeamMapping!
  destroyOneUserTeamMapping(id: ID!): UserTeamMapping!
  ewmCreateWarehouseTask(
    """Delivery associated with the entity"""
    delivery: String!

    """Handling unit"""
    handlingUnit: String!
  ): EwmWarehouseTaskResponse!
  ewmPostGoodsReceipt(
    """Handling unit"""
    handlingUnit: String!

    """Bin entity belongs to"""
    bin: String!
  ): EwmWarehouseTaskResponse!
  createOneBarcode(input: BarcodeCreateOneInput!): Barcode!
  updateOneBarcode(input: BarcodeUpdateOneInput!): Barcode!
  deleteOneBarcode(input: DeleteOneBarcodeInput!): Barcode!
  destroyOneBarcode(id: ID!): Barcode!
  destroyOneBarcodeMapping(id: ID!): BarcodeMapping!
  createOneUser(input: UserCreateOneInput!): User!
  updateOneUser(input: UserUpdateOneInput!): User!
  deleteOneUser(input: DeleteOneEntityIDInput!): User!
  destroyOneUser(id: ID!): User!
  resolveNonCompliantBarcodes(input: NonCompliantBarcodeResolveInputType!): String!
  destroyOnenonCompliantBarcode(id: ID!): NonCompliantBarcode!
  ewmDeconHandlingUnit(
    """Handling unit"""
    handlingUnit: String!
  ): EwmHUDeconResponse!
  ewmOneStepBinToBin(
    """Handling unit"""
    handlingUnit: String!

    """Bin entity belongs to"""
    bin: String!
  ): EwmBinToBinResponse!
  ewmTwoStepBinToBinCreate(
    """Handling unit"""
    handlingUnit: String!

    """Bin entity belongs to"""
    destinationBin: String!
  ): EwmBinToBinResponse!
  ewmTwoStepBinToBinComplete(
    """Warehouse task"""
    warehouseTask: String!

    """Bin entity belongs to"""
    destinationBin: String!
  ): EwmBinToBinResponse!
  completeWarehouseOrderTask(completeWarehouseOrderTask: [EwmCompleteWarehouseOrderTaskDto!]!): String!
  destroyOneAdminTask(id: ID!): AdminTask!
  createBarcodeEnrollment(input: CreateBarcodeEnrollmentInputDto!): AdminTask!
  completeBarcodeEnrollment(input: CompleteBarcodeEnrollmentInputDto!): AdminTask!
  destroyOneAdminTaskType(id: ID!): AdminTaskType!

  """creates a new agent configuration"""
  createOneAgentConfiguration(
    """Agent Name"""
    agentName: String!

    """Agent Hosts"""
    hosts: [AgentConfigurationHostInput!]!
  ): ProxyConfig!

  """updates a given agent configuration by id"""
  updateOneAgentConfiguration(
    """Entity ID"""
    agentId: ID!

    """Agent configuration update"""
    update: AgentConfigurationUpdate!
  ): ProxyConfig!

  """updates the proxy url"""
  updateProxyUrl(proxyUrl: String!): ProxyConfig!

  """deletes a single agent configuration by id"""
  deleteOneAgentConfiguration(agentId: ID!): ProxyConfig!
  createOneAisleColumn(input: AisleColumnCreateOneInput!): AisleColumn!
  updateOneAisleColumn(input: AisleColumnUpdateOneInput!): AisleColumn!
  deleteOneAisleColumn(input: DeleteOneEntityIDInput!): AisleColumn!
  destroyOneAisleColumn(id: ID!): AisleColumn!
  createOneAisle(input: AisleCreateOneInput!): Aisle!
  updateOneAisle(input: AisleUpdateOneInput!): Aisle!
  deleteOneAisle(input: DeleteOneEntityIDInput!): Aisle!
  destroyOneAisle(id: ID!): Aisle!
  createOneArea(input: AreaCreateOneInput!): Area!
  updateOneArea(input: AreaUpdateOneInput!): Area!
  deleteOneArea(input: DeleteOneEntityIDInput!): Area!
  destroyOneArea(id: ID!): Area!
  destroyOneSapStorageLocationPlant(id: ID!): SapStorageLocationPlant!
  createOneBarcodeTemplateMapping(input: BarcodeTemplateMappingCreateOneInput!): BarcodeTemplateMapping!
  updateOneBarcodeTemplateMapping(input: BarcodeTemplateMappingUpdateOneInput!): BarcodeTemplateMapping!
  deleteOneBarcodeTemplateMapping(input: DeleteOneEntityIDInput!): BarcodeTemplateMapping!
  destroyOnebarcodeTemplateMapping(id: ID!): BarcodeTemplateMapping!
  destroyOnebarcodeTemplate(id: ID!): BarcodeTemplate!
  createOneBin(input: BinCreateOneInput!): Bin!
  updateOneBin(input: BinUpdateOneInput!): Bin!
  deleteOneBin(input: DeleteOneEntityIDInput!): Bin!

  """Enrolls bin location data in the system."""
  enroll_Bin(coordinates: BinEnrollment!, id: ID!): Bin!
  destroyOneBin(id: ID!): Bin!
  createOneBinSize(input: BinSizeCreateOneInput!): BinSize!
  updateOneBinSize(input: BinSizeUpdateOneInput!): BinSize!
  copyOneBinSize(copyBinSize: BinSizeCopyDto!): BinSize!
  deleteOneBinSize(input: DeleteOneEntityIDInput!): BinSize!
  destroyOneBinSize(id: ID!): BinSize!
  updateOneUnitOfMeasureGlossary(input: UnitOfMeasureGlossaryUpdateOneInput!): UnitOfMeasureGlossary!
  deleteOneUnitOfMeasureGlossary(input: DeleteOneEntityIDInput!): UnitOfMeasureGlossary!
  destroyOneUnitOfMeasureGlossary(id: ID!): UnitOfMeasureGlossary!
  createOneVertex(input: VertexCreateOneInput!): Vertex!
  updateManyBinStatusMappings(input: BinStatusMappingInputDto!): String!
  createOneBusinessPartner(input: BusinessPartnerCreateOneInput!): BusinessPartner!
  createManyBusinessPartners(input: BusinessPartnerCreateManyInput!): [BusinessPartner!]!
  updateOneBusinessPartner(input: BusinessPartnerUpdateOneInput!): BusinessPartner!
  deleteOneBusinessPartner(input: DeleteOneEntityIDInput!): BusinessPartner!
  destroyOneBusinessPartner(id: ID!): BusinessPartner!
  createOneContract(input: ContractCreateOneInput!): Contract!
  updateOneContract(input: ContractUpdateOneInput!): Contract!
  deleteOneContract(input: DeleteOneEntityIDInput!): Contract!
  destroyOneContract(id: ID!): Contract!
  createOneContractRule(input: ContractRuleCreateOneInput!): ContractRule!
  updateOneContractRule(input: ContractRuleUpdateOneInput!): ContractRule!
  deleteOneContractRule(input: DeleteOneEntityIDInput!): ContractRule!
  destroyOneContractRule(id: ID!): ContractRule!
  completeManyCountArtifacts(ids: [String!]!): String!
  cancelManyCountArtifacts(ids: [String!]!): String!
  createOneLicensePlate(input: LicensePlateCreateOneInput!): LicensePlate!
  updateOneLicensePlate(input: LicensePlateUpdateOneInput!): LicensePlate!
  updateManyLicensePlateSLOC(input: [LicensePlateUpdateManySLOCDto!]!): String!
  deleteOneLicensePlate(input: DeleteOneEntityIDInput!): LicensePlate!
  updateManyLicensePlateStatusMappings(input: LicensePlateStatusMappingInputDto!): String!
  destroyOneLicensePlate(id: ID!): LicensePlate!
  destroyOnelicensePlateStatusMapping(id: ID!): LicensePlateStatusMapping!
  destroyOnelicensePlateStatus(id: ID!): LicensePlateStatus!
  createStockFromProduction(input: CreateStockFromProductionTaskInputDto!): String!
  createOneTask(input: TaskCreateOneInput!): Task!
  updateOneTask(input: UpdateOneTaskInput!): Task!
  deleteOneTask(input: DeleteOneEntityIDInput!): Task!
  destroyOneTask(id: ID!): Task!
  cancelManyTasks(
    """Dto wrapper"""
    input: [TaskCancelManyDto!]!
  ): [Task!]!

  """
  THIS MUTATION SHOULD NOT BE IMPLEMENTED AS PART OF ANY SOLUTION - DEVELOPMENT HELPER ONLY
  """
  cancelAllNotStartedTasks(limit: Int): [String!]! @deprecated(reason: "THIS MUTATION SHOULD NOT BE IMPLEMENTED AS PART OF ANY SOLUTION - DEVELOPMENT HELPER ONLY")
  createOneTaskType(input: TaskTypeCreateOneInput!): TaskType!
  updateOneTaskType(input: TaskTypeUpdateOneInput!): TaskType!
  deleteOneTaskType(input: DeleteOneEntityIDInput!): TaskType!
  destroyOneTaskType(id: ID!): TaskType!

  """update one stock status mappings for a single task type"""
  updateOneTaskTypeStockStatusMapping(input: TaskTypeStockStatusMappingReplaceInputDto!): ViewTaskTypeStockStatusMapping!
  createOneStockStatusType(input: StockStatusTypeCreateOneInput!): StockStatusType!
  deleteOneStockStatusType(input: StockStatusTypeDeleteOneInput!): StockStatusType!
  copyOneStockStatusType(input: CopyStockStatusTypeInputDto!): StockStatusType! @deprecated(reason: "Deprecated - createOneStockStatusType should be used instead")
  updateOneStockStatusType(input: UpdateStockStatusTypeInputDto!): StockStatusType!
  createOneStockStatusMapping(input: StockStatusMappingCreateOneInput!): StockStatusMapping!
  destroyOneStockStatusType(id: ID!): StockStatusType!
  destroyOneSapStockStatusType(id: ID!): SapStockStatusType!
  createOneSapHuUserStatus(input: SapHuUserStatusCreateOneInput!): SapHuUserStatus!
  updateOneSapHuUserStatus(input: SapHuUserStatusUpdateOneInput!): SapHuUserStatus!
  deleteOneSapHuUserStatus(input: DeleteOneEntityIDInput!): SapHuUserStatus!
  destroyOneSapHuUserStatus(id: ID!): SapHuUserStatus!
  destroyOneProductMovement(id: ID!): ProductMovement!
  deleteOneUnitOfMeasureProductConversion(input: DeleteOneEntityIDInput!): UnitOfMeasureProductConversion!
  destroyOneUnitOfMeasureProductConversion(id: ID!): UnitOfMeasureProductConversion!
  createOneSapDeliveryDocumentType(input: SapDeliveryDocumentTypeCreateOneInput!): SapDeliveryDocumentType!
  updateOneSapDeliveryDocumentType(input: SapDeliveryDocumentTypeUpdateOneInput!): SapDeliveryDocumentType!
  deleteOneSapDeliveryDocumentType(input: DeleteOneEntityIDInput!): SapDeliveryDocumentType!
  destroyOneSapDeliveryDocumentType(id: ID!): SapDeliveryDocumentType!
  createOneWarehousePreferredUnitOfMeasure(input: WarehousePreferredUnitOfMeasureCreateOneInput!): WarehousePreferredUnitOfMeasure!
  updateOneWarehousePreferredUnitOfMeasure(input: WarehousePreferredUnitOfMeasureUpdateOneInput!): WarehousePreferredUnitOfMeasure!
  deleteOneWarehousePreferredUnitOfMeasure(input: DeleteOneEntityIDInput!): WarehousePreferredUnitOfMeasure!
  destroyOneUnitOfMeasure(id: ID!): WarehousePreferredUnitOfMeasure!

  """update one bin status mappings for a single task type"""
  updateOneTaskTypeBinStatusMapping(input: TaskTypeBinStatusReplaceInputDto!): ViewTaskTypeBinStatusMapping!
  createOneTaskGroup(input: TaskGroupCreateOneInput!): TaskGroup!
  updateOneTaskGroup(input: TaskGroupUpdateOneInput!): TaskGroup!
  deleteOneTaskGroup(input: DeleteOneEntityIDInput!): TaskGroup!
  destroyOneTaskGroup(id: ID!): TaskGroup!
  createOneLot(input: LotCreateOneInput!): Lot!
  updateOneLot(input: LotUpdateOneInput!): Lot!
  createOrUpdateManyLots(input: LotCreateOrUpdateManyInput!): CreatedOrUpdatedLotsResult!
  deleteOneLot(input: DeleteOneEntityIDInput!): Lot!
  destroyOneLot(id: ID!): Lot!
  createOneProduct(input: ProductCreateOneInput!): Product!
  createOneProductAndUom(input: ProductUomCreateOrUpdateOneInput!): Product!
  updateOneProduct(input: ProductUpdateOneInput!): Product!
  deleteOneProduct(input: DeleteOneEntityIDInput!): Product!
  destroyOneProduct(id: ID!): Product!
  createOrUpdateManyProductsAndUoms(input: ProductUomCreateOrUpdateManyInput!): String!
  createOneInternalStockOrderForLp(input: InternalStockOrderCreateForLpInput!): InternalStockOrder!
  createOneInternalStockOrderForFulfillment(input: InternalStockOrderCreateForFulfillmentInput!): InternalStockOrder!
  assignLpsToFulfillmentItem(input: FulfillmentItemLicensePlateAssignDto!): InternalStockOrder!
  createOneDelivery(input: DeliveryCreateOneInput!): Delivery!
  updateOneDelivery(input: UpdateOneDeliveryInput!): Delivery!
  deleteOneDelivery(input: DeleteOneEntityIDInput!): Delivery!
  destroyOneDelivery(id: ID!): Delivery!
  createOneFulfillmentItem(input: FulfillmentItemCreateOneInput!): FulfillmentItem!
  updateOneFulfillmentItem(input: FulfillmentItemUpdateOneInput!): FulfillmentItem!
  deleteOneFulfillmentItem(input: DeleteOneEntityIDInput!): FulfillmentItem!
  destroyOneFulfillmentItem(id: ID!): FulfillmentItem!
  createOneSapBinFFArea(input: SapBinFFAreaCreateOneInput!): SapBinFFArea!
  updateOneSapBinFFArea(input: SapBinFFAreaUpdateOneInput!): SapBinFFArea!
  deleteOneSapBinFFArea(input: DeleteOneEntityIDInput!): SapBinFFArea!
  destroyOneSapBinFFArea(id: ID!): SapBinFFArea!
  createOneIntegrationLog(input: IntegrationLogCreateOneInput!): IntegrationLog!
  updateOneIntegrationLog(input: IntegrationLogUpdateOneInput!): IntegrationLog!
  createOneWarehousePath(input: WarehousePathCreateOneInput!): WarehousePath!
  updateOneWarehousePath(input: WarehousePathUpdateOneInput!): WarehousePath!
  deleteOneWarehousePath(input: DeleteOneEntityIDInput!): WarehousePath!
  destroyOneDeliveryItem(id: ID!): DeliveryItem!
  cancelDelivery(deliveryId: String!): Delivery!
  cancelManyDeliveryItems(
    """Delivery items to cancel"""
    cancelManyDeliveryItems: [CancelManyDeliveryItemsDto!]!
  ): [DeliveryItem!]!

  """Submits an SAP Post Goods Receipt for a delivery."""
  postGoodsReceipt(deliveryId: ID!): Delivery!
  createOneDeliveryItem(input: DeliveryItemCreateOneInput!): DeliveryItem!
  updateOneDeliveryItem(input: DeliveryItemUpdateOneInput!): DeliveryItem!
  deleteOneDeliveryItem(input: DeleteOneEntityIDInput!): DeliveryItem!
  generateData(type: DataGenerationType!, numberOfDeliveries: Float = 25, minQuantity: Float = 1, maxQuantity: Float = 100, maxLineItems: Float = 5, minLineItems: Float = 2, throttleLimit: Float = 5, deliveryDateSpread: Float = 5, generateTasks: Boolean = true, scopedData: [ScopedData!] = [{productCode: "BB-JMX-007", binCode: "A00801"}, {productCode: "SC-TBX-001", binCode: "A00301"}, {productCode: "WS-JBS-023", binCode: "A01001"}, {productCode: "SB-STC-026", binCode: "A01901"}, {productCode: "BG-MGS-027", binCode: "A00601"}]): GenerateDataOutputDto!
  completeRandomUnloads(maxToComplete: Float = 5, throttleLimit: Float = 5): RandomUnloadOutputDto!
  completeRandomPutaways(maxToComplete: Float = 5, throttleLimit: Float = 5): RandomPutawayOutputDto!
  generateRandomProducts(numberOfProducts: Float = 100, throttleLimit: Float = 100): GenerateProductOutputDto!
  generateRandomBins(numberOfBins: Float = 100, code: String = "STORAGE", throttleLimit: Float = 100): GenerateBinOutputDto!
  createDemoBinsAndProducts: DemoDataOutputDto!
  generateRandomLicensePlates(throttleLimit: Float = 100, numberOfLicensePlates: Float = 100): String!
  createOneDoor(input: DoorCreateOneInput!): Door!
  updateOneDoor(input: DoorUpdateOneInput!): Door!
  deleteOneDoor(input: DeleteOneEntityIDInput!): Door!
  destroyOneDoor(id: ID!): Door!
  createUnloadTasksForFFDelivery(deliveryId: ID!): [Task!]!
  completeOneFFUnloadMovementTask(
    """Complete unload task wrapper"""
    completeUnloadTask: TaskCompleteOneUnloadInput!
  ): Task!
  completeManyFFUnloadMovementTask(
    """Dto wrapper for complete unload tasks"""
    completeManyUnloadTasks: [TaskCompleteOneOfManyUnloadInput!]

    """Destination bin ID"""
    destinationBinId: ID!
  ): [Task!]!
  createUnloadTasksForDelivery(deliveryId: ID!): [Task!]! @deprecated(reason: "Deprecated. Please use createUnloadTasksForFFDelivery mutation.")
  completeOneUnloadMovementTask(
    """Complete unload task wrapper"""
    completeUnloadTask: TaskCompleteOneUnloadInput!
  ): Task! @deprecated(reason: "Deprecated. Please use completeOneFFUnloadMovementTask mutation.")
  completeManyUnloadMovementTask(
    """Dto wrapper for complete unload tasks"""
    completeUnloadTasks: [TaskCompleteUnloadInput!]
  ): [Task!]! @deprecated(reason: "Deprecated. Please use completeManyFFUnloadMovementTask mutation.")
  completeManyOneStepUnload(
    """Dto wrapper for complete unload tasks"""
    completeUnloadTasks: [TaskCompleteUnloadInput!]!

    """Entity's bin ID (foreign key)"""
    destinationBinId: String!
  ): TaskCompleteManyLicensePlatePutawayResponse! @deprecated(reason: "Deprecated. Please use completeOneFFPutawayTask mutation.")
  processReturnDelivery(input: DeliveryProcessReturnDto!): String! @deprecated(reason: "Deprecated. Awaiting refactor.")
  completeOneFFPutawayTask(input: CompletePutawayTaskInputDto!): Task!
  cancelDeliveryTasks(input: CancelPutawayTaskInputDto!): [String!]!
  createTasksForDelivery(input: CreatePutawayTaskInputDto!): [Task!]!
  completeOnePutawayTask(input: CompletePutawayTaskInputDto!): Task!
  completeManyLicensePlatePutawayTask(
    """Dto wrapper for complete putaway tasks"""
    completeLicensePlatePutaways: [TaskCompleteManyLicensePlatePutawayInput!]!

    """Entity ID"""
    destinationBinId: ID!
  ): TaskCompleteManyLicensePlatePutawayResponse!
  createOneWarehouseConfiguration(input: WarehouseConfigurationCreateOneInput!): WarehouseConfiguration!
  updateOneWarehouseConfiguration(input: WarehouseConfigurationUpdateOneInput!): WarehouseConfiguration!
  deleteOneWarehouseConfiguration(input: DeleteOneEntityIDInput!): WarehouseConfiguration!
  destroyOneWarehouseConfiguration(id: ID!): WarehouseConfiguration!
  updateOneDisposition(input: UpdateOneDispositionInput!): Disposition!
  createOneEdge(input: EdgeCreateOneInput!): Edge!
  createOneEffectiveContractMapping(input: EffectiveContractMappingCreateOneInput!): EffectiveContractMapping!
  updateOneEffectiveContractMapping(input: EffectiveContractMappingUpdateOneInput!): EffectiveContractMapping!
  deleteOneEffectiveContractMapping(input: DeleteOneEntityIDInput!): EffectiveContractMapping!
  destroyOneEffectiveContractMapping(id: ID!): EffectiveContractMapping!
  createOneEquipmentItem(input: EquipmentCreateOneInput!): EquipmentItem!
  updateOneEquipmentItem(input: EquipmentUpdateOneInput!): EquipmentItem!
  deleteOneEquipmentItem(input: DeleteOneEntityIDInput!): EquipmentItem!
  destroyOneEquipmentItem(id: ID!): EquipmentItem!
  createOneEquipmentType(input: EquipmentTypeCreateOneInput!): EquipmentType!
  updateOneEquipmentType(input: EquipmentTypeUpdateOneInput!): EquipmentType!
  deleteOneEquipmentType(input: DeleteOneEntityIDInput!): EquipmentType!
  destroyOneEquipmentType(id: ID!): EquipmentType!
  createOneEquipmentModel(input: EquipmentModelCreateOneInput!): EquipmentModel!
  updateOneEquipmentModel(input: EquipmentModelUpdateOneInput!): EquipmentModel!
  deleteOneEquipmentModel(input: DeleteOneEntityIDInput!): EquipmentModel!
  destroyOneEquipmentModel(id: ID!): EquipmentModel!
  createOneFulfillment(input: FulfillmentWithItemsCreateOneInput!): Delivery!

  """Submits an SAP Post Goods Issue for a fulfillment."""
  postGoodsIssue(fulfillmentId: ID!): Delivery!

  """Blocks a fulfillment prevent progress or load events"""
  blockFulfillment(input: FulfillmentBlockInput!): Delivery!

  """Removes a blocks from a fulfillment."""
  removeFulfillmentBlock(input: FulfillmentUnblockInput!): Delivery!
  shortShipFulfillment(fulfillmentId: ID!): Delivery!
  completeFulfillment(fulfillmentId: ID!): Delivery!
  destroyOneFulfillment(id: ID!): Delivery!
  createOrUpdateManyFulfillments(input: FulfillmentCreateOrUpdateManyInputDto!): String!
  createOneFulfillmentBlock(input: CreateOneFulfillmentBlockInput!): FulfillmentBlock!
  updateOneFulfillmentBlock(input: UpdateOneFulfillmentBlockInput!): FulfillmentBlock!
  deleteOneFulfillmentBlock(input: DeleteOneFulfillmentBlockInput!): FulfillmentBlock!
  destroyOneFulfillmentBlock(id: ID!): FulfillmentBlock!
  inventoryReconciliationGenerate(init: Boolean, final: Boolean, warehouseId: ID!, licensePlates: [InventoryReconciliationGenerateDto!]!): String!
  createOneInvoice(input: InvoiceCreateOneInput!): Invoice!
  updateOneInvoice(input: InvoiceUpdateOneInput!): Invoice!
  deleteOneInvoice(input: DeleteOneEntityIDInput!): Invoice!
  destroyOneInvoice(id: ID!): Invoice!
  createOneInvoiceItem(input: InvoiceItemCreateOneInput!): InvoiceItem!
  updateOneInvoiceItem(input: InvoiceItemUpdateOneInput!): InvoiceItem!
  deleteOneInvoiceItem(input: DeleteOneEntityIDInput!): InvoiceItem!
  destroyOneInvoiceItem(id: ID!): InvoiceItem!
  createOneSupportTicket(title: String!, description: String!, senderName: String!, senderEmail: String!): String!
  declineOneSupportTicket(id: String!, description: String!): String!
  closeOneSupportTicket(id: ID!): String!
  createOneSharedLayout(input: LayoutSharedCreateInput!): Layout!
  updateOneSharedLayout(input: LayoutSharedUpdateInput!): Layout!
  deleteOneSharedLayout(input: LayoutDeleteInputType!): String!
  createOneUserLayout(input: LayoutUserCreateInput!): Layout!
  updateOneUserLayout(input: LayoutUserUpdateInput!): Layout!
  setUserDefaultLayout(input: LayoutUserSetDefaultInput!): Layout!
  deleteOneUserLayout(input: LayoutDeleteInputType!): String!
  destroyOneLayout(id: ID!): Layout!
  createManyLicensePlateLinkedTasks(
    """Dto wrapper"""
    linkedTaskCreate: [LicensePlateTaskCreateManyLinkedDto!]!
    linkTasks: Boolean = false
  ): [Task!]!
  createOneMap(input: MapCreateOneInput!): Map!
  destroyOnepermissionDimension(id: ID!): PermissionDimension!
  createOnePlanogram(input: PlanogramCreateOneInput!): Planogram!
  createOneReplenishment(input: ReplenishmentCreateOneInput!): Replenishment!
  updateOneReplenishment(input: ReplenishmentUpdateOneInput!): Replenishment!
  deleteOneReplenishment(input: DeleteOneEntityIDInput!): Replenishment!
  destroyOneReplenishment(id: ID!): Replenishment!
  updatePermissionsForRole(
    """Input wrapper"""
    input: UpdatePermissionsForRoleDto!
  ): String!
  destroyOnerolePermissionMapping(id: ID!): RolePermissionMapping!
  destroyOneScheduledJob(id: ID!): ScheduledJob!
  createOneScheduledJob(input: ScheduledJobCreateInputDto!): ScheduledJob!
  updateOneScheduledJob(input: UpdateScheduledJobInputDto!): ScheduledJob!
  deleteOneScheduledJob(input: UpdateScheduledJobByIdInputDto!): ScheduledJob!
  pauseOneScheduledJob(input: UpdateScheduledJobByIdInputDto!): ScheduledJob!
  resumeOneScheduledJob(input: UpdateScheduledJobByIdInputDto!): ScheduledJob!
  createOneSlottingDataset(input: SlottingDatasetCreateOneInput!): SlottingDataset!
  updateOneSlottingDataset(input: SlottingDatasetUpdateOneInput!): SlottingDataset!
  deleteOneSlottingDataset(input: DeleteOneEntityIDInput!): SlottingDataset!
  destroyOneSlottingDataset(id: ID!): SlottingDataset!

  """Create an SAP material movement."""
  createOneMaterialMovement(materialMovementDto: MaterialMovmentDtoCreateOneInput!): SapMaterialDocumentHeader!
  createOneSalesOrder(salesOrderData: SAPSalesOrderCreateOneInput!): SAPSalesOrder!
  createOneSlottingRuleset(input: SlottingRulesetCreateOneInput!): SlottingRuleset!
  createOrUpdateOneSlottingRulesetDraft(input: SlottingRulesetCreateOneInput!): SlottingRuleset!
  updateOneSlottingRulesetDraftToCompleteRuleset(input: SlottingRulesetUpdateOneInput!): SlottingRuleset!
  updateOneSlottingRuleset(input: SlottingRulesetUpdateOneInput!): SlottingRuleset!
  deleteOneSlottingRuleset(input: DeleteOneEntityIDInput!): SlottingRuleset!
  destroyOneSlottingRuleset(id: ID!): SlottingRuleset!
  createOneWarehouseRoleType(input: WarehouseRoleTypeCreateOneInput!): WarehouseRoleType!
  updateOneWarehouseRoleType(input: WarehouseRoleTypeUpdateOneInput!): WarehouseRoleType!
  deleteOneWarehouseRoleType(input: DeleteOneEntityIDInput!): WarehouseRoleType!
  destroyOneWarehouseRoleType(id: ID!): WarehouseRoleType!
  createOneZone(input: ZoneCreateOneInput!): Zone!
  updateOneZone(input: ZoneUpdateOneInput!): Zone!
  deleteOneZone(input: DeleteOneEntityIDInput!): Zone!
  destroyOneZone(id: ID!): Zone!
  createOneSlottingRun(input: SlottingRunCreateOneInput!): Boolean!
  deploySlottingRun(input: DeployRunInput!): String!
  createOneSlottingConfiguration(input: SlottingConfigurationCreateOneInput!): SlottingConfiguration!
  updateOneSlottingConfiguration(input: SlottingConfigurationUpdateOneInput!): SlottingConfiguration!
  deleteOneSlottingConfiguration(input: DeleteOneEntityIDInput!): SlottingConfiguration!
  destroyOneSlottingConfiguration(id: ID!): SlottingConfiguration!
  updateManyActiveSystemConnections(input: SystemConnectionUpdateActiveDto!): String!
  assignTaskGroup(
    """Entity ID"""
    taskGroupId: ID!

    """Entity ID"""
    assignUserId: ID

    """Entity ID"""
    assignTeamId: ID
  ): TaskGroup!
  startTaskGroup(
    """Dto wrapper"""
    input: TaskGroupStartDto!
  ): TaskGroup!
  dispatchTask(input: TaskDispatchDtoInput!): String!
  assignTask(
    """Dto wrapper"""
    input: TaskAssignDto!
  ): Task!
  startTask(
    """Dto wrapper"""
    input: TaskStartDto!
  ): Task!
  blockBinToBinTask(input: TaskBlockInputDto!): Task!
  blockPickTask(input: TaskBlockInputDto!): Task!
  createOnePhysicalInventoryTask(input: CreatePITaskInputDto!): Task!
  completeOnePhysicalInventoryTask(input: CompletePITaskInputDto!): Task!
  completeOnePhysicalInventoryApprovalTask(input: ApprovePITaskInputDto!): Task!
  createOnePhysicalInventoryTaskByBin(input: CreateBinPITaskInputDto!): Task!
  createManyPhysicalInventoryTaskByBin(input: TaskCreateManyBinPIInput!): String!
  startOnePhysicalInventoryTaskByBin(taskId: String!): String!
  completeOnePhysicalInventoryTaskByBin(input: CompleteBinPITaskInputDto!): CompleteBinPITaskResponseObject!
  completeManyPhysicalInventoryTaskByBin(input: CompleteManyBinPITaskInputDto!): [CompleteBinPITaskResponseObject!]!
  completeManyPhysicalInventoryApprovalTaskByBin(input: CompleteManyBinPIApprovalTaskInputDto!): String!
  createOneBinToBinMovementTask(input: CreateBinToBinTaskInputDto!): Task!
  completeOneBinToBinMovementTask(input: CompleteBinToBinTaskInputDto!): Task!
  createLicensePlateBinToBinSingleTask(input: LicensePlateBinToBinTaskMovementCreateInputDto!): Task!
  completeLicensePlateBinToBinSingleTask(input: TaskCompleteLicensePlateBinToBinMovement!): Task!
  createLicensePlateBinToBinTask(input: LicensePlateBinToBinTaskMovementCreateInputDto!): Task!
  createAndCompleteOneDispositionTask(input: CreateOneTaskDispositionInput!): Task!
  approveOneDisposition(input: DispositionApproveOneDto!): String!
  createOneIssueStockTask(input: IssueStockTaskCreateOneInput!): Task!
  completeOneIssueStockTask(
    """Complete IssueStock task"""
    completeOneIssueStockTask: TaskCompleteOneIssueStockInput!
  ): Task!
  removeStockFromInventory(
    """Dto wrapper"""
    licensePlatesToRemove: [StockRemoveDto!]!
  ): [Task!]!
  updateLicensePlateSyncJob(updateLicensePlateSyncJob: LicensePlateSyncJobUpdateOneDto!, id: ID!): String!
  updatePostTransferOrderJob(updatePostTransferOrderJob: PostTransferOrderJobUpdateOneDto!, id: ID!): String!
  updateJobStatus(status: JobStatus!, id: ID!): String!
  deleteJob(id: ID!): String!
  updateLPStockStatusByStockTypeHuUserStatus(
    """Dto wrapper"""
    input: [TaskLPStockStatusHuUserStatusUpdateDto!]!
  ): [Task!]!
  createOneTaskLicensePlateStockStatus(input: CreateOneTaskLicensePlateStockStatusInput!): Task!
  completeOneTaskLicensePlateStockStatus(input: TaskLicensePlateStockStatusCompleteOneDto!): Task!
  createAndCompleteOneFoundStockTask(input: FoundStockTaskCreateAndCompleteOneInput!): Task!
  createTasksForFulfillment(input: CreatePickTaskInputDto!): [Task!]!
  completeOnePickTask(input: CompletePickTaskInputDto!): Task!
  moveStockToLicensePlateTaskGroup(input: LicensePlateMovementCreateInputDto!): LicensePlate!
  completeLicensePlateMovementTaskTaskGroup(input: TaskCompleteLicensePlateMovementInputDto!): Task!
  moveStockToLicensePlate(input: LicensePlateMovementCreateInputDto!): LicensePlate!
  completeLicensePlateMovementTask(input: TaskCompleteLicensePlateMovementInputDto!): Task!
  createOneUnpackLicensePlateTask(input: TaskLicensePlateUnpackInputCreateDto!): Task!
  completeOneUnpackLicensePlateTask(input: TaskLicensePlateUnpackInputCompleteDto!): Task!
  completeManyLoadTasks(
    """Dto wrapper for complete Load tasks"""
    completeLoadTasks: [LoadTaskCompleteInput!]!

    """Entity's warehouse (foreign key)"""
    warehouseId: ID!
  ): [Task!]!
  createLoadTasksForFulfillment(fulfillmentId: ID!): [Task!]! @deprecated(reason: "Deprecated.  Awaiting refactor.")
  completeOneLoadMovementTask(
    """Complete Load task wrapper"""
    completeLoadTask: TaskCompleteOneLoadInput!
  ): Task! @deprecated(reason: "Deprecated. Please use completeManyLoadTasks mutation.")
  completeManyLoadMovementTask(
    """Dto wrapper for complete Load tasks"""
    completeLoadTasks: [TaskCompleteLoadInput!]
  ): [Task!]! @deprecated(reason: "Deprecated. Please use completeManyLoadTasks mutation.")
  createPickTasksForFulfillment(fulfillmentId: ID!): TaskCreatePickToStagingResourceDto!
  completeManyPickToStagingTasks(
    """Dto wrapper for pick to staging tasks"""
    completePickToStagingTasks: [CompletePickToStagingTaskInput!]!

    """Entity's warehouse (foreign key)"""
    warehouseId: String!
  ): [Task!]!
  createPickToStagingMovementTasks(
    """Create Pick To Staging task wrapper"""
    createManyPickToStagingTasks: [TaskCreateOnePickToStagingInput!]!
  ): [Task!]! @deprecated(reason: "Deprecated.  Please use createPickTasksForFulfillment mutation.")
  completeOnePickToStagingMovementTask(
    """Complete PickToStaging task wrapper"""
    completePickToStagingTask: TaskCompleteOnePickToStagingInput!
  ): Task! @deprecated(reason: "Deprecated.  Please use completeManyPickToStagingTasks mutation.")
  completeManyPickToStagingMovementTasks(
    """Dto wrapper for complete Load tasks"""
    completePickToStagingTasks: [TaskCompleteManyPickToStagingInput!]
  ): [Task!]! @deprecated(reason: "Deprecated.  Please use completeManyPickToStagingTasks mutation.")
  completeManyOneStepLoad(
    """Dto wrapper for complete Load tasks"""
    completePickToStagingTasks: [TaskCompleteManyPickToStagingInput!]
  ): [Task!]! @deprecated(reason: "Deprecated. Please use completeManyLoadTasks mutation.")
  completeManyPickToDockTasks(
    """Dto wrapper for pick to dock tasks"""
    completePickToDockTasks: [CompletePickToDockTaskInput!]!

    """Entity's warehouse (foreign key)"""
    warehouseId: String!
  ): [Task!]!
  adjustLicensePlateInventory(
    """Entity ID"""
    licensePlateId: String!

    """Entity's SAP storage location"""
    storageLocation: String
    inventory: [AdjustLpInventoryItemDto!]!

    """Entity ID"""
    warehouseId: String!
  ): Task!
  createOneSlottingExclusion(input: SlottingExclusionCreateOneInput!): SlottingExclusion!
  createManySlottingExclusion(input: [SlottingExclusionCreateInput!]!): [SlottingExclusion!]!
  updateOneSlottingExclusion(input: SlottingExclusionUpdateOneInput!): SlottingExclusion!
  deleteOneSlottingExclusion(input: DeleteOneEntityIDInput!): SlottingExclusion!
  destroyOneSlottingExclusion(id: ID!): SlottingExclusion!
  deleteManySlottingExlusions(input: [String!]!): SlottingExclusion!
  sysAdminCreateSapOutboundDeliveries(outboundDeliveryData: SysAdminOutboundDeliveryCreateDtoInput!): String!
}

input UpdateUsersForUserGroupMappingInput {
  userGroupMappings: [UpdateUsersForUserGroupDto!]!
}

input UpdateUsersForUserGroupDto {
  """Entity ID"""
  userId: ID!

  """Entity ID"""
  userGroupId: ID!

  """On or off"""
  status: UserGroupMappingStatus!
}

enum UserGroupMappingStatus {
  on
  off
}

input UpdateRolesForUserGroupDto {
  """List of role ids to add to user group"""
  roleIds: [String!]!

  """Entity ID"""
  userGroupId: ID!

  """Entity ID"""
  warehouseIds: [String!]!
}

input UserGroupCreateInputDto {
  """dto wrapper"""
  userGroup: UserGroupCreateInput!
}

input UserGroupCreateInput {
  """ApiDocs"""
  name: String!
}

input UserGroupUpdateInput {
  """Fields to update"""
  update: UserGroupUpdateDto!

  """Entity ID"""
  id: ID!
}

input UserGroupUpdateDto {
  """ApiDocs"""
  name: String!
}

input UserGroupDeleteOneDto {
  """Entity ID"""
  id: ID!
}

input RoleCreateInput {
  """ApiDocs"""
  role: RoleCreateDto!
}

input RoleCreateDto {
  """ApiDocs"""
  name: String!
}

input RoleDeleteInputType {
  """The id of the record to delete."""
  id: ID!
}

input WarehouseCreateOneInput {
  """The record to create"""
  warehouse: WarehouseCreateInput!
}

input WarehouseCreateInput {
  """Entity's company ID (foreign key)"""
  companyId: ID!

  """Entity code"""
  code: String!

  """Entity's human readable name"""
  name: String!

  """Configuration Model for the Warehouse"""
  type: ModelWarehouseType
  vertices: JSON
  indices: JSON
  points: JSON
}

input WarehouseUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: WarehouseUpdateInput!
}

input WarehouseUpdateInput {
  """Entity's company ID (foreign key)"""
  companyId: ID

  """Entity code"""
  code: String

  """Entity's human readable name"""
  name: String

  """Configuration Model for the Warehouse"""
  type: ModelWarehouseType
  vertices: JSON
  indices: JSON
  points: JSON
}

input DeleteOneEntityIDInput {
  """Entity ID"""
  id: ID!
}

input ContactInfoCreateOneInput {
  """The record to create"""
  contactInfo: CreateContactInfoDto!
}

input CreateContactInfoDto {
  """Phone number"""
  phone: String

  """Fax Number"""
  fax: String

  """Contact email address"""
  email: String

  """Street 1"""
  street1: String

  """Street 2"""
  street2: String

  """Town or City"""
  city: String

  """State"""
  state: String

  """Zip code"""
  zip: String

  """Country"""
  country: String
}

input ContactInfoUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: UpdateContactInfoDto!
}

input UpdateContactInfoDto {
  """Phone number"""
  phone: String

  """Fax Number"""
  fax: String

  """Contact email address"""
  email: String

  """Street 1"""
  street1: String

  """Street 2"""
  street2: String

  """Town or City"""
  city: String

  """State"""
  state: String

  """Zip code"""
  zip: String

  """Country"""
  country: String
}

input UpdateContactInfoInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContactInfoDto!
}

input OrganizationCreateOneInput {
  """The record to create"""
  organization: OrganizationCreateInput!
}

input OrganizationCreateInput {
  """ApiDocs"""
  name: String!

  """Description of entity"""
  description: String

  """Number of users allowed in an organization"""
  userLimit: Int
}

input OrganizationUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: OrganizationUpdateInput!
}

input OrganizationUpdateInput {
  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Number of users allowed in an organization"""
  userLimit: Int
}

input CompanyCreateOneInput {
  """The record to create"""
  company: CompanyCreateInput!
}

input CompanyCreateInput {
  """Entity code"""
  code: String!

  """Entity's organization ID (foreign key)"""
  organizationId: ID

  """ApiDocs"""
  name: String!

  """Enity's contact info"""
  contactInfoId: ID

  """Enity's display preferences"""
  displayPreferenceId: ID
}

input CompanyUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: CompanyUpdateInput!
}

input CompanyUpdateInput {
  """Entity code"""
  code: String

  """Entity's organization ID (foreign key)"""
  organizationId: ID

  """ApiDocs"""
  name: String

  """Enity's contact info"""
  contactInfoId: ID

  """Enity's display preferences"""
  displayPreferenceId: ID
}

input DisplayPreferenceCreateOneInput {
  """The record to create"""
  displayPreference: DisplayPreferenceCreateInput!
}

input DisplayPreferenceCreateInput {
  """Preferred number format, i.e. wcfp"""
  numberFormat: String

  """Preferred date and time format, i.e. MM/dd/yyyy HH:mm"""
  dateTimeFormat: String

  """Preferred timezone, i.e. America/Denver"""
  timezone: String

  """Preferred currency, i.e. USD"""
  currency: String

  """Preferred language, i.e. en"""
  language: String

  """Unit of measure system"""
  measurementSystem: StandardUOMSystem!
}

input DisplayPreferenceUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: DisplayPreferenceUpdateDto!
}

input DisplayPreferenceUpdateDto {
  """Preferred number format, i.e. wcfp"""
  numberFormat: String

  """Preferred date and time format, i.e. MM/dd/yyyy HH:mm"""
  dateTimeFormat: String

  """Preferred timezone, i.e. America/Denver"""
  timezone: String

  """Preferred currency, i.e. USD"""
  currency: String

  """Preferred language, i.e. en"""
  language: String

  """Unit of measure system"""
  measurementSystem: StandardUOMSystem
}

input DisplayPreferenceUpdateInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: DisplayPreferenceUpdateDto!
}

input UserWarehouseDefaultCreateOneInput {
  """The record to create"""
  userWarehouseDefault: UserWarehouseDefaultCreateInput!
}

input UserWarehouseDefaultCreateInput {
  """Entity's user ID (foreign key)"""
  userId: ID!

  """Entity's team ID (foreign key)"""
  warehouseId: ID!

  """Default entity"""
  default: Boolean
}

input UserWarehouseDefaultUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update DTO"""
  update: UserWarehouseDefaultUpdateInput!
}

input UserWarehouseDefaultUpdateInput {
  """Entity's user ID (foreign key)"""
  userId: ID

  """Entity's team ID (foreign key)"""
  warehouseId: ID

  """Default entity"""
  default: Boolean
}

input TeamCreateOneInput {
  """The record to create"""
  team: TeamCreateInput!
}

input TeamCreateInput {
  """ApiDocs"""
  name: String!

  """Description of entity"""
  description: String

  """Team's status"""
  status: TeamStatus

  """
  Team's Task Filter as an object in json format as GraphQL Query Requests expect.
  """
  taskFilter: JSON

  """Team's Task Filter as an array of filter objects"""
  taskFilterArray: JSON

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

input TeamUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: TeamUpdateInput!
}

input TeamUpdateInput {
  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Team's status"""
  status: TeamStatus

  """
  Team's Task Filter as an object in json format as GraphQL Query Requests expect.
  """
  taskFilter: JSON

  """Team's Task Filter as an array of filter objects"""
  taskFilterArray: JSON

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

input UserTeamMappingCreateOneInput {
  """The record to create"""
  userTeamMapping: UserTeamMappingCreateInput!
}

input UserTeamMappingCreateInput {
  """Entity's user ID (foreign key)"""
  userId: ID!

  """Entity's team ID (foreign key)"""
  teamId: ID!

  """Entity's team ID (foreign key)"""
  active: Boolean
}

input UserTeamMappingUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: UserTeamMappingUpdateInput!
}

input UserTeamMappingUpdateInput {
  """Entity's user ID (foreign key)"""
  userId: ID

  """Entity's team ID (foreign key)"""
  teamId: ID

  """Entity's team ID (foreign key)"""
  active: Boolean
}

input BarcodeCreateOneInput {
  """The record to create"""
  barcode: BarcodeCreateInput!
}

input BarcodeCreateInput {
  companyId: ID!
  businessPartnerId: ID
  configuration: String!
  scanData: String!
}

input BarcodeUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: BarcodeUpdateInput!
}

input BarcodeUpdateInput {
  companyId: ID
  businessPartnerId: ID
  configuration: String
  scanData: String
}

input DeleteOneBarcodeInput {
  """Entity ID"""
  id: ID!
}

input UserCreateOneInput {
  """The record to create"""
  user: UserCreateInput!
}

input UserCreateInput {
  """Person's first name"""
  firstName: String!

  """Person's last name"""
  lastName: String!

  """Email address"""
  email: String!

  """User's firebase auth Id"""
  firebaseAuthUid: String

  """User's account status"""
  status: UserStatus!

  """Phone number"""
  phone: String

  """
  If true entire mobileDetails object will be replaced on update otherwise update fields will merge with the object
  """
  refreshMobileDetails: Boolean = false
  mobileDetails: JSONObject
}

input UserUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: UserUpdateInput!
}

input UserUpdateInput {
  """Person's first name"""
  firstName: String

  """Person's last name"""
  lastName: String

  """User's firebase auth Id"""
  firebaseAuthUid: String

  """User's account status"""
  status: UserStatus

  """Phone number"""
  phone: String

  """
  If true entire mobileDetails object will be replaced on update otherwise update fields will merge with the object
  """
  refreshMobileDetails: Boolean = false
  mobileDetails: JSONObject
}

input NonCompliantBarcodeResolveInputType {
  resolveNonCompliantBarcodes: NonCompliantBarcodeResolveInput!
}

input NonCompliantBarcodeResolveInput {
  """list of ids to update"""
  ids: [ID!]!
}

input EwmCompleteWarehouseOrderTaskDto {
  warehouseTask: String!
  warehouse: String
  handlingUnit: String
  quantity: String
}

input CreateBarcodeEnrollmentInputDto {
  """barcode enrollment dto"""
  enrollment: CreateBarcodeEnrollmentInput!
}

input CreateBarcodeEnrollmentInput {
  """Entity ID"""
  businessPartnerId: ID

  """Barcode scanner type"""
  scanner: BarcodeScanner!

  """Data payload from a barcode scan"""
  payload: JSONObject!
}

input CompleteBarcodeEnrollmentInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: CompleteBarcodeEnrollmentDto!
}

input CompleteBarcodeEnrollmentDto {
  """Barcode entity ID"""
  barcodeId: ID!

  """Entity ID"""
  businessPartnerIds: [ID!]

  """Field assignment to application identifiers"""
  fields: [BarcodeField!]!
}

input BarcodeField {
  """Barcode mapping entity ID"""
  barcodeMappingId: ID

  """Barcode application identifier"""
  ai: String!

  """The entity relation for the application identifier"""
  entity: String!

  """The entity field relation for the application identifier"""
  entityField: String!
}

input AgentConfigurationHostInput {
  """Agent Hostname"""
  hostname: String!

  """Agent Port"""
  port: String!

  """Agent Path"""
  path: String = ""

  """Agent Access Policy"""
  accessPolicy: AgentConfigurationAccessPolicy!
}

input AgentConfigurationUpdate {
  """Agent Hosts"""
  hosts: [AgentConfigurationHostInput!]!

  """Agent Name"""
  agentName: String!
}

input AisleColumnCreateOneInput {
  """The record to create"""
  aisleColumn: AisleColumnCreateInput!
}

input AisleColumnCreateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Aisle within the warehouse."""
  aisleId: ID!

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """"""
  rotation: Float

  """"""
  facing: String

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON
}

input AisleColumnUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: AisleColumnUpdateInput!
}

input AisleColumnUpdateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Aisle within the warehouse."""
  aisleId: ID

  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """"""
  rotation: Float

  """"""
  facing: String

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON
}

input AisleCreateOneInput {
  """The record to create"""
  aisle: AisleCreateInput!
}

input AisleCreateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's area ID (foreign key)"""
  areaId: ID!

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """"""
  rotation: Float

  """"""
  facing: String

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON
}

input AisleUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: AisleUpdateInput!
}

input AisleUpdateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """"""
  rotation: Float

  """"""
  facing: String

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON
}

input AreaCreateOneInput {
  """The record to create"""
  area: AreaCreateInput!
}

input AreaCreateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Area's type, i.e. TEMP, PERM"""
  type: AreaType = perm

  """Area's status, i.e. ACTIVE, INACTIVE"""
  status: AreaStatus = active

  """Entity's SAP storage location plant ID (foreign key)"""
  sapStorageLocationPlantId: ID

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON

  """
  Entity's target temperature, null if entity is not temperature controlled
  """
  targetTemperature: Float

  """Entry point into the warehouse"""
  entryPoint: Boolean

  """Exit point out of the warehouse"""
  exitPoint: Boolean
}

input AreaUpdateOneInput {
  """Entity ID"""
  id: ID!

  """update dto"""
  update: AreaUpdateInput!
}

input AreaUpdateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Area's type, i.e. TEMP, PERM"""
  type: AreaType = perm

  """Area's status, i.e. ACTIVE, INACTIVE"""
  status: AreaStatus = active

  """Entity's SAP storage location plant ID (foreign key)"""
  sapStorageLocationPlantId: ID

  """"""
  depth: Float

  """"""
  width: Float

  """"""
  height: Float

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float
  polygon: JSON

  """
  Entity's target temperature, null if entity is not temperature controlled
  """
  targetTemperature: Float

  """Entry point into the warehouse"""
  entryPoint: Boolean

  """Exit point out of the warehouse"""
  exitPoint: Boolean
}

input BarcodeTemplateMappingCreateOneInput {
  """The record to create"""
  barcodeTemplateMapping: BarcodeTemplateMappingCreateInput!
}

input BarcodeTemplateMappingCreateInput {
  """barcode id"""
  barcodeId: ID!

  """barcode application identifier"""
  ai: String!

  """barcode field entity relationship"""
  entity: String!

  """entity field for barcode mapping"""
  entityField: String!

  """data title of barcode application identifier"""
  dataTitle: String!

  """data content of barcode application identifier"""
  dataContent: String!
}

input BarcodeTemplateMappingUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: BarcodeTemplateMappingUpdateInput!
}

input BarcodeTemplateMappingUpdateInput {
  """barcode id"""
  barcodeId: ID

  """barcode application identifier"""
  ai: String

  """barcode field entity relationship"""
  entity: String

  """entity field for barcode mapping"""
  entityField: String

  """data title of barcode application identifier"""
  dataTitle: String

  """data content of barcode application identifier"""
  dataContent: String
}

input BinCreateOneInput {
  """The record to create"""
  bin: BinCreateInput!
}

input BinCreateInput {
  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity's area ID (foreign key)"""
  aisleId: ID

  """Entity code"""
  code: String!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
  rotation: Float

  """Size and capacity information for a bin"""
  binSizeId: ID

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float

  """Column where the bin is located."""
  aisleColumnId: ID

  """Level where the bin is located."""
  level: Int
  pick_point: JSON
  putaway_point: JSON

  """If Bin is blocked from product being putaway"""
  putawayBlock: Boolean

  """If Bin is blocked from product being removed"""
  removalBlock: Boolean

  """Verification code from a barcode scan"""
  verificationCode: String

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime
}

input BinUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: BinUpdateInput!
}

input BinUpdateInput {
  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity's area ID (foreign key)"""
  aisleId: ID

  """Entity code"""
  code: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
  rotation: Float

  """Size and capacity information for a bin"""
  binSizeId: ID

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Z coordinate location"""
  z: Float

  """Column where the bin is located."""
  aisleColumnId: ID

  """Level where the bin is located."""
  level: Int
  pick_point: JSON
  putaway_point: JSON

  """If Bin is blocked from product being putaway"""
  putawayBlock: Boolean

  """If Bin is blocked from product being removed"""
  removalBlock: Boolean

  """Verification code from a barcode scan"""
  verificationCode: String

  """Timestamp of latest inventory count approval"""
  lastCount: DateTime
}

input BinEnrollment {
  """x coordinate location"""
  x: Float!

  """Y coordinate location"""
  y: Float!

  """Z coordinate location"""
  z: Float
}

input BinSizeCreateOneInput {
  """The record to create"""
  binSize: BinSizeCreateInput!
}

input BinSizeCreateInput {
  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Weight capacity of storage"""
  weightCapacity: Float!

  """Entity ID"""
  weightCapacityUomId: String!

  """Depth(X) value of storage capacity"""
  depth: Float!

  """Width(Y) value of storage capacity"""
  width: Float!

  """Height(Z) value of storage capacity"""
  height: Float!

  """Unit of measure for volume capacity of storage"""
  distanceUomId: String!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's warehouse (foreign key)"""
  volumeCapacityUomId: ID

  """Unit of measure for volume capacity of storage"""
  volumeCapacity: Float

  """Unit of measure for volume capacity of storage"""
  length: Float

  """Unit of measure for volume capacity of storage"""
  productLengthLimit: Float

  """Unit of measure for volume capacity of storage"""
  productHeightLimit: Float

  """Unit of measure for volume capacity of storage"""
  productWidthLimit: Float

  """Unit of measure glossary ID"""
  productLimitUomId: ID

  """Unit of measure glossary ID"""
  maximumProductUomId: ID
}

input BinSizeUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: BinSizeUpdateInput!
}

input BinSizeUpdateInput {
  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Weight capacity of storage"""
  weightCapacity: Float

  """Entity ID"""
  weightCapacityUomId: String

  """Depth(X) value of storage capacity"""
  depth: Float

  """Width(Y) value of storage capacity"""
  width: Float

  """Height(Z) value of storage capacity"""
  height: Float

  """Unit of measure for volume capacity of storage"""
  distanceUomId: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's warehouse (foreign key)"""
  volumeCapacityUomId: ID

  """Unit of measure for volume capacity of storage"""
  volumeCapacity: Float

  """Unit of measure for volume capacity of storage"""
  length: Float

  """Unit of measure for volume capacity of storage"""
  productLengthLimit: Float

  """Unit of measure for volume capacity of storage"""
  productHeightLimit: Float

  """Unit of measure for volume capacity of storage"""
  productWidthLimit: Float

  """Unit of measure glossary ID"""
  productLimitUomId: ID

  """Unit of measure glossary ID"""
  maximumProductUomId: ID
}

input BinSizeCopyDto {
  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Entity ID"""
  binSizeIdToCopy: ID!

  """Entity ID"""
  warehouseId: ID!
}

input UnitOfMeasureGlossaryUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: UnitOfMeasureGlossaryUpdateInput!
}

input UnitOfMeasureGlossaryUpdateInput {
  """Entity's label"""
  code: String

  """Entity's label"""
  internalCode: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Entity's company ID (foreign key)"""
  companyId: ID
  category: StandardUOMCategory
}

input VertexCreateOneInput {
  """The record to create"""
  vertex: VertexCreateType!
}

input VertexCreateType {
  """Entity's warehouse (foreign key)"""
  warehouseId: String!
  x: Float!
  y: Float!
  z: Float!
  type: VertexType!
}

input BinStatusMappingInputDto {
  """Bin Status mappings"""
  binStatusMappings: BinStatusMappingInput!
}

input BinStatusMappingInput {
  """Bin Ids for mapping assignment"""
  binIds: [ID!]!

  """Bin Status Input"""
  binStatus: [BinStatusInput!]!
}

input BinStatusInput {
  """Entity code"""
  binStatusCode: BinStatusCode!

  """Bin status detail's active flag"""
  on: Boolean!
}

input BusinessPartnerCreateOneInput {
  """The record to create"""
  businessPartner: BusinessPartnerCreateInput!
}

input BusinessPartnerCreateInput {
  """Entity code"""
  code: String!

  """Entity's human readable name"""
  name: String

  """"""
  type: String

  """Open text search term"""
  searchTerm1: String

  """Open text search term"""
  searchTerm2: String

  """SAP Customer Code"""
  customerCode: String

  """SAP Supplier code"""
  supplierCode: String

  """Validity start date"""
  validityStart: DateTime

  """Validity end date"""
  validityEnd: DateTime

  """Timezone"""
  addressTimezone: String

  """SAP address unique identifier"""
  addressUUID: String

  """Name of city"""
  cityName: String

  """Often used for county, prefecture, etc."""
  district: String

  """Region / State"""
  region: String

  """house number and street name"""
  streetAddress: String

  """Postal code"""
  postalCode: String

  """Country"""
  country: String

  """Language"""
  language: String

  """Phone number"""
  defaultPhoneNumber: String

  """Phone number"""
  phoneNumber: String

  """Email address"""
  email: String
}

input BusinessPartnerCreateManyInput {
  """Array of records to create"""
  businessPartners: [BusinessPartnerCreateInput!]!
}

input BusinessPartnerUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: BusinessPartnerUpdateInput!
}

input BusinessPartnerUpdateInput {
  """Entity code"""
  code: String

  """Entity's human readable name"""
  name: String

  """"""
  type: String

  """Open text search term"""
  searchTerm1: String

  """Open text search term"""
  searchTerm2: String

  """SAP Customer Code"""
  customerCode: String

  """SAP Supplier code"""
  supplierCode: String

  """Validity start date"""
  validityStart: DateTime

  """Validity end date"""
  validityEnd: DateTime

  """Timezone"""
  addressTimezone: String

  """SAP address unique identifier"""
  addressUUID: String

  """Name of city"""
  cityName: String

  """Often used for county, prefecture, etc."""
  district: String

  """Region / State"""
  region: String

  """house number and street name"""
  streetAddress: String

  """Postal code"""
  postalCode: String

  """Country"""
  country: String

  """Language"""
  language: String

  """Phone number"""
  defaultPhoneNumber: String

  """Phone number"""
  phoneNumber: String

  """Email address"""
  email: String
}

input ContractCreateOneInput {
  """The record to create"""
  contract: ContractCreateInput!
}

input ContractCreateInput {
  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Contract type template or contract"""
  type: ContractType!
}

input ContractUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: ContractUpdateInput!
}

input ContractUpdateInput {
  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Contract type template or contract"""
  type: ContractType
}

input ContractRuleCreateOneInput {
  """The record to create"""
  contractRule: ContractRuleCreateInput!
}

input ContractRuleCreateInput {
  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Fee type of the contract rule"""
  feeType: ContractRuleFeeType!

  """Frequency that the contract rule will be applied"""
  frequency: String!

  """Conditional data structure for a contract rule"""
  conditions: [ContractRuleConditionInput!]!

  """Cost of contract rule in USD"""
  value: Float!

  """Rate unit of measure for the contract rule value"""
  valueRateUom: String

  """Contract Id"""
  contractId: ID!
}

input ContractRuleUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: ContractRuleUpdateInput!
}

input ContractRuleUpdateInput {
  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Fee type of the contract rule"""
  feeType: ContractRuleFeeType

  """Frequency that the contract rule will be applied"""
  frequency: String

  """Conditional data structure for a contract rule"""
  conditions: [ContractRuleConditionInput!]

  """Cost of contract rule in USD"""
  value: Float

  """Rate unit of measure for the contract rule value"""
  valueRateUom: String

  """Contract Id"""
  contractId: ID
}

input LicensePlateCreateOneInput {
  """The record to create"""
  licensePlate: LicensePlateCreateInput!
}

input LicensePlateCreateInput {
  """License Plate erp code"""
  erpCode: String

  """License Plate Parent ID"""
  parentId: ID

  """Length of license plate"""
  length: Float

  """Width of license plate"""
  width: Float

  """Height of license plate"""
  height: Float

  """Unit of measure for dimensions of a license plate"""
  dimensionUOMId: String

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """Entity code"""
  code: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """
  Status determining if the license plate and its contents are successfully synced with the ERP ledger.
  """
  ledgerSyncStatus: LedgerSyncStatus

  """Reason ledger sync status is not successful."""
  ledgerSyncStatusReason: String

  """Entity's SAP storage location"""
  storageLocation: String

  """Status of the quantity of a product within license plate"""
  partial: String

  """Unit of measure ID"""
  licensePlateContentsUoMId: ID

  """
  Timestamp representing the moment in time a license plate entered a non-refridgerated space
  """
  freshnessClock: DateTime

  """Timestamp of latest movement"""
  lpLastMovement: DateTime
}

input LicensePlateUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: LicensePlateUpdateInput!
}

input LicensePlateUpdateInput {
  """License Plate erp code"""
  erpCode: String

  """License Plate Parent ID"""
  parentId: ID

  """Length of license plate"""
  length: Float

  """Width of license plate"""
  width: Float

  """Height of license plate"""
  height: Float

  """Unit of measure for dimensions of a license plate"""
  dimensionUOMId: String

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """Entity code"""
  code: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """
  Status determining if the license plate and its contents are successfully synced with the ERP ledger.
  """
  ledgerSyncStatus: LedgerSyncStatus

  """Reason ledger sync status is not successful."""
  ledgerSyncStatusReason: String

  """Entity's SAP storage location"""
  storageLocation: String

  """Status of the quantity of a product within license plate"""
  partial: String

  """Unit of measure ID"""
  licensePlateContentsUoMId: ID

  """
  Timestamp representing the moment in time a license plate entered a non-refridgerated space
  """
  freshnessClock: DateTime

  """Timestamp of latest movement"""
  lpLastMovement: DateTime
}

input LicensePlateUpdateManySLOCDto {
  licensePlateCode: String!
  sloc: String!
}

input LicensePlateStatusMappingInputDto {
  """License Plate Status mappings"""
  licensePlateStatusMappings: LicensePlateStatusMappingInput!
}

input LicensePlateStatusMappingInput {
  """License Plate Ids for mapping assignment"""
  licensePlateIds: [ID!]!

  """License Plate Status Input"""
  licensePlateStatus: [LicensePlateStatusInput!]!
}

input LicensePlateStatusInput {
  """Entity code"""
  licensePlateStatusCode: LicensePlateStatusCode!

  """License Plate status detail's active flag"""
  on: Boolean!
}

input CreateStockFromProductionTaskInputDto {
  """Dto Wrapper"""
  createStockFromProduction: TaskCreateStockFromProductionDto!
}

input TaskCreateStockFromProductionDto {
  """License Plate To Create"""
  licensePlate: LicensePlateCreateStockFromProductionDto

  """Entity code"""
  binCode: String!

  """Entity code"""
  warehouseCode: String!
  referenceDocument: String

  """Stock to create"""
  stock: [StockCreateStockFromProductionDto!]!
}

input LicensePlateCreateStockFromProductionDto {
  """License Plate erp code"""
  code: String!

  """Description of entity"""
  description: String

  """Length of license plate"""
  length: Float

  """Width of license plate"""
  width: Float

  """Height of license plate"""
  height: Float

  """Unit of measure for dimensions of a license plate"""
  dimensionUOMId: ID

  """Net weight of entity"""
  netWeight: Float

  """Gross weight of entity"""
  grossWeight: Float

  """Weight UOM, i.e KG"""
  weightUOMId: ID
}

input StockCreateStockFromProductionDto {
  """Entity code"""
  productCode: String!

  """Entity code"""
  lotCode: String

  """Entity code"""
  stockStatusCode: String

  """Quantity of product"""
  quantity: String!

  """Entity code"""
  unitOfMeasureCode: String!
}

input TaskCreateOneInput {
  """The record to create"""
  task: TaskCreateInput!
}

input TaskCreateInput {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID
}

input UpdateOneTaskInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: TaskUpdateInput!
}

input TaskUpdateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's team ID (foreign key)"""
  teamId: ID

  """Source bin ID (foreign key)"""
  sourceBinId: ID

  """Destination bin ID (foreign key)"""
  destinationBinId: ID

  """Entity's product ID (foreign key)"""
  productId: ID

  """Task type ID (foreign key)"""
  taskTypeId: ID

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Destination lot ID (foreign key)"""
  destinationLotId: ID

  """Source stock status type ID (foreign key)"""
  sourceStockStatusId: ID

  """Destination stock status type ID (foreign key)"""
  destinationStockStatusId: ID

  """Quantity of product"""
  quantity: String

  """Task status, i.e Not Started"""
  status: TaskStatus

  """Meta data stored on the entity in json format"""
  metaData: JSON

  """Autocomplete the task on creation"""
  autocomplete: Boolean

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Source License Plate Id"""
  sourceLicensePlateId: ID

  """Destination license plate ID"""
  destinationLicensePlateId: ID

  """Referring doc"""
  referringDoc: String

  """Reference item"""
  referringDocItem: String

  """Date the task is or was due"""
  dueDate: DateTime

  """Date the task was completed"""
  completionDate: DateTime

  """Entity's parent task ID"""
  parentTaskId: ID

  """License Plate Parent ID"""
  licensePlateParentId: ID

  """Unit of measure ID"""
  createdInUnitOfMeasureId: ID
  assignedUserId: ID
  assignedTeamId: ID

  """Deleted at date"""
  assignedAt: DateTime
  assignedByUserId: ID
  startedByUserId: ID

  """Date and time a task is started"""
  startedAt: DateTime

  """x coordinate location"""
  startedAtLocationX: Float

  """Y coordinate location"""
  startedAtLocationY: Float
  completedByUserId: ID

  """Date and time a task is completed"""
  completedAt: DateTime

  """x coordinate location"""
  completedAtLocationX: Float

  """Y coordinate location"""
  completedAtLocationY: Float
}

input TaskCancelManyDto {
  """Entity ID"""
  id: String!
}

input TaskTypeCreateOneInput {
  """The record to create"""
  taskType: TaskTypeCreateInput!
}

input TaskTypeCreateInput {
  """Entity's label"""
  label: String!

  """Entity code"""
  code: String!

  """Description of entity"""
  description: String
}

input TaskTypeUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: TaskTypeUpdateInput!
}

input TaskTypeUpdateInput {
  """Entity's label"""
  label: String

  """Entity code"""
  code: String

  """Description of entity"""
  description: String
}

input TaskTypeStockStatusMappingReplaceInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskTypeStockStatusMappingReplaceInput!
}

input TaskTypeStockStatusMappingReplaceInput {
  """Stock status mappings for the task type"""
  stockStatusMappings: [String!]

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

input StockStatusTypeCreateOneInput {
  """The record to create"""
  stockStatusType: StockStatusTypeCreate!
}

input StockStatusTypeCreate {
  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String!

  """Entity's SAP stock status type ID (foreign key)"""
  sapStockStatusTypeId: ID

  """Entity's SAP stock status type ID (foreign key)"""
  sapHuUserStatusId: ID

  """Determines if stock status type is in use"""
  stockStatusTypeStatus: StockStatusTypeStatus
}

input StockStatusTypeDeleteOneInput {
  """Entity ID"""
  id: ID!
}

input CopyStockStatusTypeInputDto {
  """The record to create"""
  copyStockStatus: StockStatusTypeCopy!
}

input StockStatusTypeCopy {
  """Entity ID"""
  id: ID!

  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String!

  """Entity's SAP stock status type ID (foreign key)"""
  sapStockStatusTypeId: ID

  """Determines if stock status type is in use"""
  stockStatusTypeStatus: StockStatusTypeStatus

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

input UpdateStockStatusTypeInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: StockStatusTypeUpdate!
}

input StockStatusTypeUpdate {
  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Determines if stock status type is in use"""
  stockStatusTypeStatus: StockStatusTypeStatus

  """Update dto for stock status mapping"""
  mapping: StockStatusTypeUpdateMappingDto
}

input StockStatusTypeUpdateMappingDto {
  """Entity ID"""
  id: ID!

  """Update dto for stock status mapping"""
  update: StockStatusTypeUpdateMappingUpdateDto!
}

input StockStatusTypeUpdateMappingUpdateDto {
  """
  Stock status used when converting ERP stock status to Fulfilld stock status
  """
  default: Boolean

  """Entity's SAP stock status type ID (foreign key)"""
  sapStockStatusTypeId: ID

  """Entity's SAP stock status type ID (foreign key)"""
  sapHuUserStatusId: ID
}

input StockStatusMappingCreateOneInput {
  """The record to create"""
  stockStatusMapping: StockStatusMappingCreateInput!
}

input StockStatusMappingCreateInput {
  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID!

  """Entity's SAP stock status type ID (foreign key)"""
  sapStockStatusTypeId: ID!

  """Entity ID"""
  sapHuUserStatusId: ID

  """
  Stock status used when converting ERP stock status to Fulfilld stock status
  """
  default: Boolean

  """Entity ID"""
  warehouseId: String!
}

input SapHuUserStatusCreateOneInput {
  """The record to create"""
  sapHuUserStatus: SapHuUserStatusCreateInput!
}

input SapHuUserStatusCreateInput {
  """System connection ID"""
  systemConnectionId: ID!
}

input SapHuUserStatusUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: SapHuUserStatusUpdateInput!
}

input SapHuUserStatusUpdateInput {
  """System connection ID"""
  systemConnectionId: ID
}

input SapDeliveryDocumentTypeCreateOneInput {
  """The record to create"""
  sapDeliveryDocumentType: SapDeliveryDocumentTypeCreateInput!
}

input SapDeliveryDocumentTypeCreateInput {
  """System connection ID"""
  systemConnectionId: ID!

  """Delivery type"""
  deliveryType: String!

  """Delivery Document Type"""
  documentType: String!
}

input SapDeliveryDocumentTypeUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: SapDeliveryDocumentTypeUpdateInput!
}

input SapDeliveryDocumentTypeUpdateInput {
  """System connection ID"""
  systemConnectionId: ID

  """Delivery type"""
  deliveryType: String

  """Delivery Document Type"""
  documentType: String
}

input WarehousePreferredUnitOfMeasureCreateOneInput {
  """The record to create"""
  warehousePreferredUnitOfMeasure: WarehousePreferredUnitOfMeasureCreateInput!
}

input WarehousePreferredUnitOfMeasureCreateInput {
  """Unit of measure ID"""
  unitOfMeasureId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's product ID (foreign key)"""
  productId: ID!
}

input WarehousePreferredUnitOfMeasureUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: WarehousePreferredUnitOfMeasureUpdateInput!
}

input WarehousePreferredUnitOfMeasureUpdateInput {
  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's product ID (foreign key)"""
  productId: ID
}

input TaskTypeBinStatusReplaceInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskTypeBinStatusMappingReplaceInput!
}

input TaskTypeBinStatusMappingReplaceInput {
  """Bin status mappings for the task type"""
  binStatusMappings: [String!]

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

input TaskGroupCreateOneInput {
  """The record to create"""
  taskGroup: TaskGroupCreateInput!
}

input TaskGroupCreateInput {
  """Task status, i.e Not Started"""
  status: TaskStatus!

  """Entity ID"""
  taskTypeId: ID!

  """Entity ID"""
  teamId: ID!

  """Entity ID"""
  userId: ID!

  """Entity ID"""
  warehouseId: ID!
}

input TaskGroupUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: TaskGroupUpdateInput!
}

input TaskGroupUpdateInput {
  """Task status, i.e Not Started"""
  status: TaskStatus

  """Entity ID"""
  taskTypeId: ID

  """Entity ID"""
  teamId: ID

  """Entity ID"""
  userId: ID

  """Entity ID"""
  warehouseId: ID
}

input LotCreateOneInput {
  """The record to create"""
  lot: LotCreateInput!
}

input LotCreateInput {
  """Entity code"""
  code: String!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Product number in erp"""
  productNumber: String

  """Boolean indicating if lot product is in restricted stock status"""
  warehouseStatus: Boolean

  """When data was created in ERP"""
  erpCreatedOn: DateTime

  """When data was last updated in ERP"""
  erpUpdatedOn: DateTime

  """Lot production date"""
  productionDate: DateTime

  """Lot expiration date"""
  expiration: DateTime

  """Lot supplier number"""
  supplierLotNumber: String

  """Erp sync status"""
  erpSynced: Boolean

  """Lot Restricted"""
  restricted: Boolean
}

input LotUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: LotUpdateInput!
}

input LotUpdateInput {
  """Entity code"""
  code: String

  """Entity's product ID (foreign key)"""
  productId: ID

  """Product number in erp"""
  productNumber: String

  """Boolean indicating if lot product is in restricted stock status"""
  warehouseStatus: Boolean

  """When data was created in ERP"""
  erpCreatedOn: DateTime

  """When data was last updated in ERP"""
  erpUpdatedOn: DateTime

  """Lot production date"""
  productionDate: DateTime

  """Lot expiration date"""
  expiration: DateTime

  """Lot supplier number"""
  supplierLotNumber: String

  """Erp sync status"""
  erpSynced: Boolean

  """Lot Restricted"""
  restricted: Boolean
}

input LotCreateOrUpdateManyInput {
  """Array of records to create"""
  lots: [LotCreateInput!]!
}

input ProductCreateOneInput {
  """The record to create"""
  product: ProductCreateInput!
}

input ProductCreateInput {
  """Entity code"""
  code: String!

  """Name of product"""
  name: String

  """Entity's company ID (foreign key)"""
  companyId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Type of product"""
  type: String

  """Description of entity"""
  description: String

  """Whether the product is lot managed or not"""
  lotManaged: Boolean

  """Status of product"""
  status: ProductAvailability

  """Net weight of entity"""
  netWeight: Float

  """Entity's total weight in the unit of measure"""
  totalWeightUOMId: String

  """Gross weight of entity"""
  grossWeight: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Volume of entity"""
  volume: Float

  """When data was created in ERP"""
  erpCreatedAt: DateTime

  """When data was last updated in ERP"""
  erpUpdatedAt: DateTime

  """Product GTIN"""
  gtin: String

  """Business partner ID"""
  businessPartnerId: ID!
  active: Boolean = false
}

input ProductUomCreateOrUpdateOneInput {
  """The record to create"""
  productUoms: ProductUomCreateOrUpdateInput!

  """Entity ID"""
  warehouseId: ID!
}

input ProductUomCreateOrUpdateInput {
  """Entity code"""
  code: String!

  """Name of product"""
  name: String

  """Entity's company ID (foreign key)"""
  companyId: ID!

  """Type of product"""
  type: String

  """Description of entity"""
  description: String

  """Whether the product is lot managed or not"""
  lotManaged: Boolean

  """Status of product"""
  status: ProductAvailability

  """Net weight of entity"""
  netWeight: Float

  """Entity's total weight in the unit of measure"""
  totalWeightUOMId: String

  """Gross weight of entity"""
  grossWeight: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Volume of entity"""
  volume: Float

  """When data was created in ERP"""
  erpCreatedAt: DateTime

  """When data was last updated in ERP"""
  erpUpdatedAt: DateTime

  """Product GTIN"""
  gtin: String

  """Business partner ID"""
  businessPartnerId: ID!
  active: Boolean = false

  """Product unit of measure conversions"""
  unitOfMeasureConversions: [UnitOfMeasureProductConversionCreateForProductDto!]!
}

input UnitOfMeasureProductConversionCreateForProductDto {
  """Entity code"""
  code: String!

  """
  Conversion factor to convert units of measure -> Multiply against base UOM
  """
  conversionFactor: Float!

  """Gross weight of entity"""
  grossWeight: Float

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Product's length"""
  length: Float

  """Product's width"""
  width: Float

  """Product's Height"""
  height: Float

  """Unit of measure for product dimensions"""
  dimensionsUOMId: String

  """Boolean for base unit of measure if true UOM is base"""
  isBaseUom: Boolean!
}

input ProductUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: ProductUpdateInput!
}

input ProductUpdateInput {
  """Entity code"""
  code: String

  """Name of product"""
  name: String

  """Entity's company ID (foreign key)"""
  companyId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Type of product"""
  type: String

  """Description of entity"""
  description: String

  """Whether the product is lot managed or not"""
  lotManaged: Boolean

  """Status of product"""
  status: ProductAvailability

  """Net weight of entity"""
  netWeight: Float

  """Entity's total weight in the unit of measure"""
  totalWeightUOMId: String

  """Gross weight of entity"""
  grossWeight: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Volume of entity"""
  volume: Float

  """When data was created in ERP"""
  erpCreatedAt: DateTime

  """When data was last updated in ERP"""
  erpUpdatedAt: DateTime

  """Product GTIN"""
  gtin: String

  """Business partner ID"""
  businessPartnerId: ID
  active: Boolean = false
}

input ProductUomCreateOrUpdateManyInput {
  """Array of records to create"""
  productsUoms: [ProductUomCreateOrUpdateInput!]!

  """Entity ID"""
  warehouseId: ID!
}

input InternalStockOrderCreateForLpInput {
  """The record to create"""
  internalStockOrder: InternalStockOrderCreateForLpDto!
}

input InternalStockOrderCreateForLpDto {
  """Entity ID"""
  internalStockOrderTypeId: ID
  referenceDocument: String

  """Entity code"""
  internalStockOrderTypeCode: String

  """License plate ids for stock order"""
  licensePlateIds: [String!]!
}

input InternalStockOrderCreateForFulfillmentInput {
  """The record to create"""
  internalStockOrder: InternalStockOrderCreateForFulfillmentDto!
}

input InternalStockOrderCreateForFulfillmentDto {
  """Entity ID"""
  internalStockOrderTypeId: ID!

  """Fulfillment items for stock order"""
  fulfillmentItems: [FulfillmentItemsForInternalStockOrder!]!
}

input FulfillmentItemsForInternalStockOrder {
  """Entity ID"""
  fulfillmentItemId: ID!

  """Entity ID"""
  licensePlateId: ID!
}

input FulfillmentItemLicensePlateAssignDto {
  """Entity ID"""
  fulfillmentItemId: ID!
  assign: [LicensePlateForFulfillmentItemDto!]
  unassign: [LicensePlateForFulfillmentItemDto!]
}

input LicensePlateForFulfillmentItemDto {
  """Entity ID"""
  licensePlateId: ID!
}

input DeliveryCreateOneInput {
  """The record to create"""
  delivery: DeliveryCreateInput!
}

input DeliveryCreateInput {
  """Bill of Lading"""
  billOfLading: String

  """Date created in ERP"""
  erpCreated: DateTime

  """Reason blocked in ERP"""
  erpBlockingReason: String

  """Expected delivery date"""
  dueDate: DateTime

  """Erp Delivery Code"""
  erpCode: String

  """Total gross weight"""
  totalGrossWeight: Float

  """Total net weight"""
  totalNetWeight: Float

  """Total gross weight unit of measure"""
  totalWeightUOMId: ID

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Reference document"""
  erpSalesOrder: String

  """Goods receipt or goods issue status"""
  goodsReceiptOrIssueStatus: DeliveryCompletionStatus

  """Picking or putaway status"""
  pickOrPutawayStatus: DeliveryCompletionStatus

  """Load/unload status"""
  loadOrUnloadStatus: DeliveryCompletionStatus

  """Overall status for the delivery or fulfillment"""
  deliveryStatus: DeliveryCompletionStatus

  """Date when all items became 100% available"""
  shipReadyDate: DateTime

  """Date delivery has been promised"""
  promiseDate: DateTime

  """Person to contact to learn more about delivery"""
  pointOfContact: String

  """Supplier"""
  supplier: String

  """Supplier Business Partner unique Id"""
  supplierBusinessPartnerId: ID

  """Ship to Business Partner unique Id"""
  shipToBusinessPartnerId: ID

  """Supplier name"""
  supplierName: String

  """ERP delivery block"""
  blockStatus: String

  """Volume"""
  totalVolume: Float

  """Volume unit of measure"""
  totalVolumeUOMId: ID

  """Export"""
  export: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Ship to party"""
  shipTo: String

  """Ship to party name"""
  shipToName: String

  """Sold to party"""
  soldTo: String

  """Sold to party name"""
  soldToName: String

  """Sold to Business Partner unique id"""
  soldToBusinessPartnerId: ID

  """Fulfilment Block ID"""
  fulfillmentBlockId: ID

  """Entity's door ID (foreign key)"""
  doorId: ID

  """Delivery Document Type"""
  deliveryDocumentType: String
}

input UpdateOneDeliveryInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: DeliveryUpdateInput!
}

input DeliveryUpdateInput {
  """Bill of Lading"""
  billOfLading: String

  """Date created in ERP"""
  erpCreated: DateTime

  """Reason blocked in ERP"""
  erpBlockingReason: String

  """Expected delivery date"""
  dueDate: DateTime

  """Erp Delivery Code"""
  erpCode: String

  """Total gross weight"""
  totalGrossWeight: Float

  """Total net weight"""
  totalNetWeight: Float

  """Total gross weight unit of measure"""
  totalWeightUOMId: ID

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Reference document"""
  erpSalesOrder: String

  """Goods receipt or goods issue status"""
  goodsReceiptOrIssueStatus: DeliveryCompletionStatus

  """Picking or putaway status"""
  pickOrPutawayStatus: DeliveryCompletionStatus

  """Load/unload status"""
  loadOrUnloadStatus: DeliveryCompletionStatus

  """Overall status for the delivery or fulfillment"""
  deliveryStatus: DeliveryCompletionStatus

  """Date when all items became 100% available"""
  shipReadyDate: DateTime

  """Date delivery has been promised"""
  promiseDate: DateTime

  """Person to contact to learn more about delivery"""
  pointOfContact: String

  """Supplier"""
  supplier: String

  """Supplier Business Partner unique Id"""
  supplierBusinessPartnerId: ID

  """Ship to Business Partner unique Id"""
  shipToBusinessPartnerId: ID

  """Supplier name"""
  supplierName: String

  """ERP delivery block"""
  blockStatus: String

  """Volume"""
  totalVolume: Float

  """Volume unit of measure"""
  totalVolumeUOMId: ID

  """Export"""
  export: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Ship to party"""
  shipTo: String

  """Ship to party name"""
  shipToName: String

  """Sold to party"""
  soldTo: String

  """Sold to party name"""
  soldToName: String

  """Sold to Business Partner unique id"""
  soldToBusinessPartnerId: ID

  """Fulfilment Block ID"""
  fulfillmentBlockId: ID

  """Entity's door ID (foreign key)"""
  doorId: ID

  """Delivery Document Type"""
  deliveryDocumentType: String
}

input FulfillmentItemCreateOneInput {
  """The record to create"""
  fulfillmentItem: FulfillmentItemCreateInput!
}

input FulfillmentItemCreateInput {
  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Unit of measure for entity"""
  fulfillmentQuantityUom: String

  """Unit of measure ID"""
  unitOfMeasureId: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Delivery Document"""
  fulfillmentCode: String

  """Description of entity"""
  description: String

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String!

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Entity's product ID (foreign key)"""
  productId: ID

  """Customer material"""
  customerProductCode: String

  """Quantity of product"""
  fulfillmentQuantity: String

  """Date the material is available"""
  dateMaterialAvailable: DateTime

  """Reference document"""
  erpSalesOrder: String

  """Reference item"""
  erpSalesOrderItem: String

  """Pick status"""
  pickStatus: DeliveryCompletionStatus

  """Goods receipt or goods issue status"""
  issueStatus: DeliveryCompletionStatus

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity's SAP storage location"""
  storageLocation: String
}

input FulfillmentItemUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: FulfillmentItemUpdateInput!
}

input FulfillmentItemUpdateInput {
  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Unit of measure for entity"""
  fulfillmentQuantityUom: String

  """Unit of measure ID"""
  unitOfMeasureId: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Delivery Document"""
  fulfillmentCode: String

  """Description of entity"""
  description: String

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: String

  """Weight UOM, i.e KG"""
  weightUOMId: String

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Entity's product ID (foreign key)"""
  productId: ID

  """Customer material"""
  customerProductCode: String

  """Quantity of product"""
  fulfillmentQuantity: String

  """Date the material is available"""
  dateMaterialAvailable: DateTime

  """Reference document"""
  erpSalesOrder: String

  """Reference item"""
  erpSalesOrderItem: String

  """Pick status"""
  pickStatus: DeliveryCompletionStatus

  """Goods receipt or goods issue status"""
  issueStatus: DeliveryCompletionStatus

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID

  """Entity's SAP storage location"""
  storageLocation: String
}

input SapBinFFAreaCreateOneInput {
  """The record to create"""
  sapBinFFArea: SapBinFFAreaCreateInput!
}

input SapBinFFAreaCreateInput {
  """Entity's area ID (foreign key)"""
  areaId: ID!

  """Sap bin code"""
  sapBinCode: String!

  """Sap storage type code"""
  sapStorageTypeCode: String!

  """System connection ID"""
  systemConnectionId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

input SapBinFFAreaUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: SapBinFFAreaUpdateInput!
}

input SapBinFFAreaUpdateInput {
  """Entity's area ID (foreign key)"""
  areaId: ID

  """Sap bin code"""
  sapBinCode: String

  """Sap storage type code"""
  sapStorageTypeCode: String

  """System connection ID"""
  systemConnectionId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

input IntegrationLogCreateOneInput {
  """The record to create"""
  integrationLog: IntegrationLogCreateInput!
}

input IntegrationLogCreateInput {
  """Operation start date/time"""
  operationStart: DateTime

  """Operation complete date/time"""
  operationComplete: DateTime

  """Fulfilld error code"""
  errorCode: ErrorCodes

  """Error message"""
  errorMessage: String

  """Raw errors (as json)"""
  rawErrors: JSONObject

  """Entity ID"""
  entityId: ID

  """Entity's human readable name"""
  entityName: String

  """Entity code"""
  entityLabel: String

  """Total number of rows"""
  totalNumRows: Int

  """Number of rows complete"""
  numRowsComplete: Int

  """number of rows failed"""
  numRowsFailed: Int

  """Processing status"""
  processingStatus: ProcessingStatus

  """Processing operation"""
  processingOperation: ProcessingOperation

  """Entity ID"""
  jobId: ID

  """Entity's user ID (foreign key)"""
  userId: ID

  """Entity's user ID (foreign key)"""
  warehouseId: ID
}

input IntegrationLogUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Integration Log Update Data"""
  update: IntegrationLogUpdateInput!
}

input IntegrationLogUpdateInput {
  """Operation start date/time"""
  operationStart: DateTime

  """Operation complete date/time"""
  operationComplete: DateTime

  """Fulfilld error code"""
  errorCode: ErrorCodes

  """Error message"""
  errorMessage: String

  """Raw errors (as json)"""
  rawErrors: JSONObject

  """Entity ID"""
  entityId: ID

  """Entity's human readable name"""
  entityName: String

  """Entity code"""
  entityLabel: String

  """Total number of rows"""
  totalNumRows: Int

  """Number of rows complete"""
  numRowsComplete: Int

  """number of rows failed"""
  numRowsFailed: Int

  """Processing status"""
  processingStatus: ProcessingStatus

  """Processing operation"""
  processingOperation: ProcessingOperation

  """Entity ID"""
  jobId: ID

  """Entity's user ID (foreign key)"""
  userId: ID

  """Entity's user ID (foreign key)"""
  warehouseId: ID
}

input WarehousePathCreateOneInput {
  """The record to create"""
  warehousePath: WarehousePathCreateInput!
}

input WarehousePathCreateInput {
  """Entity ID"""
  internalStockOrderTypeId: ID!

  """Entity ID"""
  sourceAreaId: ID!

  """Entity ID"""
  destinationAreaId: ID!

  """Entity ID"""
  warehouseId: ID!
}

input WarehousePathUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: WarehousePathUpdateInput!
}

input WarehousePathUpdateInput {
  """Entity ID"""
  internalStockOrderTypeId: ID

  """Entity ID"""
  sourceAreaId: ID

  """Entity ID"""
  destinationAreaId: ID
}

input CancelManyDeliveryItemsDto {
  """Entity ID"""
  deliveryItemId: ID!
}

input DeliveryItemCreateOneInput {
  """The record to create"""
  deliveryItem: DeliveryItemCreateInput!
}

input DeliveryItemCreateInput {
  """Actual recieved quantity"""
  actualRecievedQuantity: String

  """Unit of measure"""
  uom: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Supplier Lot"""
  supplierLot: String

  """ERP Created"""
  erpCreated: DateTime

  """Delivery code"""
  deliveryCode: String!

  """Description of entity"""
  description: String

  """Delivery item"""
  deliveryItem: String!

  """Delivery ID (foreign key)"""
  deliveryId: ID!

  """Receipt status"""
  receiptStatus: DeliveryCompletionStatus

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUomId: String

  """Weight UOM, i.e KG"""
  weightUomId: String

  """When data was last updated in ERP"""
  erpLastChanged: String

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Purchase order"""
  erpPurchaseOrder: String

  """Purchase order item"""
  erpPurchaseOrderItem: String

  """Quantity"""
  quantity: String

  """Putaway status"""
  putawayStatus: DeliveryCompletionStatus
}

input DeliveryItemUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: DeliveryItemUpdateInput!
}

input DeliveryItemUpdateInput {
  """Actual recieved quantity"""
  actualRecievedQuantity: String

  """Unit of measure"""
  uom: String

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Supplier Lot"""
  supplierLot: String

  """ERP Created"""
  erpCreated: DateTime

  """Delivery code"""
  deliveryCode: String

  """Description of entity"""
  description: String

  """Delivery item"""
  deliveryItem: String

  """Delivery ID (foreign key)"""
  deliveryId: ID

  """Receipt status"""
  receiptStatus: DeliveryCompletionStatus

  """Gross weight of entity"""
  grossWeight: Float

  """Net weight of entity"""
  netWeight: Float

  """Volume of entity"""
  volume: Float

  """Volume in unit of measure for entity"""
  volumeUomId: String

  """Weight UOM, i.e KG"""
  weightUomId: String

  """When data was last updated in ERP"""
  erpLastChanged: String

  """Entity's product ID (foreign key)"""
  productId: ID

  """Purchase order"""
  erpPurchaseOrder: String

  """Purchase order item"""
  erpPurchaseOrderItem: String

  """Quantity"""
  quantity: String

  """Putaway status"""
  putawayStatus: DeliveryCompletionStatus
}

enum DataGenerationType {
  demo
  testing
  random
}

input ScopedData {
  productCode: String!
  binCode: String!
}

input DoorCreateOneInput {
  """The record to create"""
  door: DoorCreateInput!
}

input DoorCreateInput {
  """Door direction.  inbound outbound or both."""
  direction: doorDirection!

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Entity code"""
  code: String

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's bin ID (foreign key)"""
  binId: ID
}

input DoorUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: DoorUpdateInput!
}

input DoorUpdateInput {
  """Door direction.  inbound outbound or both."""
  direction: doorDirection

  """x coordinate location"""
  x: Float

  """Y coordinate location"""
  y: Float

  """Entity code"""
  code: String

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's bin ID (foreign key)"""
  binId: ID
}

input TaskCompleteOneUnloadInput {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Destination bin ID"""
  destinationBinId: ID!

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Quantity of product"""
  quantity: String

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID
}

input TaskCompleteOneOfManyUnloadInput {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Quantity of product"""
  quantity: String

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID
}

input TaskCompleteUnloadInput {
  """Entity's task ID (foreign key)"""
  taskId: ID

  """Entity's task ID (foreign key)"""
  licensePlateId: ID!
}

input DeliveryProcessReturnDto {
  """Entity ID"""
  warehouseId: ID!

  """Return item"""
  returnItems: [DeliveryReturnItemDto!]!

  """Unknown return item"""
  unknownReturnItems: [UnknownDeliveryReturnItemDto!]
}

input DeliveryReturnItemDto {
  """Entity ID"""
  licensePlateId: ID
}

input UnknownDeliveryReturnItemDto {
  """Entity ID"""
  licensePlateCode: String!
}

input CompletePutawayTaskInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskCompletePutawayInput!
}

input TaskCompletePutawayInput {
  """Destination bin ID (foreign key)"""
  destinationBinId: ID!

  """Quantity of product"""
  quantity: String

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID
}

input CancelPutawayTaskInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskCancelPutawayInput!
}

input TaskCancelPutawayInput {
  """Delivery ID (foreign key)"""
  id: ID!
}

input CreatePutawayTaskInputDto {
  """The record to create"""
  delivery: TaskCreatePutawayInput!
}

input TaskCreatePutawayInput {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Delivery ID (foreign key)"""
  id: ID!
  looseProducts: [TaskLooseProductsInput!]
}

input TaskLooseProductsInput {
  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's bin ID (foreign key)"""
  binId: ID!

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity's stock status type ID (foreign key)"""
  stockStatusTypeId: ID!

  """Unit of measure ID"""
  createdInUnitOfMeasureId: ID!

  """Quantity of product"""
  quantity: String!
}

input TaskCompleteManyLicensePlatePutawayInput {
  """Entity ID"""
  licensePlateId: ID!
}

input WarehouseConfigurationCreateOneInput {
  """The record to create"""
  warehouseConfiguration: WarehouseConfigurationCreateInput!
}

input WarehouseConfigurationCreateInput {
  configuration: WHConfigurationInput!
  warehouseId: ID!
}

input WarehouseConfigurationUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: WarehouseConfigurationUpdateInput!
}

input WarehouseConfigurationUpdateInput {
  configuration: WHConfigurationInput
  warehouseId: ID
}

input UpdateOneDispositionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: DispositionUpdateOneDto!
}

input DispositionUpdateOneDto {
  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Notes for a submitted disposition"""
  notes: String

  """ID of stored image"""
  images: [DispositionImages!]
}

input DispositionImages {
  """ID of stored image"""
  imageId: ID!
}

input EdgeCreateOneInput {
  """The record to create"""
  edge: EdgeCreateType!
}

input EdgeCreateType {
  """Entity's warehouse (foreign key)"""
  warehouseId: String!
  start_vertex_id: String!
  end_vertex_id: String!
  bidirectional: Boolean!
}

input EffectiveContractMappingCreateOneInput {
  """The record to create"""
  effectiveContractMapping: EffectiveContractMappingCreateInput!
}

input EffectiveContractMappingCreateInput {
  """Contract Id"""
  contractId: ID!

  """Business partner ID"""
  businessPartnerId: ID!

  """Effective date of contract"""
  effectiveDate: DateTime!

  """Effective contract mapping status"""
  status: String!
}

input EffectiveContractMappingUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: EffectiveContractMappingUpdateInput!
}

input EffectiveContractMappingUpdateInput {
  """Contract Id"""
  contractId: ID

  """Business partner ID"""
  businessPartnerId: ID

  """Effective date of contract"""
  effectiveDate: DateTime

  """Effective contract mapping status"""
  status: String
}

input EquipmentCreateOneInput {
  """The record to create"""
  equipmentItem: EquipmentCreateType!
}

input EquipmentCreateType {
  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Entity's label"""
  status: EquipmentStatus

  """Identifier for Redpoint Tracking Tag."""
  tagId: String

  """Entity's label"""
  equipmentModelId: ID!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

input EquipmentUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: EquipmentUpdateInput!
}

input EquipmentUpdateInput {
  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Entity's label"""
  status: EquipmentStatus

  """Identifier for Redpoint Tracking Tag."""
  tagId: String

  """Entity's label"""
  equipmentModelId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

input EquipmentTypeCreateOneInput {
  """The record to create"""
  equipmentType: EquipmentTypeCreateType!
}

input EquipmentTypeCreateType {
  """Entity code"""
  code: String!

  """Type of equipment, i.e. forklift"""
  label: String!

  """Description of entity"""
  description: String

  """Velocity unit of measure"""
  velocityUOMId: ID!

  """Velocity"""
  velocity: Float!

  """Velocity of raising and lowering a piece of equipment"""
  verticalVelocity: Float

  """Imperial or metric unit of measure for height limit."""
  heightUOMId: ID!

  """Number representing maximum height allowance of equipment model."""
  heightMax: Float!

  """Number representing minimum height allowance of equipment model."""
  heightMin: Float!

  """Weight UOM, i.e KG"""
  weightUOMId: ID!

  """Velocity"""
  weightMax: Float!

  """Currency"""
  currency: String!

  """Cost"""
  cost: Float!

  """Volume in unit of measure for entity"""
  volumeUOMId: ID!

  """Volume of entity"""
  volumeMax: Float!

  """Volume of entity"""
  mobility: EquipmentMobility!
}

input EquipmentTypeUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: EquipmentTypeUpdateInput!
}

input EquipmentTypeUpdateInput {
  """Entity code"""
  code: String

  """Type of equipment, i.e. forklift"""
  label: String

  """Description of entity"""
  description: String

  """Velocity unit of measure"""
  velocityUOMId: ID

  """Velocity"""
  velocity: Float

  """Velocity of raising and lowering a piece of equipment"""
  verticalVelocity: Float

  """Imperial or metric unit of measure for height limit."""
  heightUOMId: ID

  """Number representing maximum height allowance of equipment model."""
  heightMax: Float

  """Number representing minimum height allowance of equipment model."""
  heightMin: Float

  """Weight UOM, i.e KG"""
  weightUOMId: ID

  """Velocity"""
  weightMax: Float

  """Currency"""
  currency: String

  """Cost"""
  cost: Float

  """Volume in unit of measure for entity"""
  volumeUOMId: ID

  """Volume of entity"""
  volumeMax: Float

  """Volume of entity"""
  mobility: EquipmentMobility
}

input EquipmentModelCreateOneInput {
  """The record to create"""
  equipmentModel: EquipmentModelCreateType!
}

input EquipmentModelCreateType {
  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Type of equipment, i.e. forklift"""
  equipmentTypeId: ID!
}

input EquipmentModelUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: EquipmentModelUpdateInput!
}

input EquipmentModelUpdateInput {
  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Type of equipment, i.e. forklift"""
  equipmentTypeId: ID
}

input FulfillmentWithItemsCreateOneInput {
  """The record to create"""
  fulfillmentWithItems: FulfillmentWithItemsCreateOneDtoInput!
}

input FulfillmentWithItemsCreateOneDtoInput {
  billOfLading: String
  blockStatus: String

  """Delivery category"""
  category: DeliveryCategory
  deliveryStatus: DeliveryCompletionStatus
  dueDate: DateTime
  erpBlockingReason: String
  erpCode: String
  erpCreated: DateTime

  """When data was last updated in ERP"""
  erpLastChanged: DateTime
  erpPurchaseOrder: String
  erpSalesOrder: String
  export: String
  goodsReceiptOrIssueStatus: DeliveryCompletionStatus
  loadOrUnloadStatus: DeliveryCompletionStatus
  pickOrPutawayStatus: DeliveryCompletionStatus
  pointOfContact: String

  """Delivery promise date"""
  promiseDate: DateTime
  shipTo: String
  shipToName: String

  """When data was last updated in ERP"""
  shipReadyDate: DateTime
  soldTo: String
  soldToName: String
  supplier: String
  supplierName: String
  totalGrossWeight: Float
  totalNetWeight: Float
  totalVolume: Float
  totalVolumeUom: String
  totalWeightUom: String
  doorId: ID!
  fulfillmentBlockId: ID
  shipToBusinessPartnerId: ID
  soldToBusinessPartnerId: ID
  supplierBusinessPartnerId: ID

  """Fulfillment items to create"""
  fulfillmentItems: [FulfillmentItemForFulfillmentCreateInput!]
}

input FulfillmentItemForFulfillmentCreateInput {
  """Customer material"""
  customerProductCode: String

  """Description of entity"""
  dateMaterialAvailable: DateTime

  """Description of entity"""
  description: String

  """Description of entity"""
  erpLastChanged: DateTime

  """Reference document"""
  erpSalesOrder: String

  """Reference document"""
  erpSalesOrderItem: String

  """Delivery Document"""
  fulfillmentCode: String

  """Fulfillment item associated with the entity"""
  fulfillmentItem: String!

  """Quantity of product"""
  fulfillmentQuantity: String!

  """Unit of measure for entity"""
  fulfillmentQuantityUom: String

  """Gross weight of entity"""
  grossWeight: Float
  issueStatus: DeliveryCompletionStatus

  """Load status"""
  licensePlateLevel: DeliveryCompletionStatus

  """Load status"""
  loadStatus: DeliveryCompletionStatus

  """Pick status"""
  pickStatus: DeliveryCompletionStatus

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Unit of measure ID"""
  unitOfMeasureId: ID!
}

input FulfillmentBlockInput {
  """Bill of lading"""
  id: String!

  """Created on date"""
  fulfillmentBlockId: String!
}

input FulfillmentUnblockInput {
  """Bill of lading"""
  id: String!
}

input FulfillmentCreateOrUpdateManyInputDto {
  """Array of records to create"""
  fulfillments: [FulfillmentCreateOrUpdateManyDto!]!
}

input FulfillmentCreateOrUpdateManyDto {
  """Bill of lading"""
  billOfLading: String

  """Created on date"""
  erpCreated: DateTime

  """Delivery date"""
  dueDate: DateTime

  """Date ready to ship"""
  shipReadyDate: DateTime

  """Date promised"""
  promiseDate: DateTime

  """Point of contact"""
  pointOfContact: String

  """Erp Delivery code"""
  erpCode: String

  """Total weight"""
  totalGrossWeight: Float

  """Net weight"""
  totalNetWeight: Float

  """Volume"""
  totalVolume: Float

  """Volume unit of measure"""
  totalVolumeUomId: String

  """Volume unit of measure"""
  totalVolumeUOMId: String

  """Weight unit of measure"""
  totalWeightUomId: String

  """Weight unit of measure"""
  totalWeightUOMId: String

  """Export"""
  export: String

  """When data was last updated in ERP"""
  erpLastChanged: DateTime

  """Reference document"""
  erpSalesOrder: String

  """Goods receipt or goods issue status"""
  goodsReceiptOrIssueStatus: DeliveryCompletionStatus

  """Picking or putaway status"""
  pickOrPutawayStatus: DeliveryCompletionStatus

  """Delivery load or unload status"""
  loadOrUnloadStatus: DeliveryCompletionStatus

  """Overall status for the delivery or fulfillment"""
  deliveryStatus: DeliveryCompletionStatus

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Ship to party"""
  shipTo: String

  """Ship to party name"""
  shipToName: String

  """Sold to party"""
  soldTo: String

  """Sold to party name"""
  soldToName: String

  """Overall blocked status"""
  blockStatus: String

  """Delivery Document Type"""
  deliveryDocumentType: String

  """Entity's door ID (foreign key)"""
  doorId: ID

  """Fulfillment item associated with the entity"""
  fulfillmentItems: [FulfillmentItemCreateInput!]
}

input CreateOneFulfillmentBlockInput {
  """The record to create"""
  fulfillmentBlock: FulfillmentBlockCreateInput!
}

input FulfillmentBlockCreateInput {
  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String
}

input UpdateOneFulfillmentBlockInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: FulfillmentBlockUpdateInput!
}

input FulfillmentBlockUpdateInput {
  """Entity's label"""
  label: String

  """Description of entity"""
  description: String
}

input DeleteOneFulfillmentBlockInput {
  """Entity ID"""
  id: ID!
}

input InventoryReconciliationGenerateDto {
  licensePlateCode: String!
  holdCodes: [String!]!
  stock: [InventoryReconciliationGenerateStockDto!]!
}

input InventoryReconciliationGenerateStockDto {
  productCode: String!
  binCode: String!
  lotCode: String
  storageLocation: String!
  stockType: String
  quantity: String!
  unitOfMeasureCode: String!
}

input InvoiceCreateOneInput {
  """The record to create"""
  invoice: InvoiceCreateInput!
}

input InvoiceCreateInput {
  """Entity code"""
  code: String!
}

input InvoiceUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: InvoiceUpdateInput!
}

input InvoiceUpdateInput {
  """Entity code"""
  code: String
}

input InvoiceItemCreateOneInput {
  """The record to create"""
  invoiceItem: InvoiceItemCreateInput!
}

input InvoiceItemCreateInput {
  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String!

  """Invoice fee type"""
  feeType: InvoiceItemFeeType!

  """Cost of invoice item in USD"""
  value: Float!
}

enum InvoiceItemFeeType {
  handling
  accessorial
  fixed
  storage
  miscellaneous
}

input InvoiceItemUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: InvoiceItemUpdateInput!
}

input InvoiceItemUpdateInput {
  """Entity code"""
  code: String

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Invoice fee type"""
  feeType: InvoiceItemFeeType

  """Cost of invoice item in USD"""
  value: Float
}

input LayoutSharedCreateInput {
  """ApiDocs"""
  input: LayoutSharedCreateDto!
}

input LayoutSharedCreateDto {
  """ApiDocs"""
  label: String!

  """ApiDocs"""
  columns: JSON!

  """ApiDocs"""
  columnSizes: JSON!

  """ApiDocs"""
  filter: JSON!

  """ApiDocs"""
  sorting: JSON!

  """Identifier for front end tables."""
  tableId: String!

  """Identifier for front end tables."""
  pageSize: Float!

  """Entity's warehouse (foreign key)"""
  warehouseId: String!

  """ApiDocs"""
  sharedDefault: Boolean!

  """ApiDocs"""
  userDefault: Boolean!
}

input LayoutSharedUpdateInput {
  """ApiDocs"""
  update: LayoutSharedUpdateDto!

  """Entity ID"""
  id: ID!
}

input LayoutSharedUpdateDto {
  """ApiDocs"""
  label: String

  """ApiDocs"""
  columns: JSON

  """ApiDocs"""
  columnSizes: JSON

  """ApiDocs"""
  filter: JSON

  """ApiDocs"""
  sorting: JSON

  """Identifier for front end tables."""
  pageSize: Float

  """ApiDocs"""
  sharedDefault: Boolean
}

input LayoutDeleteInputType {
  """The id of the record to delete."""
  id: ID!
}

input LayoutUserCreateInput {
  """ApiDocs"""
  input: LayoutUserCreateDto!
}

input LayoutUserCreateDto {
  """ApiDocs"""
  label: String!

  """ApiDocs"""
  columns: JSON!

  """ApiDocs"""
  columnSizes: JSON!

  """ApiDocs"""
  filter: JSON!

  """ApiDocs"""
  sorting: JSON!

  """Identifier for front end tables."""
  tableId: String!

  """Identifier for front end tables."""
  pageSize: Float!

  """Entity's warehouse (foreign key)"""
  warehouseId: String!

  """ApiDocs"""
  userDefault: Boolean!
}

input LayoutUserUpdateInput {
  """ApiDocs"""
  update: LayoutUserUpdateDto!

  """Entity ID"""
  id: ID!
}

input LayoutUserUpdateDto {
  """ApiDocs"""
  label: String

  """ApiDocs"""
  columns: JSON

  """ApiDocs"""
  columnSizes: JSON

  """ApiDocs"""
  filter: JSON

  """ApiDocs"""
  sorting: JSON

  """Identifier for front end tables."""
  pageSize: Float
}

input LayoutUserSetDefaultInput {
  """ApiDocs"""
  update: LayoutUserSetDefaultDto!

  """Entity ID"""
  id: ID!
}

input LayoutUserSetDefaultDto {
  """ApiDocs"""
  userDefault: Boolean!
}

input LicensePlateTaskCreateManyLinkedDto {
  """Entity ID"""
  licensePlateId: ID!

  """Entity ID"""
  sourceBinId: ID!

  """Entity ID"""
  destinationBinId: ID!

  """Entity ID"""
  warehouseId: ID!

  """Entity ID"""
  internalStockOrderItemId: ID!
  status: TaskStatus

  """Entity ID"""
  taskTypeCode: TaskTypeCodes!
}

enum TaskTypeCodes {
  binToBinMovement
  inventoryCount
  inventoryCountApproval
  deliveryPutawayTask
  initialImport
  fulfillmentPickTask
  licensePlateMovement
  licensePlateBinToBinMovement
  deliveryBinImport
  licensePlatePutaway
  licensePlateUnpackTask
  licensePlateMerge
  licensePlatePick
  unload
  pickToStaging
  load
  changeStockStatus
  countBin
  issueStock
  foundStock
  licensePlateLoad
  receiptFromProduction
  soPickToDock
  stoPickToDock
  adjustStock
}

input MapCreateOneInput {
  """The record to create"""
  map: MapCreateType!
}

input MapCreateType {
  """Entity's human readable name"""
  name: String!

  """Json data to generate a warehouse map"""
  mapJson: JSON!

  """Entity's warehouse (foreign key)"""
  warehouseId: String!

  """physical or logical map data"""
  mapType: MapType
  mapConfiguration: JSONObject
}

input PlanogramCreateOneInput {
  """The record to create"""
  planogram: PlanogramCreateType!
}

input PlanogramCreateType {
  """Entity's human readable name"""
  code: String!

  """Entity's human readable name"""
  description: String!

  """Json data to generate a warehouse planogram"""
  warehouseId: JSON!
}

input ReplenishmentCreateOneInput {
  """The record to create"""
  replenishment: ReplenishmentCreateInput!
}

input ReplenishmentCreateInput {
  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's bin ID (foreign key)"""
  binId: ID!

  """Minimum quantity threshold for a replenishment setting"""
  autoMin: Float

  """Maximum quantity threshold for a replenishment setting"""
  autoMax: Float

  """
  Quantity to replenish when a replenishment setting threshold is triggered
  """
  autoReplenishmentQuantity: Float

  """Unit of measure ID"""
  unitOfMeasureId: ID!

  """Minimum quantity threshold for a manual replenishment setting"""
  manualMin: Float

  """Maximum quantity threshold for a manual replenishment setting"""
  manualMax: Float

  """
  Quantity to replenish when a manual replenishment setting threshold is triggered
  """
  manualReplenishmentQuantity: Float

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's warehouse (foreign key)"""
  replenishmentType: ReplenishmentType!
}

input ReplenishmentUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: ReplenishmentUpdateInput!
}

input ReplenishmentUpdateInput {
  """Entity's product ID (foreign key)"""
  productId: ID

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Minimum quantity threshold for a replenishment setting"""
  autoMin: Float

  """Maximum quantity threshold for a replenishment setting"""
  autoMax: Float

  """
  Quantity to replenish when a replenishment setting threshold is triggered
  """
  autoReplenishmentQuantity: Float

  """Unit of measure ID"""
  unitOfMeasureId: ID

  """Minimum quantity threshold for a manual replenishment setting"""
  manualMin: Float

  """Maximum quantity threshold for a manual replenishment setting"""
  manualMax: Float

  """
  Quantity to replenish when a manual replenishment setting threshold is triggered
  """
  manualReplenishmentQuantity: Float

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's warehouse (foreign key)"""
  replenishmentType: ReplenishmentType
}

input UpdatePermissionsForRoleDto {
  permissionIds: [String!]!

  """Entity ID"""
  roleId: String!
}

input ScheduledJobCreateInputDto {
  """The record to create"""
  scheduledJob: ScheduledJobCreateInput!
}

input ScheduledJobCreateInput {
  """ApiDocs"""
  name: String!

  """Interval in min. should should execute"""
  updateInterval: Int!
  state: JobState!
  scheduledJobTypeId: ID!
}

input UpdateScheduledJobInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ScheduledJobUpdateInput!
}

input ScheduledJobUpdateInput {
  """ApiDocs"""
  name: String

  """Interval in min. should should execute"""
  updateInterval: Int
  state: JobState
  scheduledJobTypeId: ID
}

input UpdateScheduledJobByIdInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: ScheduledJobUpdateStatusInput!
}

input ScheduledJobUpdateStatusInput {
  id: ID
}

input SlottingDatasetCreateOneInput {
  """The record to create"""
  SlottingDataset: SlottingDatasetCreateInput!
}

input SlottingDatasetCreateInput {
  """Name for SAP variant"""
  variantName: String!

  """Description for SAP variant"""
  variantDescription: String!

  """ApiDocs"""
  name: String!

  """ApiDocs"""
  numCount: String

  """Date range for data pulled from ERP system"""
  dateRangeStart: DateTime!

  """Date range for data pulled from ERP system"""
  dateRangeEnd: DateTime!

  """Lock setting for a slotting dataset"""
  locked: Boolean!

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
}

input SlottingDatasetUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: SlottingDatasetUpdateInput!
}

input SlottingDatasetUpdateInput {
  """Description of entity"""
  variantDescription: String

  """Description of entity"""
  name: String

  """Lock setting for a slotting dataset"""
  locked: Boolean

  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Current status when loading a slotting dataset from ERP system"""
  loadStatus: SlottingLoadStatus
}

input MaterialMovmentDtoCreateOneInput {
  PostingDate: String!
  GoodsMovementCode: SapMaterialMovementCode!
  to_MaterialDocumentItem: [MaterialDocumentItemDocumentInput!]!
}

enum SapMaterialMovementCode {
  GOODS_RECIEPT_PURCHASE_ORDER
  GOODS_RECIEPT_PRODUCTION_ORDER
  GOODS_ISSUE
  TRANSFER_POSTING
  OTHER_GOODS_RECEIPTS
  REVERSAL_GOODS_MOVEMENT
  SUBSEQUENT_ADJUSTMENT_SUBCONTRACT_ORDER
}

input MaterialDocumentItemDocumentInput {
  GoodsMovementType: SapMaterialMovementType!
  Plant: String!
  StorageLocation: String!
  Material: String!
  QuantityInEntryUnit: String!
  IssuingOrReceivingPlant: String
  IssuingOrReceivingStorageLoc: String
  Batch: String
}

enum SapMaterialMovementType {
  GOODS_RECIEPT_WITHOUT_PURCHASE_ORDER
}

input SAPSalesOrderCreateOneInput {
  """Erp sales order"""
  salesOrderNumber: String!

  """Date string for requested delivery date"""
  requestedDeliveryDate: String!
}

input SlottingRulesetCreateOneInput {
  """The record to create"""
  slottingRuleset: SlottingRulesetCreateInput!
}

input SlottingRulesetCreateInput {
  """"""
  name: String!

  """"""
  id: String

  """"""
  warehouseId: String!
  restrictions: SlottingRestrictionsInput
  weights: SlottingWeightsInput
  equipment: [SlottingEquipmentInput!]
  workers: [SlottingWorkerInput!]

  """"""
  forecasting: Forecasting
  abcAnalysis: AbcAnalysisInput

  """"""
  maxMovements: Int
  zones: [SlottingZoneInput!]
  zoneGroups: [SlottingZoneGroupInput!]

  """Slotting config private indicator"""
  privateRuleset: Boolean

  """Created by user"""
  createdByUserId: ID

  """ruleset status, i.e. COMPLETE, DRAFT"""
  rulesetStatus: RulesetStatus = complete
}

input SlottingRestrictionsInput {
  """Slotting restriction field"""
  fifoPicking: Boolean!

  """Slotting restriction field"""
  fefoFifoPicking: Boolean!

  """Slotting restriction field"""
  heaviestToLightestPicks: Boolean!

  """Slotting restriction field"""
  preventMixedProductsInBins: Boolean!

  """Slotting restriction field"""
  preventMixedLotsInBins: Boolean!

  """Slotting restriction field"""
  preventMixedExpirationDatesInBins: Boolean!

  """Slotting restriction field"""
  preventSimilarProductsInAdjacentBins: Boolean!

  """Slotting restriction field"""
  enforceSingleOrderPicks: Boolean!

  """Slotting restriction field"""
  restrictDistance: Boolean!

  """Slotting restriction field"""
  restrictedDistance: Int

  """Slotting restriction field"""
  restrictDistanceBy: DistanceRestrictionEnum
}

input SlottingWeightsInput {
  pickDensity: Float!
  pickEfficiency: Float!
  putawayDensity: Float!
  putawayEfficiency: Float!
  avoidCongestion: Float!
  favorGroundLevel: Float!
}

input SlottingEquipmentInput {
  id: ID!
  quantity: Float!
}

input SlottingWorkerInput {
  id: ID!
  quantity: Float!
}

input AbcAnalysisInput {
  """Slotting ABC criteria"""
  criteria: AbcCriteria!

  """Slotting ABC indicator percentages"""
  indicatorPercentages: [Float!]!
}

enum AbcCriteria {
  salesOrderLineItems
  salesOrderQuantity
}

input SlottingZoneInput {
  zoneId: String = "false"
  groupId: String
  fixedBins: Boolean
  useMaxMovements: Boolean
  optimizeZone: Boolean!
  zoneConfiguration: ZoneConfiguration!
  maxFixedBinsPerProduct: Float!
  restrictions: SlottingRestrictionsInput!
  weights: SlottingWeightsInput!
  parentZoneId: String
}

input SlottingZoneGroupInput {
  groupId: String!
  name: String!
  fixedBins: Boolean
  useMaxMovements: Boolean
  optimizeZone: Boolean!
  zoneConfiguration: ZoneConfiguration!
  maxFixedBinsPerProduct: Float!
  restrictions: SlottingRestrictionsInput!
  weights: SlottingWeightsInput!
  zonesInGroup: [String!] = []
}

input SlottingRulesetUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: SlottingRulesetUpdateInput!
}

input SlottingRulesetUpdateInput {
  """"""
  name: String

  """"""
  id: String

  """"""
  warehouseId: String
  restrictions: SlottingRestrictionsInput
  weights: SlottingWeightsInput
  equipment: [SlottingEquipmentInput!]
  workers: [SlottingWorkerInput!]

  """"""
  forecasting: Forecasting
  abcAnalysis: AbcAnalysisInput

  """"""
  maxMovements: Int
  zones: [SlottingZoneInput!]
  zoneGroups: [SlottingZoneGroupInput!]

  """Slotting config private indicator"""
  privateRuleset: Boolean

  """Created by user"""
  createdByUserId: ID

  """ruleset status, i.e. COMPLETE, DRAFT"""
  rulesetStatus: RulesetStatus = complete
}

input WarehouseRoleTypeCreateOneInput {
  """The record to create"""
  warehouseRoleType: WarehouseRoleTypeCreateType!
}

input WarehouseRoleTypeCreateType {
  """Entity code"""
  code: String!

  """Entity's label"""
  label: String!

  """Description of entity"""
  description: String

  """Velocity unit of measure"""
  velocityUOMId: ID!

  """Velocity"""
  velocity: Float!

  """Weight UOM, i.e KG"""
  weightUOMId: ID!

  """Number representing maximum weight limit for an equipment model."""
  weightMax: Float!

  """Currency"""
  currency: String!

  """Cost"""
  cost: Float!
}

input WarehouseRoleTypeUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: WarehouseRoleTypeUpdateInput!
}

input WarehouseRoleTypeUpdateInput {
  """Entity code"""
  code: String

  """Entity's label"""
  label: String

  """Description of entity"""
  description: String

  """Velocity unit of measure"""
  velocityUOMId: ID

  """Velocity"""
  velocity: Float

  """Weight UOM, i.e KG"""
  weightUOMId: ID

  """Number representing maximum weight limit for an equipment model."""
  weightMax: Float

  """Currency"""
  currency: String

  """Cost"""
  cost: Float
}

input ZoneCreateOneInput {
  """The record to create"""
  zone: ZoneCreateInput!
}

input ZoneCreateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity code"""
  code: String!

  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Unit of measure glossary ID"""
  pickingUomRestrictionId: ID
}

input ZoneUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: ZoneUpdateInput!
}

input ZoneUpdateInput {
  """ApiDocs"""
  name: String

  """Description of entity"""
  description: String

  """Unit of measure glossary ID"""
  pickingUomRestrictionId: ID

  """Entity code"""
  code: String

  """Entity ID"""
  binIds: ZoneAddRemoveBlock

  """Entity ID"""
  aisleIds: ZoneAddRemoveBlock

  """Entity ID"""
  aisleColumnIds: ZoneAddRemoveBlock

  """Entity ID"""
  areaIds: ZoneAddRemoveBlock
}

input ZoneAddRemoveBlock {
  """Relation IDs to add"""
  add: [ID!]!

  """Relation IDs to remove"""
  remove: [ID!]!
}

input SlottingRunCreateOneInput {
  """The record to create"""
  slottingRun: SlottingRunCreateInput!
}

input SlottingRunCreateInput {
  """"""
  rulesetId: ID

  """"""
  warehouseId: ID!

  """"""
  name: ID!

  """the dataset start time"""
  datasetStart: DateTime!

  """the dataset end time"""
  datasetEnd: DateTime!
}

input DeployRunInput {
  """Entity ID"""
  runId: ID!

  """abc analysis"""
  abcAnalysisIds: [String!]!

  """fixed bin recommendations"""
  fixedBinRecommendationIds: [String!]!
}

input SlottingConfigurationCreateOneInput {
  """The record to create"""
  slottingConfiguration: SlottingConfigurationCreateInput!
}

input SlottingConfigurationCreateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID!
  configuration: JSON = "{ \"showSwaps\": true }"
}

input SlottingConfigurationUpdateOneInput {
  """Entity ID"""
  id: ID!

  """Update Dto"""
  update: SlottingConfigurationUpdateInput!
}

input SlottingConfigurationUpdateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID
  configuration: JSON = "{ \"showSwaps\": true }"
}

input SystemConnectionUpdateActiveDto {
  """Entity ID"""
  ids: [String!]!

  """System connection active"""
  active: Boolean!
}

input TaskGroupStartDto {
  """Task Group Id"""
  taskGroupId: ID!

  """x coordinate location"""
  startedAtLocationX: Float

  """Y coordinate location"""
  startedAtLocationY: Float
}

input TaskDispatchDtoInput {
  """Dto wrapper"""
  dispatchTask: TaskDispatchDto!
}

input TaskDispatchDto {
  """Entity code"""
  erpCode: String!

  """Entity code"""
  binCode: String!

  """Entity code"""
  destinationBinCode: String

  """Entity code"""
  warehouseCode: String!
}

input TaskAssignDto {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Entity's user ID (foreign key)"""
  assignUserId: ID

  """Entity's team ID (foreign key)"""
  assignTeamId: ID
}

input TaskStartDto {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """x coordinate location"""
  startedAtLocationX: Float

  """Y coordinate location"""
  startedAtLocationY: Float
}

input TaskBlockInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskBlockInput!
}

input TaskBlockInput {
  """Entity's task ID (foreign key)"""
  taskId: String!

  """Entity's bin ID (foreign key)"""
  binId: String!
}

input CreatePITaskInputDto {
  """The record to create"""
  physicalInventory: TaskCreatePIInput!
}

input TaskCreatePIInput {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's bin ID (foreign key)"""
  binId: ID!

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """New quantity during cycle count"""
  newCount: String

  """Damaged quantity during cycle count"""
  damagedCount: String

  """Unit of measure ID"""
  createdInUnitOfMeasureId: ID

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Entity's stock status type ID (foreign key)"""
  stockStatusId: ID

  """Type of physical inventory adjustment"""
  adjustmentType: AdjustmentType

  """Autocomplete the task on creation"""
  autocomplete: Boolean = true
}

enum AdjustmentType {
  physicalInventory
  damagedProduct
}

input CompletePITaskInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskCompletePIInput!
}

input TaskCompletePIInput {
  """New quantity during cycle count"""
  newCount: String

  """Damaged quantity during cycle count"""
  damagedCount: String

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID

  """Type of physical inventory adjustment"""
  adjustmentType: AdjustmentType!
}

input ApprovePITaskInputDto {
  """Dto wrapper"""
  physicalInventoryApproval: TaskApprovePIInput!
}

input TaskApprovePIInput {
  """Entity's user ID (foreign key)"""
  taskId: ID!

  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID
}

input CreateBinPITaskInputDto {
  """The record to create"""
  physicalInventoryByBin: TaskCreateBinPIInput!
}

input TaskCreateBinPIInput {
  """Entity ID"""
  binId: ID!

  """Indicates whether the count should be guided or blind"""
  countType: PhysicalInventoryCountType = guidedCount

  """Date the task is or was due"""
  dueDate: DateTime

  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID
}

input TaskCreateManyBinPIInput {
  countItems: [TaskCreateBinPIInput!]!
}

input CompleteBinPITaskInputDto {
  """Entity ID"""
  taskId: ID!

  """Bin Stock"""
  inventory: [BinStockDetailDto!]!

  """Unknown Bin Stock"""
  unknownInventory: [UnknownBinStockDetailDto!]
}

input BinStockDetailDto {
  """Entity ID"""
  licensePlateId: ID

  """Entity ID"""
  productId: ID

  """Entity ID"""
  lotId: ID

  """Entity ID"""
  stockStatusId: ID
  quantity: String

  """Entity ID"""
  unitOfMeasureId: ID

  """Entity ID"""
  deliveryItemId: ID

  """Entity ID"""
  fulfillmentItemId: ID
}

input UnknownBinStockDetailDto {
  """Entity ID"""
  licensePlateCode: String

  """Entity ID"""
  productId: ID

  """Entity ID"""
  lotId: ID

  """Entity ID"""
  stockStatusId: ID
  quantity: String

  """Entity ID"""
  unitOfMeasureId: ID
}

input CompleteManyBinPITaskInputDto {
  """Dto Wrapper"""
  countItems: [CompleteBinPITaskInputDto!]!
}

input CompleteManyBinPIApprovalTaskInputDto {
  """Dto wrapper"""
  approvalItems: [CompleteManyBinPIApprovalTaskDto!]!
}

input CompleteManyBinPIApprovalTaskDto {
  """Entity ID"""
  taskId: ID!

  """Indicates whether the approval tsk is approved or denied"""
  approved: Boolean!

  """Indicates whether the count should be guided or blind"""
  recountCountType: PhysicalInventoryCountType = guidedCount

  """Due date"""
  dueDate: DateTime
}

input CreateBinToBinTaskInputDto {
  """The record to create"""
  binToBinMovement: TaskCreateBinToBinInput!
}

input TaskCreateBinToBinInput {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Destination lot ID (foreign key)"""
  destinationLotId: ID

  """Source bin ID"""
  sourceBinId: ID!

  """Destination bin ID"""
  destinationBinId: ID!

  """Quantity of product"""
  quantity: String!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Meta data stored on the entity in json format"""
  metaData: JSON

  """Autocomplete the task on creation"""
  autocomplete: Boolean

  """Date the task is or was due"""
  dueDate: DateTime

  """Source stock status type ID (foreign key)"""
  sourceStockStatusId: ID

  """Destination stock status type ID (foreign key)"""
  destinationStockStatusId: ID

  """Unit of measure ID"""
  createdInUnitOfMeasureId: ID!

  """Entity ID"""
  deliveryItemId: ID

  """Entity ID"""
  fulfillmentItemId: ID
}

input CompleteBinToBinTaskInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskCompleteBinToBinInput!
}

input TaskCompleteBinToBinInput {
  """Entity's task ID (foreign key)"""
  taskId: ID

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID!

  """Quantity of product"""
  quantity: String!
}

input LicensePlateBinToBinTaskMovementCreateInputDto {
  """The record to create"""
  licensePlateBinToBinMovement: LicensePlateBinToBinTaskMovementCreateDto!
}

input LicensePlateBinToBinTaskMovementCreateDto {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Destination bin ID"""
  destinationBinId: ID!

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID!

  """Autocomplete the task on creation"""
  autocomplete: Boolean

  """Entity ID"""
  deliveryItemId: ID

  """Entity ID"""
  fulfillmentItemId: ID
}

input TaskCompleteLicensePlateBinToBinMovement {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Entity's bin ID (foreign key)"""
  overrideDestinationBinId: ID
}

input CreateOneTaskDispositionInput {
  """The record to create"""
  taskDisposition: CreateTaskDisposition!
}

input CreateTaskDisposition {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Notes for a submitted disposition"""
  notes: String

  """ID of stored image"""
  images: [TaskDispositionImages!]
}

input TaskDispositionImages {
  """ID of stored image"""
  imageId: ID!
}

input DispositionApproveOneDto {
  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Disposition ID"""
  dispositionId: ID

  """Disposition approval"""
  approval: Boolean!
}

input IssueStockTaskCreateOneInput {
  """The record to create"""
  createOneIssueStockTaskDto: CreateOneIssueStockTaskDto!
}

input CreateOneIssueStockTaskDto {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Entity's bin ID (foreign key)"""
  sourceBinId: ID!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Quantity of product"""
  quantity: String!

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Entity's stock status type ID (foreign key)"""
  sourceStockStatusId: ID!

  """Entity's license plate ID (foreign key)"""
  sourceLicensePlateId: ID

  """Autocomplete the task on creation"""
  autocomplete: Boolean
}

input TaskCompleteOneIssueStockInput {
  """Entity's task ID (foreign key)"""
  taskId: ID
}

input StockRemoveDto {
  """Entity ID"""
  licensePlateId: ID!
}

input LicensePlateSyncJobUpdateOneDto {
  """Handling unit"""
  handlingUnit: String

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Source bin ID"""
  sourceBinId: ID

  """SAP Storage bin code"""
  sapStorageBinCode: String

  """SAP Storage Type Code"""
  sapStorageTypeCode: String

  """Entity's warehouse (foreign key)"""
  warehouseId: ID
}

input PostTransferOrderJobUpdateOneDto {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's bin ID (foreign key)"""
  binId: ID

  """Entity's user ID (foreign key)"""
  userId: ID

  """Entity's area ID (foreign key)"""
  areaId: ID

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Entity's door ID (foreign key)"""
  doorId: ID

  """Internal Stock Order Type Code"""
  internalStockOrderTypeCode: String

  """Internal Stock Order Type ID"""
  internalStockOrderTypeId: ID

  """Internal Stock Order Type ID"""
  exitPoint: Boolean
}

input TaskLPStockStatusHuUserStatusUpdateDto {
  """Array of Hu User Status Codes"""
  huUserCodes: [String!]

  """License plate stock"""
  stock: [TaskLPStockStatusStockDetailDto!]!

  """Entity ID or Code Dto"""
  licensePlate: IdOrCodeDto!
}

input TaskLPStockStatusStockDetailDto {
  """Entity ID or Code Dto"""
  product: IdOrCodeDto!

  """Entity ID or Code Dto"""
  lot: IdOrCodeDto

  """Quantity of product"""
  quantity: String!

  """Entity ID or Code Dto"""
  unitOfMeasure: IdOrCodeDto!
  sapStockType: String!
}

input IdOrCodeDto {
  """Entity ID"""
  id: String

  """Entity code"""
  code: String
}

input CreateOneTaskLicensePlateStockStatusInput {
  """The record to create"""
  taskLicensePlateStockStatus: CreateTaskLicensePlateStockStatus!
}

input CreateTaskLicensePlateStockStatus {
  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Notes for a submitted disposition"""
  notes: String

  """ID of stored image"""
  images: [TaskLicensePlateStockStatusImages!]

  """Autocomplete the task on creation"""
  autocomplete: Boolean

  """Entity's stock status type ID (foreign key)"""
  stockStatusId: ID

  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID
}

input TaskLicensePlateStockStatusImages {
  """ID of stored image"""
  imageId: ID!
}

input TaskLicensePlateStockStatusCompleteOneDto {
  taskId: ID
  licensePlateId: ID
}

input FoundStockTaskCreateAndCompleteOneInput {
  """The record to create"""
  createAndCompleteOneFoundStockTaskDto: CreateAndCompleteOneFoundStockTaskDto!
}

input CreateAndCompleteOneFoundStockTaskDto {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Delivery or fulfillment erp code"""
  fulfillmentCode: String!

  """Product code"""
  productCode: String!

  """Quantity of product"""
  quantity: String!

  """Source lot ID (foreign key)"""
  lotId: ID

  """Entity's stock status type ID (foreign key)"""
  stockStatusId: ID!

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Destination license plate description"""
  licensePlateDescription: String

  """ERP delivery block"""
  licensePlateStatus: LicensePlateStatusState
}

input CreatePickTaskInputDto {
  """The record to create"""
  fulfillment: TaskCreatePickInput!
}

input TaskCreatePickInput {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Fulfillment Id"""
  id: ID!

  """Fulfillment Id"""
  fulfillmentItemsToPick: [TaskPickFulfillmentItem!]!
}

input TaskPickFulfillmentItem {
  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID!

  """Unit of measure ID"""
  createdInUnitOfMeasureId: ID!

  """Quantity of product"""
  quantity: String!
}

input CompletePickTaskInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskCompletePickInput!
}

input TaskCompletePickInput {
  """Source bin ID (foreign key)"""
  sourceBinId: ID!

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Source License Plate Id"""
  licensePlateId: ID

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID!

  """Quantity of product"""
  quantity: String!
}

input LicensePlateMovementCreateInputDto {
  """The record to create"""
  licensePlateMovement: LicensePlateTaskMovementCreateDto!
}

input LicensePlateTaskMovementCreateDto {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """ApiDocs"""
  products: [LicensePlateMovementProductInput!]!

  """Destination bin ID"""
  destinationBinId: ID!

  """License Plate Parent ID"""
  licensePlateParentId: ID

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID

  """Autocomplete the task on creation"""
  autocomplete: Boolean
}

input LicensePlateMovementProductInput {
  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's lot ID (foreign key)"""
  lotId: ID

  """Delivery item ID (foreign key)"""
  deliveryItemId: ID

  """Entity's stock status type ID (foreign key)"""
  stockStatusId: ID!

  """Entity ID"""
  licensePlateId: ID

  """Quantity of product"""
  quantity: String!

  """Unit of measure ID"""
  createdInUnitOfMeasureId: ID!

  """Entity's bin ID (foreign key)"""
  binId: ID!
}

input TaskCompleteLicensePlateMovementInputDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: TaskCompleteLicensePlateMovement!
}

input TaskCompleteLicensePlateMovement {
  """Entity's user ID (foreign key)"""
  taskId: ID

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID

  """Quantity of product"""
  quantity: String!
}

input TaskLicensePlateUnpackInputCreateDto {
  """The record to create"""
  licensePlateUnpack: LicensePlateUnpackLicensePlateDto!
}

input LicensePlateUnpackLicensePlateDto {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Entity's license plate ID (foreign key)"""
  licensePlateId: ID!

  """Autocomplete the task on creation"""
  autocomplete: Boolean
}

input TaskLicensePlateUnpackInputCompleteDto {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: LicensePlateUnpackLicensePlateCompleteDto!
}

input LicensePlateUnpackLicensePlateCompleteDto {
  """Entity's task ID (foreign key)"""
  taskId: ID!
}

input LoadTaskCompleteInput {
  """Entity's task ID (foreign key)"""
  licensePlateId: ID

  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Source bin ID (foreign key)"""
  sourceBinId: ID!

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID

  """Quantity of product"""
  quantity: String
}

input TaskCompleteOneLoadInput {
  """Entity's task ID (foreign key)"""
  taskId: ID

  """Entity's task ID (foreign key)"""
  licensePlateId: ID!
}

input TaskCompleteLoadInput {
  """Entity's task ID (foreign key)"""
  licensePlateId: ID!
}

input CompletePickToStagingTaskInput {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Source bin ID (foreign key)"""
  sourceBinId: ID!

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Source License Plate Id"""
  licensePlateId: ID

  """Unit of measure ID"""
  completedInUnitOfMeasureId: ID

  """Quantity of product"""
  quantity: String
}

input TaskCreateOnePickToStagingInput {
  """Entity's team ID (foreign key)"""
  assignedTeamId: ID

  """Entity's user ID (foreign key)"""
  assignedUserId: ID

  """Fulfillment item id (foreign key)"""
  fulfillmentItemId: ID!

  """Entity's bin ID (foreign key)"""
  sourceBinId: ID!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Quantity of product"""
  quantity: String!

  """Source lot ID (foreign key)"""
  sourceLotId: ID

  """Entity's stock status type ID (foreign key)"""
  sourceStockStatusId: ID!

  """Entity's license plate ID (foreign key)"""
  sourceLicensePlateId: ID
}

input TaskCompleteOnePickToStagingInput {
  """Entity's task ID (foreign key)"""
  taskId: ID!
}

input TaskCompleteManyPickToStagingInput {
  """Entity's task ID (foreign key)"""
  taskId: ID!
}

input CompletePickToDockTaskInput {
  """Entity's task ID (foreign key)"""
  taskId: ID!

  """Entity's bin ID (foreign key)"""
  destinationBinId: ID!
}

input AdjustLpInventoryItemDto {
  """Entity code"""
  lotCode: String

  """Entity code"""
  productCode: String!

  """Entity code"""
  stockStatusCode: String!

  """Quantity of product"""
  quantity: String!

  """Entity code"""
  unitOfMeasureCode: String!
}

input SlottingExclusionCreateOneInput {
  """The record to create"""
  slottingExclusion: SlottingExclusionCreateInput!
}

input SlottingExclusionCreateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID!

  """Entity's product ID (foreign key)"""
  productId: ID!

  """Entity's user ID (foreign key)"""
  excludedById: ID
}

input SlottingExclusionUpdateOneInput {
  """Entity ID"""
  id: ID!

  """update dto"""
  update: SlottingExclusionUpdateInput!
}

input SlottingExclusionUpdateInput {
  """Entity's warehouse (foreign key)"""
  warehouseId: ID

  """Entity's product ID (foreign key)"""
  productId: ID

  """Entity's user ID (foreign key)"""
  excludedById: ID
}

input SysAdminOutboundDeliveryCreateDtoInput {
  plant: String!
  storageLocation: String!
  requestedDeliveryDate: String!
}
